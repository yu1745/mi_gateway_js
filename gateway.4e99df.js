; (self.webpackChunkai_config = self.webpackChunkai_config || []).push([
    [634],
    {
        13550: function (e, t, r) {
            !(function (e, t) {
                'use strict'
                function i(e, t) {
                    if (!e) throw new Error(t || 'Assertion failed')
                }
                function n(e, t) {
                    e.super_ = t
                    var r = function () { }
                        ; (r.prototype = t.prototype),
                            (e.prototype = new r()),
                            (e.prototype.constructor = e)
                }
                function s(e, t, r) {
                    if (s.isBN(e)) return e
                        ; (this.negative = 0),
                            (this.words = null),
                            (this.length = 0),
                            (this.red = null),
                            null !== e &&
                            (('le' !== t && 'be' !== t) || ((r = t), (t = 10)),
                                this._init(e || 0, t || 10, r || 'be'))
                }
                var o
                'object' == typeof e ? (e.exports = s) : (t.BN = s),
                    (s.BN = s),
                    (s.wordSize = 26)
                try {
                    o =
                        'undefined' != typeof window && void 0 !== window.Buffer
                            ? window.Buffer
                            : r(46601).Buffer
                } catch (A) { }
                function a(e, t) {
                    var r = e.charCodeAt(t)
                    return r >= 65 && r <= 70
                        ? r - 55
                        : r >= 97 && r <= 102
                            ? r - 87
                            : (r - 48) & 15
                }
                function u(e, t, r) {
                    var i = a(e, r)
                    return r - 1 >= t && (i |= a(e, r - 1) << 4), i
                }
                function c(e, t, r, i) {
                    for (var n = 0, s = Math.min(e.length, r), o = t; o < s; o++) {
                        var a = e.charCodeAt(o) - 48
                            ; (n *= i), (n += a >= 49 ? a - 49 + 10 : a >= 17 ? a - 17 + 10 : a)
                    }
                    return n
                }
                ; (s.isBN = function (e) {
                    return (
                        e instanceof s ||
                        (null !== e &&
                            'object' == typeof e &&
                            e.constructor.wordSize === s.wordSize &&
                            Array.isArray(e.words))
                    )
                }),
                    (s.max = function (e, t) {
                        return e.cmp(t) > 0 ? e : t
                    }),
                    (s.min = function (e, t) {
                        return e.cmp(t) < 0 ? e : t
                    }),
                    (s.prototype._init = function (e, t, r) {
                        if ('number' == typeof e) return this._initNumber(e, t, r)
                        if ('object' == typeof e) return this._initArray(e, t, r)
                        'hex' === t && (t = 16), i(t === (0 | t) && t >= 2 && t <= 36)
                        var n = 0
                        '-' === (e = e.toString().replace(/\s+/g, ''))[0] &&
                            (n++, (this.negative = 1)),
                            n < e.length &&
                            (16 === t
                                ? this._parseHex(e, n, r)
                                : (this._parseBase(e, t, n),
                                    'le' === r && this._initArray(this.toArray(), t, r)))
                    }),
                    (s.prototype._initNumber = function (e, t, r) {
                        e < 0 && ((this.negative = 1), (e = -e)),
                            e < 67108864
                                ? ((this.words = [67108863 & e]), (this.length = 1))
                                : e < 4503599627370496
                                    ? ((this.words = [67108863 & e, (e / 67108864) & 67108863]),
                                        (this.length = 2))
                                    : (i(e < 9007199254740992),
                                        (this.words = [67108863 & e, (e / 67108864) & 67108863, 1]),
                                        (this.length = 3)),
                            'le' === r && this._initArray(this.toArray(), t, r)
                    }),
                    (s.prototype._initArray = function (e, t, r) {
                        if ((i('number' == typeof e.length), e.length <= 0))
                            return (this.words = [0]), (this.length = 1), this
                                ; (this.length = Math.ceil(e.length / 3)),
                                    (this.words = new Array(this.length))
                        for (var n = 0; n < this.length; n++) this.words[n] = 0
                        var s,
                            o,
                            a = 0
                        if ('be' === r)
                            for (n = e.length - 1, s = 0; n >= 0; n -= 3)
                                (o = e[n] | (e[n - 1] << 8) | (e[n - 2] << 16)),
                                    (this.words[s] |= (o << a) & 67108863),
                                    (this.words[s + 1] = (o >>> (26 - a)) & 67108863),
                                    (a += 24) >= 26 && ((a -= 26), s++)
                        else if ('le' === r)
                            for (n = 0, s = 0; n < e.length; n += 3)
                                (o = e[n] | (e[n + 1] << 8) | (e[n + 2] << 16)),
                                    (this.words[s] |= (o << a) & 67108863),
                                    (this.words[s + 1] = (o >>> (26 - a)) & 67108863),
                                    (a += 24) >= 26 && ((a -= 26), s++)
                        return this.strip()
                    }),
                    (s.prototype._parseHex = function (e, t, r) {
                        ; (this.length = Math.ceil((e.length - t) / 6)),
                            (this.words = new Array(this.length))
                        for (var i = 0; i < this.length; i++) this.words[i] = 0
                        var n,
                            s = 0,
                            o = 0
                        if ('be' === r)
                            for (i = e.length - 1; i >= t; i -= 2)
                                (n = u(e, t, i) << s),
                                    (this.words[o] |= 67108863 & n),
                                    s >= 18
                                        ? ((s -= 18), (o += 1), (this.words[o] |= n >>> 26))
                                        : (s += 8)
                        else
                            for (
                                i = (e.length - t) % 2 == 0 ? t + 1 : t;
                                i < e.length;
                                i += 2
                            )
                                (n = u(e, t, i) << s),
                                    (this.words[o] |= 67108863 & n),
                                    s >= 18
                                        ? ((s -= 18), (o += 1), (this.words[o] |= n >>> 26))
                                        : (s += 8)
                        this.strip()
                    }),
                    (s.prototype._parseBase = function (e, t, r) {
                        ; (this.words = [0]), (this.length = 1)
                        for (var i = 0, n = 1; n <= 67108863; n *= t) i++
                        i--, (n = (n / t) | 0)
                        for (
                            var s = e.length - r,
                            o = s % i,
                            a = Math.min(s, s - o) + r,
                            u = 0,
                            d = r;
                            d < a;
                            d += i
                        )
                            (u = c(e, d, d + i, t)),
                                this.imuln(n),
                                this.words[0] + u < 67108864
                                    ? (this.words[0] += u)
                                    : this._iaddn(u)
                        if (0 !== o) {
                            var p = 1
                            for (u = c(e, d, e.length, t), d = 0; d < o; d++) p *= t
                            this.imuln(p),
                                this.words[0] + u < 67108864
                                    ? (this.words[0] += u)
                                    : this._iaddn(u)
                        }
                        this.strip()
                    }),
                    (s.prototype.copy = function (e) {
                        e.words = new Array(this.length)
                        for (var t = 0; t < this.length; t++) e.words[t] = this.words[t]
                            ; (e.length = this.length),
                                (e.negative = this.negative),
                                (e.red = this.red)
                    }),
                    (s.prototype.clone = function () {
                        var e = new s(null)
                        return this.copy(e), e
                    }),
                    (s.prototype._expand = function (e) {
                        for (; this.length < e;) this.words[this.length++] = 0
                        return this
                    }),
                    (s.prototype.strip = function () {
                        for (; this.length > 1 && 0 === this.words[this.length - 1];)
                            this.length--
                        return this._normSign()
                    }),
                    (s.prototype._normSign = function () {
                        return (
                            1 === this.length && 0 === this.words[0] && (this.negative = 0),
                            this
                        )
                    }),
                    (s.prototype.inspect = function () {
                        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>'
                    })
                var d = [
                    '',
                    '0',
                    '00',
                    '000',
                    '0000',
                    '00000',
                    '000000',
                    '0000000',
                    '00000000',
                    '000000000',
                    '0000000000',
                    '00000000000',
                    '000000000000',
                    '0000000000000',
                    '00000000000000',
                    '000000000000000',
                    '0000000000000000',
                    '00000000000000000',
                    '000000000000000000',
                    '0000000000000000000',
                    '00000000000000000000',
                    '000000000000000000000',
                    '0000000000000000000000',
                    '00000000000000000000000',
                    '000000000000000000000000',
                    '0000000000000000000000000',
                ],
                    p = [
                        0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6,
                        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                    ],
                    f = [
                        0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607,
                        16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536,
                        11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101,
                        5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368,
                        20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875,
                        60466176,
                    ]
                function l(e, t, r) {
                    r.negative = t.negative ^ e.negative
                    var i = (e.length + t.length) | 0
                        ; (r.length = i), (i = (i - 1) | 0)
                    var n = 0 | e.words[0],
                        s = 0 | t.words[0],
                        o = n * s,
                        a = 67108863 & o,
                        u = (o / 67108864) | 0
                    r.words[0] = a
                    for (var c = 1; c < i; c++) {
                        for (
                            var d = u >>> 26,
                            p = 67108863 & u,
                            f = Math.min(c, t.length - 1),
                            l = Math.max(0, c - e.length + 1);
                            l <= f;
                            l++
                        ) {
                            var h = (c - l) | 0
                                ; (d +=
                                    ((o = (n = 0 | e.words[h]) * (s = 0 | t.words[l]) + p) /
                                        67108864) |
                                    0),
                                    (p = 67108863 & o)
                        }
                        ; (r.words[c] = 0 | p), (u = 0 | d)
                    }
                    return 0 !== u ? (r.words[c] = 0 | u) : r.length--, r.strip()
                }
                ; (s.prototype.toString = function (e, t) {
                    var r
                    if (((t = 0 | t || 1), 16 === (e = e || 10) || 'hex' === e)) {
                        r = ''
                        for (var n = 0, s = 0, o = 0; o < this.length; o++) {
                            var a = this.words[o],
                                u = (16777215 & ((a << n) | s)).toString(16)
                                ; (r =
                                    0 !== (s = (a >>> (24 - n)) & 16777215) || o !== this.length - 1
                                        ? d[6 - u.length] + u + r
                                        : u + r),
                                    (n += 2) >= 26 && ((n -= 26), o--)
                        }
                        for (0 !== s && (r = s.toString(16) + r); r.length % t != 0;)
                            r = '0' + r
                        return 0 !== this.negative && (r = '-' + r), r
                    }
                    if (e === (0 | e) && e >= 2 && e <= 36) {
                        var c = p[e],
                            l = f[e]
                        r = ''
                        var h = this.clone()
                        for (h.negative = 0; !h.isZero();) {
                            var g = h.modn(l).toString(e)
                            r = (h = h.idivn(l)).isZero() ? g + r : d[c - g.length] + g + r
                        }
                        for (this.isZero() && (r = '0' + r); r.length % t != 0;)
                            r = '0' + r
                        return 0 !== this.negative && (r = '-' + r), r
                    }
                    i(!1, 'Base should be between 2 and 36')
                }),
                    (s.prototype.toNumber = function () {
                        var e = this.words[0]
                        return (
                            2 === this.length
                                ? (e += 67108864 * this.words[1])
                                : 3 === this.length && 1 === this.words[2]
                                    ? (e += 4503599627370496 + 67108864 * this.words[1])
                                    : this.length > 2 &&
                                    i(!1, 'Number can only safely store up to 53 bits'),
                            0 !== this.negative ? -e : e
                        )
                    }),
                    (s.prototype.toJSON = function () {
                        return this.toString(16)
                    }),
                    (s.prototype.toBuffer = function (e, t) {
                        return i(void 0 !== o), this.toArrayLike(o, e, t)
                    }),
                    (s.prototype.toArray = function (e, t) {
                        return this.toArrayLike(Array, e, t)
                    }),
                    (s.prototype.toArrayLike = function (e, t, r) {
                        var n = this.byteLength(),
                            s = r || Math.max(1, n)
                        i(n <= s, 'byte array longer than desired length'),
                            i(s > 0, 'Requested array length <= 0'),
                            this.strip()
                        var o,
                            a,
                            u = 'le' === t,
                            c = new e(s),
                            d = this.clone()
                        if (u) {
                            for (a = 0; !d.isZero(); a++)
                                (o = d.andln(255)), d.iushrn(8), (c[a] = o)
                            for (; a < s; a++) c[a] = 0
                        } else {
                            for (a = 0; a < s - n; a++) c[a] = 0
                            for (a = 0; !d.isZero(); a++)
                                (o = d.andln(255)), d.iushrn(8), (c[s - a - 1] = o)
                        }
                        return c
                    }),
                    Math.clz32
                        ? (s.prototype._countBits = function (e) {
                            return 32 - Math.clz32(e)
                        })
                        : (s.prototype._countBits = function (e) {
                            var t = e,
                                r = 0
                            return (
                                t >= 4096 && ((r += 13), (t >>>= 13)),
                                t >= 64 && ((r += 7), (t >>>= 7)),
                                t >= 8 && ((r += 4), (t >>>= 4)),
                                t >= 2 && ((r += 2), (t >>>= 2)),
                                r + t
                            )
                        }),
                    (s.prototype._zeroBits = function (e) {
                        if (0 === e) return 26
                        var t = e,
                            r = 0
                        return (
                            0 == (8191 & t) && ((r += 13), (t >>>= 13)),
                            0 == (127 & t) && ((r += 7), (t >>>= 7)),
                            0 == (15 & t) && ((r += 4), (t >>>= 4)),
                            0 == (3 & t) && ((r += 2), (t >>>= 2)),
                            0 == (1 & t) && r++,
                            r
                        )
                    }),
                    (s.prototype.bitLength = function () {
                        var e = this.words[this.length - 1],
                            t = this._countBits(e)
                        return 26 * (this.length - 1) + t
                    }),
                    (s.prototype.zeroBits = function () {
                        if (this.isZero()) return 0
                        for (var e = 0, t = 0; t < this.length; t++) {
                            var r = this._zeroBits(this.words[t])
                            if (((e += r), 26 !== r)) break
                        }
                        return e
                    }),
                    (s.prototype.byteLength = function () {
                        return Math.ceil(this.bitLength() / 8)
                    }),
                    (s.prototype.toTwos = function (e) {
                        return 0 !== this.negative
                            ? this.abs().inotn(e).iaddn(1)
                            : this.clone()
                    }),
                    (s.prototype.fromTwos = function (e) {
                        return this.testn(e - 1)
                            ? this.notn(e).iaddn(1).ineg()
                            : this.clone()
                    }),
                    (s.prototype.isNeg = function () {
                        return 0 !== this.negative
                    }),
                    (s.prototype.neg = function () {
                        return this.clone().ineg()
                    }),
                    (s.prototype.ineg = function () {
                        return this.isZero() || (this.negative ^= 1), this
                    }),
                    (s.prototype.iuor = function (e) {
                        for (; this.length < e.length;) this.words[this.length++] = 0
                        for (var t = 0; t < e.length; t++)
                            this.words[t] = this.words[t] | e.words[t]
                        return this.strip()
                    }),
                    (s.prototype.ior = function (e) {
                        return i(0 == (this.negative | e.negative)), this.iuor(e)
                    }),
                    (s.prototype.or = function (e) {
                        return this.length > e.length
                            ? this.clone().ior(e)
                            : e.clone().ior(this)
                    }),
                    (s.prototype.uor = function (e) {
                        return this.length > e.length
                            ? this.clone().iuor(e)
                            : e.clone().iuor(this)
                    }),
                    (s.prototype.iuand = function (e) {
                        var t
                        t = this.length > e.length ? e : this
                        for (var r = 0; r < t.length; r++)
                            this.words[r] = this.words[r] & e.words[r]
                        return (this.length = t.length), this.strip()
                    }),
                    (s.prototype.iand = function (e) {
                        return i(0 == (this.negative | e.negative)), this.iuand(e)
                    }),
                    (s.prototype.and = function (e) {
                        return this.length > e.length
                            ? this.clone().iand(e)
                            : e.clone().iand(this)
                    }),
                    (s.prototype.uand = function (e) {
                        return this.length > e.length
                            ? this.clone().iuand(e)
                            : e.clone().iuand(this)
                    }),
                    (s.prototype.iuxor = function (e) {
                        var t, r
                        this.length > e.length
                            ? ((t = this), (r = e))
                            : ((t = e), (r = this))
                        for (var i = 0; i < r.length; i++)
                            this.words[i] = t.words[i] ^ r.words[i]
                        if (this !== t) for (; i < t.length; i++) this.words[i] = t.words[i]
                        return (this.length = t.length), this.strip()
                    }),
                    (s.prototype.ixor = function (e) {
                        return i(0 == (this.negative | e.negative)), this.iuxor(e)
                    }),
                    (s.prototype.xor = function (e) {
                        return this.length > e.length
                            ? this.clone().ixor(e)
                            : e.clone().ixor(this)
                    }),
                    (s.prototype.uxor = function (e) {
                        return this.length > e.length
                            ? this.clone().iuxor(e)
                            : e.clone().iuxor(this)
                    }),
                    (s.prototype.inotn = function (e) {
                        i('number' == typeof e && e >= 0)
                        var t = 0 | Math.ceil(e / 26),
                            r = e % 26
                        this._expand(t), r > 0 && t--
                        for (var n = 0; n < t; n++)
                            this.words[n] = 67108863 & ~this.words[n]
                        return (
                            r > 0 &&
                            (this.words[n] = ~this.words[n] & (67108863 >> (26 - r))),
                            this.strip()
                        )
                    }),
                    (s.prototype.notn = function (e) {
                        return this.clone().inotn(e)
                    }),
                    (s.prototype.setn = function (e, t) {
                        i('number' == typeof e && e >= 0)
                        var r = (e / 26) | 0,
                            n = e % 26
                        return (
                            this._expand(r + 1),
                            (this.words[r] = t
                                ? this.words[r] | (1 << n)
                                : this.words[r] & ~(1 << n)),
                            this.strip()
                        )
                    }),
                    (s.prototype.iadd = function (e) {
                        var t, r, i
                        if (0 !== this.negative && 0 === e.negative)
                            return (
                                (this.negative = 0),
                                (t = this.isub(e)),
                                (this.negative ^= 1),
                                this._normSign()
                            )
                        if (0 === this.negative && 0 !== e.negative)
                            return (
                                (e.negative = 0),
                                (t = this.isub(e)),
                                (e.negative = 1),
                                t._normSign()
                            )
                        this.length > e.length
                            ? ((r = this), (i = e))
                            : ((r = e), (i = this))
                        for (var n = 0, s = 0; s < i.length; s++)
                            (t = (0 | r.words[s]) + (0 | i.words[s]) + n),
                                (this.words[s] = 67108863 & t),
                                (n = t >>> 26)
                        for (; 0 !== n && s < r.length; s++)
                            (t = (0 | r.words[s]) + n),
                                (this.words[s] = 67108863 & t),
                                (n = t >>> 26)
                        if (((this.length = r.length), 0 !== n))
                            (this.words[this.length] = n), this.length++
                        else if (r !== this)
                            for (; s < r.length; s++) this.words[s] = r.words[s]
                        return this
                    }),
                    (s.prototype.add = function (e) {
                        var t
                        return 0 !== e.negative && 0 === this.negative
                            ? ((e.negative = 0), (t = this.sub(e)), (e.negative ^= 1), t)
                            : 0 === e.negative && 0 !== this.negative
                                ? ((this.negative = 0), (t = e.sub(this)), (this.negative = 1), t)
                                : this.length > e.length
                                    ? this.clone().iadd(e)
                                    : e.clone().iadd(this)
                    }),
                    (s.prototype.isub = function (e) {
                        if (0 !== e.negative) {
                            e.negative = 0
                            var t = this.iadd(e)
                            return (e.negative = 1), t._normSign()
                        }
                        if (0 !== this.negative)
                            return (
                                (this.negative = 0),
                                this.iadd(e),
                                (this.negative = 1),
                                this._normSign()
                            )
                        var r,
                            i,
                            n = this.cmp(e)
                        if (0 === n)
                            return (
                                (this.negative = 0),
                                (this.length = 1),
                                (this.words[0] = 0),
                                this
                            )
                        n > 0 ? ((r = this), (i = e)) : ((r = e), (i = this))
                        for (var s = 0, o = 0; o < i.length; o++)
                            (s = (t = (0 | r.words[o]) - (0 | i.words[o]) + s) >> 26),
                                (this.words[o] = 67108863 & t)
                        for (; 0 !== s && o < r.length; o++)
                            (s = (t = (0 | r.words[o]) + s) >> 26),
                                (this.words[o] = 67108863 & t)
                        if (0 === s && o < r.length && r !== this)
                            for (; o < r.length; o++) this.words[o] = r.words[o]
                        return (
                            (this.length = Math.max(this.length, o)),
                            r !== this && (this.negative = 1),
                            this.strip()
                        )
                    }),
                    (s.prototype.sub = function (e) {
                        return this.clone().isub(e)
                    })
                var h = function (e, t, r) {
                    var i,
                        n,
                        s,
                        o = e.words,
                        a = t.words,
                        u = r.words,
                        c = 0,
                        d = 0 | o[0],
                        p = 8191 & d,
                        f = d >>> 13,
                        l = 0 | o[1],
                        h = 8191 & l,
                        g = l >>> 13,
                        y = 0 | o[2],
                        m = 8191 & y,
                        v = y >>> 13,
                        b = 0 | o[3],
                        w = 8191 & b,
                        E = b >>> 13,
                        I = 0 | o[4],
                        C = 8191 & I,
                        S = I >>> 13,
                        A = 0 | o[5],
                        T = 8191 & A,
                        N = A >>> 13,
                        _ = 0 | o[6],
                        B = 8191 & _,
                        k = _ >>> 13,
                        R = 0 | o[7],
                        L = 8191 & R,
                        M = R >>> 13,
                        x = 0 | o[8],
                        D = 8191 & x,
                        P = x >>> 13,
                        U = 0 | o[9],
                        O = 8191 & U,
                        V = U >>> 13,
                        K = 0 | a[0],
                        z = 8191 & K,
                        F = K >>> 13,
                        q = 0 | a[1],
                        $ = 8191 & q,
                        j = q >>> 13,
                        H = 0 | a[2],
                        G = 8191 & H,
                        W = H >>> 13,
                        Q = 0 | a[3],
                        Z = 8191 & Q,
                        X = Q >>> 13,
                        Y = 0 | a[4],
                        J = 8191 & Y,
                        ee = Y >>> 13,
                        te = 0 | a[5],
                        re = 8191 & te,
                        ie = te >>> 13,
                        ne = 0 | a[6],
                        se = 8191 & ne,
                        oe = ne >>> 13,
                        ae = 0 | a[7],
                        ue = 8191 & ae,
                        ce = ae >>> 13,
                        de = 0 | a[8],
                        pe = 8191 & de,
                        fe = de >>> 13,
                        le = 0 | a[9],
                        he = 8191 & le,
                        ge = le >>> 13
                        ; (r.negative = e.negative ^ t.negative), (r.length = 19)
                    var ye =
                        (((c + (i = Math.imul(p, z))) | 0) +
                            ((8191 & (n = ((n = Math.imul(p, F)) + Math.imul(f, z)) | 0)) <<
                                13)) |
                        0
                        ; (c = ((((s = Math.imul(f, F)) + (n >>> 13)) | 0) + (ye >>> 26)) | 0),
                            (ye &= 67108863),
                            (i = Math.imul(h, z)),
                            (n = ((n = Math.imul(h, F)) + Math.imul(g, z)) | 0),
                            (s = Math.imul(g, F))
                    var me =
                        (((c + (i = (i + Math.imul(p, $)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, j)) | 0) + Math.imul(f, $)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, j)) | 0) + (n >>> 13)) | 0) +
                                (me >>> 26)) |
                            0),
                            (me &= 67108863),
                            (i = Math.imul(m, z)),
                            (n = ((n = Math.imul(m, F)) + Math.imul(v, z)) | 0),
                            (s = Math.imul(v, F)),
                            (i = (i + Math.imul(h, $)) | 0),
                            (n = ((n = (n + Math.imul(h, j)) | 0) + Math.imul(g, $)) | 0),
                            (s = (s + Math.imul(g, j)) | 0)
                    var ve =
                        (((c + (i = (i + Math.imul(p, G)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, W)) | 0) + Math.imul(f, G)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, W)) | 0) + (n >>> 13)) | 0) +
                                (ve >>> 26)) |
                            0),
                            (ve &= 67108863),
                            (i = Math.imul(w, z)),
                            (n = ((n = Math.imul(w, F)) + Math.imul(E, z)) | 0),
                            (s = Math.imul(E, F)),
                            (i = (i + Math.imul(m, $)) | 0),
                            (n = ((n = (n + Math.imul(m, j)) | 0) + Math.imul(v, $)) | 0),
                            (s = (s + Math.imul(v, j)) | 0),
                            (i = (i + Math.imul(h, G)) | 0),
                            (n = ((n = (n + Math.imul(h, W)) | 0) + Math.imul(g, G)) | 0),
                            (s = (s + Math.imul(g, W)) | 0)
                    var be =
                        (((c + (i = (i + Math.imul(p, Z)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, X)) | 0) + Math.imul(f, Z)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, X)) | 0) + (n >>> 13)) | 0) +
                                (be >>> 26)) |
                            0),
                            (be &= 67108863),
                            (i = Math.imul(C, z)),
                            (n = ((n = Math.imul(C, F)) + Math.imul(S, z)) | 0),
                            (s = Math.imul(S, F)),
                            (i = (i + Math.imul(w, $)) | 0),
                            (n = ((n = (n + Math.imul(w, j)) | 0) + Math.imul(E, $)) | 0),
                            (s = (s + Math.imul(E, j)) | 0),
                            (i = (i + Math.imul(m, G)) | 0),
                            (n = ((n = (n + Math.imul(m, W)) | 0) + Math.imul(v, G)) | 0),
                            (s = (s + Math.imul(v, W)) | 0),
                            (i = (i + Math.imul(h, Z)) | 0),
                            (n = ((n = (n + Math.imul(h, X)) | 0) + Math.imul(g, Z)) | 0),
                            (s = (s + Math.imul(g, X)) | 0)
                    var we =
                        (((c + (i = (i + Math.imul(p, J)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, ee)) | 0) + Math.imul(f, J)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, ee)) | 0) + (n >>> 13)) | 0) +
                                (we >>> 26)) |
                            0),
                            (we &= 67108863),
                            (i = Math.imul(T, z)),
                            (n = ((n = Math.imul(T, F)) + Math.imul(N, z)) | 0),
                            (s = Math.imul(N, F)),
                            (i = (i + Math.imul(C, $)) | 0),
                            (n = ((n = (n + Math.imul(C, j)) | 0) + Math.imul(S, $)) | 0),
                            (s = (s + Math.imul(S, j)) | 0),
                            (i = (i + Math.imul(w, G)) | 0),
                            (n = ((n = (n + Math.imul(w, W)) | 0) + Math.imul(E, G)) | 0),
                            (s = (s + Math.imul(E, W)) | 0),
                            (i = (i + Math.imul(m, Z)) | 0),
                            (n = ((n = (n + Math.imul(m, X)) | 0) + Math.imul(v, Z)) | 0),
                            (s = (s + Math.imul(v, X)) | 0),
                            (i = (i + Math.imul(h, J)) | 0),
                            (n = ((n = (n + Math.imul(h, ee)) | 0) + Math.imul(g, J)) | 0),
                            (s = (s + Math.imul(g, ee)) | 0)
                    var Ee =
                        (((c + (i = (i + Math.imul(p, re)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, ie)) | 0) + Math.imul(f, re)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, ie)) | 0) + (n >>> 13)) | 0) +
                                (Ee >>> 26)) |
                            0),
                            (Ee &= 67108863),
                            (i = Math.imul(B, z)),
                            (n = ((n = Math.imul(B, F)) + Math.imul(k, z)) | 0),
                            (s = Math.imul(k, F)),
                            (i = (i + Math.imul(T, $)) | 0),
                            (n = ((n = (n + Math.imul(T, j)) | 0) + Math.imul(N, $)) | 0),
                            (s = (s + Math.imul(N, j)) | 0),
                            (i = (i + Math.imul(C, G)) | 0),
                            (n = ((n = (n + Math.imul(C, W)) | 0) + Math.imul(S, G)) | 0),
                            (s = (s + Math.imul(S, W)) | 0),
                            (i = (i + Math.imul(w, Z)) | 0),
                            (n = ((n = (n + Math.imul(w, X)) | 0) + Math.imul(E, Z)) | 0),
                            (s = (s + Math.imul(E, X)) | 0),
                            (i = (i + Math.imul(m, J)) | 0),
                            (n = ((n = (n + Math.imul(m, ee)) | 0) + Math.imul(v, J)) | 0),
                            (s = (s + Math.imul(v, ee)) | 0),
                            (i = (i + Math.imul(h, re)) | 0),
                            (n = ((n = (n + Math.imul(h, ie)) | 0) + Math.imul(g, re)) | 0),
                            (s = (s + Math.imul(g, ie)) | 0)
                    var Ie =
                        (((c + (i = (i + Math.imul(p, se)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, oe)) | 0) + Math.imul(f, se)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, oe)) | 0) + (n >>> 13)) | 0) +
                                (Ie >>> 26)) |
                            0),
                            (Ie &= 67108863),
                            (i = Math.imul(L, z)),
                            (n = ((n = Math.imul(L, F)) + Math.imul(M, z)) | 0),
                            (s = Math.imul(M, F)),
                            (i = (i + Math.imul(B, $)) | 0),
                            (n = ((n = (n + Math.imul(B, j)) | 0) + Math.imul(k, $)) | 0),
                            (s = (s + Math.imul(k, j)) | 0),
                            (i = (i + Math.imul(T, G)) | 0),
                            (n = ((n = (n + Math.imul(T, W)) | 0) + Math.imul(N, G)) | 0),
                            (s = (s + Math.imul(N, W)) | 0),
                            (i = (i + Math.imul(C, Z)) | 0),
                            (n = ((n = (n + Math.imul(C, X)) | 0) + Math.imul(S, Z)) | 0),
                            (s = (s + Math.imul(S, X)) | 0),
                            (i = (i + Math.imul(w, J)) | 0),
                            (n = ((n = (n + Math.imul(w, ee)) | 0) + Math.imul(E, J)) | 0),
                            (s = (s + Math.imul(E, ee)) | 0),
                            (i = (i + Math.imul(m, re)) | 0),
                            (n = ((n = (n + Math.imul(m, ie)) | 0) + Math.imul(v, re)) | 0),
                            (s = (s + Math.imul(v, ie)) | 0),
                            (i = (i + Math.imul(h, se)) | 0),
                            (n = ((n = (n + Math.imul(h, oe)) | 0) + Math.imul(g, se)) | 0),
                            (s = (s + Math.imul(g, oe)) | 0)
                    var Ce =
                        (((c + (i = (i + Math.imul(p, ue)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, ce)) | 0) + Math.imul(f, ue)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, ce)) | 0) + (n >>> 13)) | 0) +
                                (Ce >>> 26)) |
                            0),
                            (Ce &= 67108863),
                            (i = Math.imul(D, z)),
                            (n = ((n = Math.imul(D, F)) + Math.imul(P, z)) | 0),
                            (s = Math.imul(P, F)),
                            (i = (i + Math.imul(L, $)) | 0),
                            (n = ((n = (n + Math.imul(L, j)) | 0) + Math.imul(M, $)) | 0),
                            (s = (s + Math.imul(M, j)) | 0),
                            (i = (i + Math.imul(B, G)) | 0),
                            (n = ((n = (n + Math.imul(B, W)) | 0) + Math.imul(k, G)) | 0),
                            (s = (s + Math.imul(k, W)) | 0),
                            (i = (i + Math.imul(T, Z)) | 0),
                            (n = ((n = (n + Math.imul(T, X)) | 0) + Math.imul(N, Z)) | 0),
                            (s = (s + Math.imul(N, X)) | 0),
                            (i = (i + Math.imul(C, J)) | 0),
                            (n = ((n = (n + Math.imul(C, ee)) | 0) + Math.imul(S, J)) | 0),
                            (s = (s + Math.imul(S, ee)) | 0),
                            (i = (i + Math.imul(w, re)) | 0),
                            (n = ((n = (n + Math.imul(w, ie)) | 0) + Math.imul(E, re)) | 0),
                            (s = (s + Math.imul(E, ie)) | 0),
                            (i = (i + Math.imul(m, se)) | 0),
                            (n = ((n = (n + Math.imul(m, oe)) | 0) + Math.imul(v, se)) | 0),
                            (s = (s + Math.imul(v, oe)) | 0),
                            (i = (i + Math.imul(h, ue)) | 0),
                            (n = ((n = (n + Math.imul(h, ce)) | 0) + Math.imul(g, ue)) | 0),
                            (s = (s + Math.imul(g, ce)) | 0)
                    var Se =
                        (((c + (i = (i + Math.imul(p, pe)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, fe)) | 0) + Math.imul(f, pe)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, fe)) | 0) + (n >>> 13)) | 0) +
                                (Se >>> 26)) |
                            0),
                            (Se &= 67108863),
                            (i = Math.imul(O, z)),
                            (n = ((n = Math.imul(O, F)) + Math.imul(V, z)) | 0),
                            (s = Math.imul(V, F)),
                            (i = (i + Math.imul(D, $)) | 0),
                            (n = ((n = (n + Math.imul(D, j)) | 0) + Math.imul(P, $)) | 0),
                            (s = (s + Math.imul(P, j)) | 0),
                            (i = (i + Math.imul(L, G)) | 0),
                            (n = ((n = (n + Math.imul(L, W)) | 0) + Math.imul(M, G)) | 0),
                            (s = (s + Math.imul(M, W)) | 0),
                            (i = (i + Math.imul(B, Z)) | 0),
                            (n = ((n = (n + Math.imul(B, X)) | 0) + Math.imul(k, Z)) | 0),
                            (s = (s + Math.imul(k, X)) | 0),
                            (i = (i + Math.imul(T, J)) | 0),
                            (n = ((n = (n + Math.imul(T, ee)) | 0) + Math.imul(N, J)) | 0),
                            (s = (s + Math.imul(N, ee)) | 0),
                            (i = (i + Math.imul(C, re)) | 0),
                            (n = ((n = (n + Math.imul(C, ie)) | 0) + Math.imul(S, re)) | 0),
                            (s = (s + Math.imul(S, ie)) | 0),
                            (i = (i + Math.imul(w, se)) | 0),
                            (n = ((n = (n + Math.imul(w, oe)) | 0) + Math.imul(E, se)) | 0),
                            (s = (s + Math.imul(E, oe)) | 0),
                            (i = (i + Math.imul(m, ue)) | 0),
                            (n = ((n = (n + Math.imul(m, ce)) | 0) + Math.imul(v, ue)) | 0),
                            (s = (s + Math.imul(v, ce)) | 0),
                            (i = (i + Math.imul(h, pe)) | 0),
                            (n = ((n = (n + Math.imul(h, fe)) | 0) + Math.imul(g, pe)) | 0),
                            (s = (s + Math.imul(g, fe)) | 0)
                    var Ae =
                        (((c + (i = (i + Math.imul(p, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(p, ge)) | 0) + Math.imul(f, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(f, ge)) | 0) + (n >>> 13)) | 0) +
                                (Ae >>> 26)) |
                            0),
                            (Ae &= 67108863),
                            (i = Math.imul(O, $)),
                            (n = ((n = Math.imul(O, j)) + Math.imul(V, $)) | 0),
                            (s = Math.imul(V, j)),
                            (i = (i + Math.imul(D, G)) | 0),
                            (n = ((n = (n + Math.imul(D, W)) | 0) + Math.imul(P, G)) | 0),
                            (s = (s + Math.imul(P, W)) | 0),
                            (i = (i + Math.imul(L, Z)) | 0),
                            (n = ((n = (n + Math.imul(L, X)) | 0) + Math.imul(M, Z)) | 0),
                            (s = (s + Math.imul(M, X)) | 0),
                            (i = (i + Math.imul(B, J)) | 0),
                            (n = ((n = (n + Math.imul(B, ee)) | 0) + Math.imul(k, J)) | 0),
                            (s = (s + Math.imul(k, ee)) | 0),
                            (i = (i + Math.imul(T, re)) | 0),
                            (n = ((n = (n + Math.imul(T, ie)) | 0) + Math.imul(N, re)) | 0),
                            (s = (s + Math.imul(N, ie)) | 0),
                            (i = (i + Math.imul(C, se)) | 0),
                            (n = ((n = (n + Math.imul(C, oe)) | 0) + Math.imul(S, se)) | 0),
                            (s = (s + Math.imul(S, oe)) | 0),
                            (i = (i + Math.imul(w, ue)) | 0),
                            (n = ((n = (n + Math.imul(w, ce)) | 0) + Math.imul(E, ue)) | 0),
                            (s = (s + Math.imul(E, ce)) | 0),
                            (i = (i + Math.imul(m, pe)) | 0),
                            (n = ((n = (n + Math.imul(m, fe)) | 0) + Math.imul(v, pe)) | 0),
                            (s = (s + Math.imul(v, fe)) | 0)
                    var Te =
                        (((c + (i = (i + Math.imul(h, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(h, ge)) | 0) + Math.imul(g, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(g, ge)) | 0) + (n >>> 13)) | 0) +
                                (Te >>> 26)) |
                            0),
                            (Te &= 67108863),
                            (i = Math.imul(O, G)),
                            (n = ((n = Math.imul(O, W)) + Math.imul(V, G)) | 0),
                            (s = Math.imul(V, W)),
                            (i = (i + Math.imul(D, Z)) | 0),
                            (n = ((n = (n + Math.imul(D, X)) | 0) + Math.imul(P, Z)) | 0),
                            (s = (s + Math.imul(P, X)) | 0),
                            (i = (i + Math.imul(L, J)) | 0),
                            (n = ((n = (n + Math.imul(L, ee)) | 0) + Math.imul(M, J)) | 0),
                            (s = (s + Math.imul(M, ee)) | 0),
                            (i = (i + Math.imul(B, re)) | 0),
                            (n = ((n = (n + Math.imul(B, ie)) | 0) + Math.imul(k, re)) | 0),
                            (s = (s + Math.imul(k, ie)) | 0),
                            (i = (i + Math.imul(T, se)) | 0),
                            (n = ((n = (n + Math.imul(T, oe)) | 0) + Math.imul(N, se)) | 0),
                            (s = (s + Math.imul(N, oe)) | 0),
                            (i = (i + Math.imul(C, ue)) | 0),
                            (n = ((n = (n + Math.imul(C, ce)) | 0) + Math.imul(S, ue)) | 0),
                            (s = (s + Math.imul(S, ce)) | 0),
                            (i = (i + Math.imul(w, pe)) | 0),
                            (n = ((n = (n + Math.imul(w, fe)) | 0) + Math.imul(E, pe)) | 0),
                            (s = (s + Math.imul(E, fe)) | 0)
                    var Ne =
                        (((c + (i = (i + Math.imul(m, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(m, ge)) | 0) + Math.imul(v, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(v, ge)) | 0) + (n >>> 13)) | 0) +
                                (Ne >>> 26)) |
                            0),
                            (Ne &= 67108863),
                            (i = Math.imul(O, Z)),
                            (n = ((n = Math.imul(O, X)) + Math.imul(V, Z)) | 0),
                            (s = Math.imul(V, X)),
                            (i = (i + Math.imul(D, J)) | 0),
                            (n = ((n = (n + Math.imul(D, ee)) | 0) + Math.imul(P, J)) | 0),
                            (s = (s + Math.imul(P, ee)) | 0),
                            (i = (i + Math.imul(L, re)) | 0),
                            (n = ((n = (n + Math.imul(L, ie)) | 0) + Math.imul(M, re)) | 0),
                            (s = (s + Math.imul(M, ie)) | 0),
                            (i = (i + Math.imul(B, se)) | 0),
                            (n = ((n = (n + Math.imul(B, oe)) | 0) + Math.imul(k, se)) | 0),
                            (s = (s + Math.imul(k, oe)) | 0),
                            (i = (i + Math.imul(T, ue)) | 0),
                            (n = ((n = (n + Math.imul(T, ce)) | 0) + Math.imul(N, ue)) | 0),
                            (s = (s + Math.imul(N, ce)) | 0),
                            (i = (i + Math.imul(C, pe)) | 0),
                            (n = ((n = (n + Math.imul(C, fe)) | 0) + Math.imul(S, pe)) | 0),
                            (s = (s + Math.imul(S, fe)) | 0)
                    var _e =
                        (((c + (i = (i + Math.imul(w, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(w, ge)) | 0) + Math.imul(E, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(E, ge)) | 0) + (n >>> 13)) | 0) +
                                (_e >>> 26)) |
                            0),
                            (_e &= 67108863),
                            (i = Math.imul(O, J)),
                            (n = ((n = Math.imul(O, ee)) + Math.imul(V, J)) | 0),
                            (s = Math.imul(V, ee)),
                            (i = (i + Math.imul(D, re)) | 0),
                            (n = ((n = (n + Math.imul(D, ie)) | 0) + Math.imul(P, re)) | 0),
                            (s = (s + Math.imul(P, ie)) | 0),
                            (i = (i + Math.imul(L, se)) | 0),
                            (n = ((n = (n + Math.imul(L, oe)) | 0) + Math.imul(M, se)) | 0),
                            (s = (s + Math.imul(M, oe)) | 0),
                            (i = (i + Math.imul(B, ue)) | 0),
                            (n = ((n = (n + Math.imul(B, ce)) | 0) + Math.imul(k, ue)) | 0),
                            (s = (s + Math.imul(k, ce)) | 0),
                            (i = (i + Math.imul(T, pe)) | 0),
                            (n = ((n = (n + Math.imul(T, fe)) | 0) + Math.imul(N, pe)) | 0),
                            (s = (s + Math.imul(N, fe)) | 0)
                    var Be =
                        (((c + (i = (i + Math.imul(C, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(C, ge)) | 0) + Math.imul(S, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(S, ge)) | 0) + (n >>> 13)) | 0) +
                                (Be >>> 26)) |
                            0),
                            (Be &= 67108863),
                            (i = Math.imul(O, re)),
                            (n = ((n = Math.imul(O, ie)) + Math.imul(V, re)) | 0),
                            (s = Math.imul(V, ie)),
                            (i = (i + Math.imul(D, se)) | 0),
                            (n = ((n = (n + Math.imul(D, oe)) | 0) + Math.imul(P, se)) | 0),
                            (s = (s + Math.imul(P, oe)) | 0),
                            (i = (i + Math.imul(L, ue)) | 0),
                            (n = ((n = (n + Math.imul(L, ce)) | 0) + Math.imul(M, ue)) | 0),
                            (s = (s + Math.imul(M, ce)) | 0),
                            (i = (i + Math.imul(B, pe)) | 0),
                            (n = ((n = (n + Math.imul(B, fe)) | 0) + Math.imul(k, pe)) | 0),
                            (s = (s + Math.imul(k, fe)) | 0)
                    var ke =
                        (((c + (i = (i + Math.imul(T, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(T, ge)) | 0) + Math.imul(N, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(N, ge)) | 0) + (n >>> 13)) | 0) +
                                (ke >>> 26)) |
                            0),
                            (ke &= 67108863),
                            (i = Math.imul(O, se)),
                            (n = ((n = Math.imul(O, oe)) + Math.imul(V, se)) | 0),
                            (s = Math.imul(V, oe)),
                            (i = (i + Math.imul(D, ue)) | 0),
                            (n = ((n = (n + Math.imul(D, ce)) | 0) + Math.imul(P, ue)) | 0),
                            (s = (s + Math.imul(P, ce)) | 0),
                            (i = (i + Math.imul(L, pe)) | 0),
                            (n = ((n = (n + Math.imul(L, fe)) | 0) + Math.imul(M, pe)) | 0),
                            (s = (s + Math.imul(M, fe)) | 0)
                    var Re =
                        (((c + (i = (i + Math.imul(B, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(B, ge)) | 0) + Math.imul(k, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(k, ge)) | 0) + (n >>> 13)) | 0) +
                                (Re >>> 26)) |
                            0),
                            (Re &= 67108863),
                            (i = Math.imul(O, ue)),
                            (n = ((n = Math.imul(O, ce)) + Math.imul(V, ue)) | 0),
                            (s = Math.imul(V, ce)),
                            (i = (i + Math.imul(D, pe)) | 0),
                            (n = ((n = (n + Math.imul(D, fe)) | 0) + Math.imul(P, pe)) | 0),
                            (s = (s + Math.imul(P, fe)) | 0)
                    var Le =
                        (((c + (i = (i + Math.imul(L, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(L, ge)) | 0) + Math.imul(M, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(M, ge)) | 0) + (n >>> 13)) | 0) +
                                (Le >>> 26)) |
                            0),
                            (Le &= 67108863),
                            (i = Math.imul(O, pe)),
                            (n = ((n = Math.imul(O, fe)) + Math.imul(V, pe)) | 0),
                            (s = Math.imul(V, fe))
                    var Me =
                        (((c + (i = (i + Math.imul(D, he)) | 0)) | 0) +
                            ((8191 &
                                (n =
                                    ((n = (n + Math.imul(D, ge)) | 0) + Math.imul(P, he)) | 0)) <<
                                13)) |
                        0
                        ; (c =
                            ((((s = (s + Math.imul(P, ge)) | 0) + (n >>> 13)) | 0) +
                                (Me >>> 26)) |
                            0),
                            (Me &= 67108863)
                    var xe =
                        (((c + (i = Math.imul(O, he))) | 0) +
                            ((8191 & (n = ((n = Math.imul(O, ge)) + Math.imul(V, he)) | 0)) <<
                                13)) |
                        0
                    return (
                        (c =
                            ((((s = Math.imul(V, ge)) + (n >>> 13)) | 0) + (xe >>> 26)) | 0),
                        (xe &= 67108863),
                        (u[0] = ye),
                        (u[1] = me),
                        (u[2] = ve),
                        (u[3] = be),
                        (u[4] = we),
                        (u[5] = Ee),
                        (u[6] = Ie),
                        (u[7] = Ce),
                        (u[8] = Se),
                        (u[9] = Ae),
                        (u[10] = Te),
                        (u[11] = Ne),
                        (u[12] = _e),
                        (u[13] = Be),
                        (u[14] = ke),
                        (u[15] = Re),
                        (u[16] = Le),
                        (u[17] = Me),
                        (u[18] = xe),
                        0 !== c && ((u[19] = c), r.length++),
                        r
                    )
                }
                function g(e, t, r) {
                    return new y().mulp(e, t, r)
                }
                function y(e, t) {
                    ; (this.x = e), (this.y = t)
                }
                Math.imul || (h = l),
                    (s.prototype.mulTo = function (e, t) {
                        var r,
                            i = this.length + e.length
                        return (
                            (r =
                                10 === this.length && 10 === e.length
                                    ? h(this, e, t)
                                    : i < 63
                                        ? l(this, e, t)
                                        : i < 1024
                                            ? (function (e, t, r) {
                                                ; (r.negative = t.negative ^ e.negative),
                                                    (r.length = e.length + t.length)
                                                for (var i = 0, n = 0, s = 0; s < r.length - 1; s++) {
                                                    var o = n
                                                    n = 0
                                                    for (
                                                        var a = 67108863 & i,
                                                        u = Math.min(s, t.length - 1),
                                                        c = Math.max(0, s - e.length + 1);
                                                        c <= u;
                                                        c++
                                                    ) {
                                                        var d = s - c,
                                                            p = (0 | e.words[d]) * (0 | t.words[c]),
                                                            f = 67108863 & p
                                                            ; (a = 67108863 & (f = (f + a) | 0)),
                                                                (n +=
                                                                    (o =
                                                                        ((o = (o + ((p / 67108864) | 0)) | 0) +
                                                                            (f >>> 26)) |
                                                                        0) >>> 26),
                                                                (o &= 67108863)
                                                    }
                                                    ; (r.words[s] = a), (i = o), (o = n)
                                                }
                                                return 0 !== i ? (r.words[s] = i) : r.length--, r.strip()
                                            })(this, e, t)
                                            : g(this, e, t)),
                            r
                        )
                    }),
                    (y.prototype.makeRBT = function (e) {
                        for (
                            var t = new Array(e), r = s.prototype._countBits(e) - 1, i = 0;
                            i < e;
                            i++
                        )
                            t[i] = this.revBin(i, r, e)
                        return t
                    }),
                    (y.prototype.revBin = function (e, t, r) {
                        if (0 === e || e === r - 1) return e
                        for (var i = 0, n = 0; n < t; n++)
                            (i |= (1 & e) << (t - n - 1)), (e >>= 1)
                        return i
                    }),
                    (y.prototype.permute = function (e, t, r, i, n, s) {
                        for (var o = 0; o < s; o++) (i[o] = t[e[o]]), (n[o] = r[e[o]])
                    }),
                    (y.prototype.transform = function (e, t, r, i, n, s) {
                        this.permute(s, e, t, r, i, n)
                        for (var o = 1; o < n; o <<= 1)
                            for (
                                var a = o << 1,
                                u = Math.cos((2 * Math.PI) / a),
                                c = Math.sin((2 * Math.PI) / a),
                                d = 0;
                                d < n;
                                d += a
                            )
                                for (var p = u, f = c, l = 0; l < o; l++) {
                                    var h = r[d + l],
                                        g = i[d + l],
                                        y = r[d + l + o],
                                        m = i[d + l + o],
                                        v = p * y - f * m
                                        ; (m = p * m + f * y),
                                            (y = v),
                                            (r[d + l] = h + y),
                                            (i[d + l] = g + m),
                                            (r[d + l + o] = h - y),
                                            (i[d + l + o] = g - m),
                                            l !== a &&
                                            ((v = u * p - c * f), (f = u * f + c * p), (p = v))
                                }
                    }),
                    (y.prototype.guessLen13b = function (e, t) {
                        var r = 1 | Math.max(t, e),
                            i = 1 & r,
                            n = 0
                        for (r = (r / 2) | 0; r; r >>>= 1) n++
                        return 1 << (n + 1 + i)
                    }),
                    (y.prototype.conjugate = function (e, t, r) {
                        if (!(r <= 1))
                            for (var i = 0; i < r / 2; i++) {
                                var n = e[i]
                                    ; (e[i] = e[r - i - 1]),
                                        (e[r - i - 1] = n),
                                        (n = t[i]),
                                        (t[i] = -t[r - i - 1]),
                                        (t[r - i - 1] = -n)
                            }
                    }),
                    (y.prototype.normalize13b = function (e, t) {
                        for (var r = 0, i = 0; i < t / 2; i++) {
                            var n =
                                8192 * Math.round(e[2 * i + 1] / t) +
                                Math.round(e[2 * i] / t) +
                                r
                                ; (e[i] = 67108863 & n),
                                    (r = n < 67108864 ? 0 : (n / 67108864) | 0)
                        }
                        return e
                    }),
                    (y.prototype.convert13b = function (e, t, r, n) {
                        for (var s = 0, o = 0; o < t; o++)
                            (s += 0 | e[o]),
                                (r[2 * o] = 8191 & s),
                                (s >>>= 13),
                                (r[2 * o + 1] = 8191 & s),
                                (s >>>= 13)
                        for (o = 2 * t; o < n; ++o) r[o] = 0
                        i(0 === s), i(0 == (-8192 & s))
                    }),
                    (y.prototype.stub = function (e) {
                        for (var t = new Array(e), r = 0; r < e; r++) t[r] = 0
                        return t
                    }),
                    (y.prototype.mulp = function (e, t, r) {
                        var i = 2 * this.guessLen13b(e.length, t.length),
                            n = this.makeRBT(i),
                            s = this.stub(i),
                            o = new Array(i),
                            a = new Array(i),
                            u = new Array(i),
                            c = new Array(i),
                            d = new Array(i),
                            p = new Array(i),
                            f = r.words
                            ; (f.length = i),
                                this.convert13b(e.words, e.length, o, i),
                                this.convert13b(t.words, t.length, c, i),
                                this.transform(o, s, a, u, i, n),
                                this.transform(c, s, d, p, i, n)
                        for (var l = 0; l < i; l++) {
                            var h = a[l] * d[l] - u[l] * p[l]
                                ; (u[l] = a[l] * p[l] + u[l] * d[l]), (a[l] = h)
                        }
                        return (
                            this.conjugate(a, u, i),
                            this.transform(a, u, f, s, i, n),
                            this.conjugate(f, s, i),
                            this.normalize13b(f, i),
                            (r.negative = e.negative ^ t.negative),
                            (r.length = e.length + t.length),
                            r.strip()
                        )
                    }),
                    (s.prototype.mul = function (e) {
                        var t = new s(null)
                        return (
                            (t.words = new Array(this.length + e.length)), this.mulTo(e, t)
                        )
                    }),
                    (s.prototype.mulf = function (e) {
                        var t = new s(null)
                        return (t.words = new Array(this.length + e.length)), g(this, e, t)
                    }),
                    (s.prototype.imul = function (e) {
                        return this.clone().mulTo(e, this)
                    }),
                    (s.prototype.imuln = function (e) {
                        i('number' == typeof e), i(e < 67108864)
                        for (var t = 0, r = 0; r < this.length; r++) {
                            var n = (0 | this.words[r]) * e,
                                s = (67108863 & n) + (67108863 & t)
                                ; (t >>= 26),
                                    (t += (n / 67108864) | 0),
                                    (t += s >>> 26),
                                    (this.words[r] = 67108863 & s)
                        }
                        return 0 !== t && ((this.words[r] = t), this.length++), this
                    }),
                    (s.prototype.muln = function (e) {
                        return this.clone().imuln(e)
                    }),
                    (s.prototype.sqr = function () {
                        return this.mul(this)
                    }),
                    (s.prototype.isqr = function () {
                        return this.imul(this.clone())
                    }),
                    (s.prototype.pow = function (e) {
                        var t = (function (e) {
                            for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                                var i = (r / 26) | 0,
                                    n = r % 26
                                t[r] = (e.words[i] & (1 << n)) >>> n
                            }
                            return t
                        })(e)
                        if (0 === t.length) return new s(1)
                        for (
                            var r = this, i = 0;
                            i < t.length && 0 === t[i];
                            i++, r = r.sqr()
                        );
                        if (++i < t.length)
                            for (var n = r.sqr(); i < t.length; i++, n = n.sqr())
                                0 !== t[i] && (r = r.mul(n))
                        return r
                    }),
                    (s.prototype.iushln = function (e) {
                        i('number' == typeof e && e >= 0)
                        var t,
                            r = e % 26,
                            n = (e - r) / 26,
                            s = (67108863 >>> (26 - r)) << (26 - r)
                        if (0 !== r) {
                            var o = 0
                            for (t = 0; t < this.length; t++) {
                                var a = this.words[t] & s,
                                    u = ((0 | this.words[t]) - a) << r
                                    ; (this.words[t] = u | o), (o = a >>> (26 - r))
                            }
                            o && ((this.words[t] = o), this.length++)
                        }
                        if (0 !== n) {
                            for (t = this.length - 1; t >= 0; t--)
                                this.words[t + n] = this.words[t]
                            for (t = 0; t < n; t++) this.words[t] = 0
                            this.length += n
                        }
                        return this.strip()
                    }),
                    (s.prototype.ishln = function (e) {
                        return i(0 === this.negative), this.iushln(e)
                    }),
                    (s.prototype.iushrn = function (e, t, r) {
                        var n
                        i('number' == typeof e && e >= 0), (n = t ? (t - (t % 26)) / 26 : 0)
                        var s = e % 26,
                            o = Math.min((e - s) / 26, this.length),
                            a = 67108863 ^ ((67108863 >>> s) << s),
                            u = r
                        if (((n -= o), (n = Math.max(0, n)), u)) {
                            for (var c = 0; c < o; c++) u.words[c] = this.words[c]
                            u.length = o
                        }
                        if (0 === o);
                        else if (this.length > o)
                            for (this.length -= o, c = 0; c < this.length; c++)
                                this.words[c] = this.words[c + o]
                        else (this.words[0] = 0), (this.length = 1)
                        var d = 0
                        for (c = this.length - 1; c >= 0 && (0 !== d || c >= n); c--) {
                            var p = 0 | this.words[c]
                                ; (this.words[c] = (d << (26 - s)) | (p >>> s)), (d = p & a)
                        }
                        return (
                            u && 0 !== d && (u.words[u.length++] = d),
                            0 === this.length && ((this.words[0] = 0), (this.length = 1)),
                            this.strip()
                        )
                    }),
                    (s.prototype.ishrn = function (e, t, r) {
                        return i(0 === this.negative), this.iushrn(e, t, r)
                    }),
                    (s.prototype.shln = function (e) {
                        return this.clone().ishln(e)
                    }),
                    (s.prototype.ushln = function (e) {
                        return this.clone().iushln(e)
                    }),
                    (s.prototype.shrn = function (e) {
                        return this.clone().ishrn(e)
                    }),
                    (s.prototype.ushrn = function (e) {
                        return this.clone().iushrn(e)
                    }),
                    (s.prototype.testn = function (e) {
                        i('number' == typeof e && e >= 0)
                        var t = e % 26,
                            r = (e - t) / 26,
                            n = 1 << t
                        return !(this.length <= r) && !!(this.words[r] & n)
                    }),
                    (s.prototype.imaskn = function (e) {
                        i('number' == typeof e && e >= 0)
                        var t = e % 26,
                            r = (e - t) / 26
                        if (
                            (i(
                                0 === this.negative,
                                'imaskn works only with positive numbers'
                            ),
                                this.length <= r)
                        )
                            return this
                        if (
                            (0 !== t && r++,
                                (this.length = Math.min(r, this.length)),
                                0 !== t)
                        ) {
                            var n = 67108863 ^ ((67108863 >>> t) << t)
                            this.words[this.length - 1] &= n
                        }
                        return this.strip()
                    }),
                    (s.prototype.maskn = function (e) {
                        return this.clone().imaskn(e)
                    }),
                    (s.prototype.iaddn = function (e) {
                        return (
                            i('number' == typeof e),
                            i(e < 67108864),
                            e < 0
                                ? this.isubn(-e)
                                : 0 !== this.negative
                                    ? 1 === this.length && (0 | this.words[0]) < e
                                        ? ((this.words[0] = e - (0 | this.words[0])),
                                            (this.negative = 0),
                                            this)
                                        : ((this.negative = 0),
                                            this.isubn(e),
                                            (this.negative = 1),
                                            this)
                                    : this._iaddn(e)
                        )
                    }),
                    (s.prototype._iaddn = function (e) {
                        this.words[0] += e
                        for (var t = 0; t < this.length && this.words[t] >= 67108864; t++)
                            (this.words[t] -= 67108864),
                                t === this.length - 1
                                    ? (this.words[t + 1] = 1)
                                    : this.words[t + 1]++
                        return (this.length = Math.max(this.length, t + 1)), this
                    }),
                    (s.prototype.isubn = function (e) {
                        if ((i('number' == typeof e), i(e < 67108864), e < 0))
                            return this.iaddn(-e)
                        if (0 !== this.negative)
                            return (
                                (this.negative = 0), this.iaddn(e), (this.negative = 1), this
                            )
                        if (((this.words[0] -= e), 1 === this.length && this.words[0] < 0))
                            (this.words[0] = -this.words[0]), (this.negative = 1)
                        else
                            for (var t = 0; t < this.length && this.words[t] < 0; t++)
                                (this.words[t] += 67108864), (this.words[t + 1] -= 1)
                        return this.strip()
                    }),
                    (s.prototype.addn = function (e) {
                        return this.clone().iaddn(e)
                    }),
                    (s.prototype.subn = function (e) {
                        return this.clone().isubn(e)
                    }),
                    (s.prototype.iabs = function () {
                        return (this.negative = 0), this
                    }),
                    (s.prototype.abs = function () {
                        return this.clone().iabs()
                    }),
                    (s.prototype._ishlnsubmul = function (e, t, r) {
                        var n,
                            s,
                            o = e.length + r
                        this._expand(o)
                        var a = 0
                        for (n = 0; n < e.length; n++) {
                            s = (0 | this.words[n + r]) + a
                            var u = (0 | e.words[n]) * t
                                ; (a = ((s -= 67108863 & u) >> 26) - ((u / 67108864) | 0)),
                                    (this.words[n + r] = 67108863 & s)
                        }
                        for (; n < this.length - r; n++)
                            (a = (s = (0 | this.words[n + r]) + a) >> 26),
                                (this.words[n + r] = 67108863 & s)
                        if (0 === a) return this.strip()
                        for (i(-1 === a), a = 0, n = 0; n < this.length; n++)
                            (a = (s = -(0 | this.words[n]) + a) >> 26),
                                (this.words[n] = 67108863 & s)
                        return (this.negative = 1), this.strip()
                    }),
                    (s.prototype._wordDiv = function (e, t) {
                        var r = (this.length, e.length),
                            i = this.clone(),
                            n = e,
                            o = 0 | n.words[n.length - 1]
                        0 !== (r = 26 - this._countBits(o)) &&
                            ((n = n.ushln(r)), i.iushln(r), (o = 0 | n.words[n.length - 1]))
                        var a,
                            u = i.length - n.length
                        if ('mod' !== t) {
                            ; ((a = new s(null)).length = u + 1),
                                (a.words = new Array(a.length))
                            for (var c = 0; c < a.length; c++) a.words[c] = 0
                        }
                        var d = i.clone()._ishlnsubmul(n, 1, u)
                        0 === d.negative && ((i = d), a && (a.words[u] = 1))
                        for (var p = u - 1; p >= 0; p--) {
                            var f =
                                67108864 * (0 | i.words[n.length + p]) +
                                (0 | i.words[n.length + p - 1])
                            for (
                                f = Math.min((f / o) | 0, 67108863), i._ishlnsubmul(n, f, p);
                                0 !== i.negative;

                            )
                                f--,
                                    (i.negative = 0),
                                    i._ishlnsubmul(n, 1, p),
                                    i.isZero() || (i.negative ^= 1)
                            a && (a.words[p] = f)
                        }
                        return (
                            a && a.strip(),
                            i.strip(),
                            'div' !== t && 0 !== r && i.iushrn(r),
                            { div: a || null, mod: i }
                        )
                    }),
                    (s.prototype.divmod = function (e, t, r) {
                        return (
                            i(!e.isZero()),
                            this.isZero()
                                ? { div: new s(0), mod: new s(0) }
                                : 0 !== this.negative && 0 === e.negative
                                    ? ((a = this.neg().divmod(e, t)),
                                        'mod' !== t && (n = a.div.neg()),
                                        'div' !== t &&
                                        ((o = a.mod.neg()), r && 0 !== o.negative && o.iadd(e)),
                                        { div: n, mod: o })
                                    : 0 === this.negative && 0 !== e.negative
                                        ? ((a = this.divmod(e.neg(), t)),
                                            'mod' !== t && (n = a.div.neg()),
                                            { div: n, mod: a.mod })
                                        : 0 != (this.negative & e.negative)
                                            ? ((a = this.neg().divmod(e.neg(), t)),
                                                'div' !== t &&
                                                ((o = a.mod.neg()), r && 0 !== o.negative && o.isub(e)),
                                                { div: a.div, mod: o })
                                            : e.length > this.length || this.cmp(e) < 0
                                                ? { div: new s(0), mod: this }
                                                : 1 === e.length
                                                    ? 'div' === t
                                                        ? { div: this.divn(e.words[0]), mod: null }
                                                        : 'mod' === t
                                                            ? { div: null, mod: new s(this.modn(e.words[0])) }
                                                            : {
                                                                div: this.divn(e.words[0]),
                                                                mod: new s(this.modn(e.words[0])),
                                                            }
                                                    : this._wordDiv(e, t)
                        )
                        var n, o, a
                    }),
                    (s.prototype.div = function (e) {
                        return this.divmod(e, 'div', !1).div
                    }),
                    (s.prototype.mod = function (e) {
                        return this.divmod(e, 'mod', !1).mod
                    }),
                    (s.prototype.umod = function (e) {
                        return this.divmod(e, 'mod', !0).mod
                    }),
                    (s.prototype.divRound = function (e) {
                        var t = this.divmod(e)
                        if (t.mod.isZero()) return t.div
                        var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod,
                            i = e.ushrn(1),
                            n = e.andln(1),
                            s = r.cmp(i)
                        return s < 0 || (1 === n && 0 === s)
                            ? t.div
                            : 0 !== t.div.negative
                                ? t.div.isubn(1)
                                : t.div.iaddn(1)
                    }),
                    (s.prototype.modn = function (e) {
                        i(e <= 67108863)
                        for (var t = (1 << 26) % e, r = 0, n = this.length - 1; n >= 0; n--)
                            r = (t * r + (0 | this.words[n])) % e
                        return r
                    }),
                    (s.prototype.idivn = function (e) {
                        i(e <= 67108863)
                        for (var t = 0, r = this.length - 1; r >= 0; r--) {
                            var n = (0 | this.words[r]) + 67108864 * t
                                ; (this.words[r] = (n / e) | 0), (t = n % e)
                        }
                        return this.strip()
                    }),
                    (s.prototype.divn = function (e) {
                        return this.clone().idivn(e)
                    }),
                    (s.prototype.egcd = function (e) {
                        i(0 === e.negative), i(!e.isZero())
                        var t = this,
                            r = e.clone()
                        t = 0 !== t.negative ? t.umod(e) : t.clone()
                        for (
                            var n = new s(1), o = new s(0), a = new s(0), u = new s(1), c = 0;
                            t.isEven() && r.isEven();

                        )
                            t.iushrn(1), r.iushrn(1), ++c
                        for (var d = r.clone(), p = t.clone(); !t.isZero();) {
                            for (
                                var f = 0, l = 1;
                                0 == (t.words[0] & l) && f < 26;
                                ++f, l <<= 1
                            );
                            if (f > 0)
                                for (t.iushrn(f); f-- > 0;)
                                    (n.isOdd() || o.isOdd()) && (n.iadd(d), o.isub(p)),
                                        n.iushrn(1),
                                        o.iushrn(1)
                            for (
                                var h = 0, g = 1;
                                0 == (r.words[0] & g) && h < 26;
                                ++h, g <<= 1
                            );
                            if (h > 0)
                                for (r.iushrn(h); h-- > 0;)
                                    (a.isOdd() || u.isOdd()) && (a.iadd(d), u.isub(p)),
                                        a.iushrn(1),
                                        u.iushrn(1)
                            t.cmp(r) >= 0
                                ? (t.isub(r), n.isub(a), o.isub(u))
                                : (r.isub(t), a.isub(n), u.isub(o))
                        }
                        return { a, b: u, gcd: r.iushln(c) }
                    }),
                    (s.prototype._invmp = function (e) {
                        i(0 === e.negative), i(!e.isZero())
                        var t = this,
                            r = e.clone()
                        t = 0 !== t.negative ? t.umod(e) : t.clone()
                        for (
                            var n, o = new s(1), a = new s(0), u = r.clone();
                            t.cmpn(1) > 0 && r.cmpn(1) > 0;

                        ) {
                            for (
                                var c = 0, d = 1;
                                0 == (t.words[0] & d) && c < 26;
                                ++c, d <<= 1
                            );
                            if (c > 0)
                                for (t.iushrn(c); c-- > 0;) o.isOdd() && o.iadd(u), o.iushrn(1)
                            for (
                                var p = 0, f = 1;
                                0 == (r.words[0] & f) && p < 26;
                                ++p, f <<= 1
                            );
                            if (p > 0)
                                for (r.iushrn(p); p-- > 0;) a.isOdd() && a.iadd(u), a.iushrn(1)
                            t.cmp(r) >= 0 ? (t.isub(r), o.isub(a)) : (r.isub(t), a.isub(o))
                        }
                        return (n = 0 === t.cmpn(1) ? o : a).cmpn(0) < 0 && n.iadd(e), n
                    }),
                    (s.prototype.gcd = function (e) {
                        if (this.isZero()) return e.abs()
                        if (e.isZero()) return this.abs()
                        var t = this.clone(),
                            r = e.clone()
                            ; (t.negative = 0), (r.negative = 0)
                        for (var i = 0; t.isEven() && r.isEven(); i++)
                            t.iushrn(1), r.iushrn(1)
                        for (; ;) {
                            for (; t.isEven();) t.iushrn(1)
                            for (; r.isEven();) r.iushrn(1)
                            var n = t.cmp(r)
                            if (n < 0) {
                                var s = t
                                    ; (t = r), (r = s)
                            } else if (0 === n || 0 === r.cmpn(1)) break
                            t.isub(r)
                        }
                        return r.iushln(i)
                    }),
                    (s.prototype.invm = function (e) {
                        return this.egcd(e).a.umod(e)
                    }),
                    (s.prototype.isEven = function () {
                        return 0 == (1 & this.words[0])
                    }),
                    (s.prototype.isOdd = function () {
                        return 1 == (1 & this.words[0])
                    }),
                    (s.prototype.andln = function (e) {
                        return this.words[0] & e
                    }),
                    (s.prototype.bincn = function (e) {
                        i('number' == typeof e)
                        var t = e % 26,
                            r = (e - t) / 26,
                            n = 1 << t
                        if (this.length <= r)
                            return this._expand(r + 1), (this.words[r] |= n), this
                        for (var s = n, o = r; 0 !== s && o < this.length; o++) {
                            var a = 0 | this.words[o]
                                ; (s = (a += s) >>> 26), (a &= 67108863), (this.words[o] = a)
                        }
                        return 0 !== s && ((this.words[o] = s), this.length++), this
                    }),
                    (s.prototype.isZero = function () {
                        return 1 === this.length && 0 === this.words[0]
                    }),
                    (s.prototype.cmpn = function (e) {
                        var t,
                            r = e < 0
                        if (0 !== this.negative && !r) return -1
                        if (0 === this.negative && r) return 1
                        if ((this.strip(), this.length > 1)) t = 1
                        else {
                            r && (e = -e), i(e <= 67108863, 'Number is too big')
                            var n = 0 | this.words[0]
                            t = n === e ? 0 : n < e ? -1 : 1
                        }
                        return 0 !== this.negative ? 0 | -t : t
                    }),
                    (s.prototype.cmp = function (e) {
                        if (0 !== this.negative && 0 === e.negative) return -1
                        if (0 === this.negative && 0 !== e.negative) return 1
                        var t = this.ucmp(e)
                        return 0 !== this.negative ? 0 | -t : t
                    }),
                    (s.prototype.ucmp = function (e) {
                        if (this.length > e.length) return 1
                        if (this.length < e.length) return -1
                        for (var t = 0, r = this.length - 1; r >= 0; r--) {
                            var i = 0 | this.words[r],
                                n = 0 | e.words[r]
                            if (i !== n) {
                                i < n ? (t = -1) : i > n && (t = 1)
                                break
                            }
                        }
                        return t
                    }),
                    (s.prototype.gtn = function (e) {
                        return 1 === this.cmpn(e)
                    }),
                    (s.prototype.gt = function (e) {
                        return 1 === this.cmp(e)
                    }),
                    (s.prototype.gten = function (e) {
                        return this.cmpn(e) >= 0
                    }),
                    (s.prototype.gte = function (e) {
                        return this.cmp(e) >= 0
                    }),
                    (s.prototype.ltn = function (e) {
                        return -1 === this.cmpn(e)
                    }),
                    (s.prototype.lt = function (e) {
                        return -1 === this.cmp(e)
                    }),
                    (s.prototype.lten = function (e) {
                        return this.cmpn(e) <= 0
                    }),
                    (s.prototype.lte = function (e) {
                        return this.cmp(e) <= 0
                    }),
                    (s.prototype.eqn = function (e) {
                        return 0 === this.cmpn(e)
                    }),
                    (s.prototype.eq = function (e) {
                        return 0 === this.cmp(e)
                    }),
                    (s.red = function (e) {
                        return new C(e)
                    }),
                    (s.prototype.toRed = function (e) {
                        return (
                            i(!this.red, 'Already a number in reduction context'),
                            i(0 === this.negative, 'red works only with positives'),
                            e.convertTo(this)._forceRed(e)
                        )
                    }),
                    (s.prototype.fromRed = function () {
                        return (
                            i(
                                this.red,
                                'fromRed works only with numbers in reduction context'
                            ),
                            this.red.convertFrom(this)
                        )
                    }),
                    (s.prototype._forceRed = function (e) {
                        return (this.red = e), this
                    }),
                    (s.prototype.forceRed = function (e) {
                        return (
                            i(!this.red, 'Already a number in reduction context'),
                            this._forceRed(e)
                        )
                    }),
                    (s.prototype.redAdd = function (e) {
                        return (
                            i(this.red, 'redAdd works only with red numbers'),
                            this.red.add(this, e)
                        )
                    }),
                    (s.prototype.redIAdd = function (e) {
                        return (
                            i(this.red, 'redIAdd works only with red numbers'),
                            this.red.iadd(this, e)
                        )
                    }),
                    (s.prototype.redSub = function (e) {
                        return (
                            i(this.red, 'redSub works only with red numbers'),
                            this.red.sub(this, e)
                        )
                    }),
                    (s.prototype.redISub = function (e) {
                        return (
                            i(this.red, 'redISub works only with red numbers'),
                            this.red.isub(this, e)
                        )
                    }),
                    (s.prototype.redShl = function (e) {
                        return (
                            i(this.red, 'redShl works only with red numbers'),
                            this.red.shl(this, e)
                        )
                    }),
                    (s.prototype.redMul = function (e) {
                        return (
                            i(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, e),
                            this.red.mul(this, e)
                        )
                    }),
                    (s.prototype.redIMul = function (e) {
                        return (
                            i(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, e),
                            this.red.imul(this, e)
                        )
                    }),
                    (s.prototype.redSqr = function () {
                        return (
                            i(this.red, 'redSqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqr(this)
                        )
                    }),
                    (s.prototype.redISqr = function () {
                        return (
                            i(this.red, 'redISqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.isqr(this)
                        )
                    }),
                    (s.prototype.redSqrt = function () {
                        return (
                            i(this.red, 'redSqrt works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqrt(this)
                        )
                    }),
                    (s.prototype.redInvm = function () {
                        return (
                            i(this.red, 'redInvm works only with red numbers'),
                            this.red._verify1(this),
                            this.red.invm(this)
                        )
                    }),
                    (s.prototype.redNeg = function () {
                        return (
                            i(this.red, 'redNeg works only with red numbers'),
                            this.red._verify1(this),
                            this.red.neg(this)
                        )
                    }),
                    (s.prototype.redPow = function (e) {
                        return (
                            i(this.red && !e.red, 'redPow(normalNum)'),
                            this.red._verify1(this),
                            this.red.pow(this, e)
                        )
                    })
                var m = { k256: null, p224: null, p192: null, p25519: null }
                function v(e, t) {
                    ; (this.name = e),
                        (this.p = new s(t, 16)),
                        (this.n = this.p.bitLength()),
                        (this.k = new s(1).iushln(this.n).isub(this.p)),
                        (this.tmp = this._tmp())
                }
                function b() {
                    v.call(
                        this,
                        'k256',
                        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'
                    )
                }
                function w() {
                    v.call(
                        this,
                        'p224',
                        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'
                    )
                }
                function E() {
                    v.call(
                        this,
                        'p192',
                        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'
                    )
                }
                function I() {
                    v.call(
                        this,
                        '25519',
                        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'
                    )
                }
                function C(e) {
                    if ('string' == typeof e) {
                        var t = s._prime(e)
                            ; (this.m = t.p), (this.prime = t)
                    } else
                        i(e.gtn(1), 'modulus must be greater than 1'),
                            (this.m = e),
                            (this.prime = null)
                }
                function S(e) {
                    C.call(this, e),
                        (this.shift = this.m.bitLength()),
                        this.shift % 26 != 0 && (this.shift += 26 - (this.shift % 26)),
                        (this.r = new s(1).iushln(this.shift)),
                        (this.r2 = this.imod(this.r.sqr())),
                        (this.rinv = this.r._invmp(this.m)),
                        (this.minv = this.rinv.mul(this.r).isubn(1).div(this.m)),
                        (this.minv = this.minv.umod(this.r)),
                        (this.minv = this.r.sub(this.minv))
                }
                ; (v.prototype._tmp = function () {
                    var e = new s(null)
                    return (e.words = new Array(Math.ceil(this.n / 13))), e
                }),
                    (v.prototype.ireduce = function (e) {
                        var t,
                            r = e
                        do {
                            this.split(r, this.tmp),
                                (t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength())
                        } while (t > this.n)
                        var i = t < this.n ? -1 : r.ucmp(this.p)
                        return (
                            0 === i
                                ? ((r.words[0] = 0), (r.length = 1))
                                : i > 0
                                    ? r.isub(this.p)
                                    : void 0 !== r.strip
                                        ? r.strip()
                                        : r._strip(),
                            r
                        )
                    }),
                    (v.prototype.split = function (e, t) {
                        e.iushrn(this.n, 0, t)
                    }),
                    (v.prototype.imulK = function (e) {
                        return e.imul(this.k)
                    }),
                    n(b, v),
                    (b.prototype.split = function (e, t) {
                        for (var r = 4194303, i = Math.min(e.length, 9), n = 0; n < i; n++)
                            t.words[n] = e.words[n]
                        if (((t.length = i), e.length <= 9))
                            return (e.words[0] = 0), void (e.length = 1)
                        var s = e.words[9]
                        for (t.words[t.length++] = s & r, n = 10; n < e.length; n++) {
                            var o = 0 | e.words[n]
                                ; (e.words[n - 10] = ((o & r) << 4) | (s >>> 22)), (s = o)
                        }
                        ; (s >>>= 22),
                            (e.words[n - 10] = s),
                            0 === s && e.length > 10 ? (e.length -= 10) : (e.length -= 9)
                    }),
                    (b.prototype.imulK = function (e) {
                        ; (e.words[e.length] = 0),
                            (e.words[e.length + 1] = 0),
                            (e.length += 2)
                        for (var t = 0, r = 0; r < e.length; r++) {
                            var i = 0 | e.words[r]
                                ; (t += 977 * i),
                                    (e.words[r] = 67108863 & t),
                                    (t = 64 * i + ((t / 67108864) | 0))
                        }
                        return (
                            0 === e.words[e.length - 1] &&
                            (e.length--, 0 === e.words[e.length - 1] && e.length--),
                            e
                        )
                    }),
                    n(w, v),
                    n(E, v),
                    n(I, v),
                    (I.prototype.imulK = function (e) {
                        for (var t = 0, r = 0; r < e.length; r++) {
                            var i = 19 * (0 | e.words[r]) + t,
                                n = 67108863 & i
                                ; (i >>>= 26), (e.words[r] = n), (t = i)
                        }
                        return 0 !== t && (e.words[e.length++] = t), e
                    }),
                    (s._prime = function (e) {
                        if (m[e]) return m[e]
                        var t
                        if ('k256' === e) t = new b()
                        else if ('p224' === e) t = new w()
                        else if ('p192' === e) t = new E()
                        else {
                            if ('p25519' !== e) throw new Error('Unknown prime ' + e)
                            t = new I()
                        }
                        return (m[e] = t), t
                    }),
                    (C.prototype._verify1 = function (e) {
                        i(0 === e.negative, 'red works only with positives'),
                            i(e.red, 'red works only with red numbers')
                    }),
                    (C.prototype._verify2 = function (e, t) {
                        i(0 == (e.negative | t.negative), 'red works only with positives'),
                            i(e.red && e.red === t.red, 'red works only with red numbers')
                    }),
                    (C.prototype.imod = function (e) {
                        return this.prime
                            ? this.prime.ireduce(e)._forceRed(this)
                            : e.umod(this.m)._forceRed(this)
                    }),
                    (C.prototype.neg = function (e) {
                        return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this)
                    }),
                    (C.prototype.add = function (e, t) {
                        this._verify2(e, t)
                        var r = e.add(t)
                        return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this)
                    }),
                    (C.prototype.iadd = function (e, t) {
                        this._verify2(e, t)
                        var r = e.iadd(t)
                        return r.cmp(this.m) >= 0 && r.isub(this.m), r
                    }),
                    (C.prototype.sub = function (e, t) {
                        this._verify2(e, t)
                        var r = e.sub(t)
                        return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this)
                    }),
                    (C.prototype.isub = function (e, t) {
                        this._verify2(e, t)
                        var r = e.isub(t)
                        return r.cmpn(0) < 0 && r.iadd(this.m), r
                    }),
                    (C.prototype.shl = function (e, t) {
                        return this._verify1(e), this.imod(e.ushln(t))
                    }),
                    (C.prototype.imul = function (e, t) {
                        return this._verify2(e, t), this.imod(e.imul(t))
                    }),
                    (C.prototype.mul = function (e, t) {
                        return this._verify2(e, t), this.imod(e.mul(t))
                    }),
                    (C.prototype.isqr = function (e) {
                        return this.imul(e, e.clone())
                    }),
                    (C.prototype.sqr = function (e) {
                        return this.mul(e, e)
                    }),
                    (C.prototype.sqrt = function (e) {
                        if (e.isZero()) return e.clone()
                        var t = this.m.andln(3)
                        if ((i(t % 2 == 1), 3 === t)) {
                            var r = this.m.add(new s(1)).iushrn(2)
                            return this.pow(e, r)
                        }
                        for (
                            var n = this.m.subn(1), o = 0;
                            !n.isZero() && 0 === n.andln(1);

                        )
                            o++, n.iushrn(1)
                        i(!n.isZero())
                        var a = new s(1).toRed(this),
                            u = a.redNeg(),
                            c = this.m.subn(1).iushrn(1),
                            d = this.m.bitLength()
                        for (
                            d = new s(2 * d * d).toRed(this);
                            0 !== this.pow(d, c).cmp(u);

                        )
                            d.redIAdd(u)
                        for (
                            var p = this.pow(d, n),
                            f = this.pow(e, n.addn(1).iushrn(1)),
                            l = this.pow(e, n),
                            h = o;
                            0 !== l.cmp(a);

                        ) {
                            for (var g = l, y = 0; 0 !== g.cmp(a); y++) g = g.redSqr()
                            i(y < h)
                            var m = this.pow(p, new s(1).iushln(h - y - 1))
                                ; (f = f.redMul(m)), (p = m.redSqr()), (l = l.redMul(p)), (h = y)
                        }
                        return f
                    }),
                    (C.prototype.invm = function (e) {
                        var t = e._invmp(this.m)
                        return 0 !== t.negative
                            ? ((t.negative = 0), this.imod(t).redNeg())
                            : this.imod(t)
                    }),
                    (C.prototype.pow = function (e, t) {
                        if (t.isZero()) return new s(1).toRed(this)
                        if (0 === t.cmpn(1)) return e.clone()
                        var r = new Array(16)
                            ; (r[0] = new s(1).toRed(this)), (r[1] = e)
                        for (var i = 2; i < r.length; i++) r[i] = this.mul(r[i - 1], e)
                        var n = r[0],
                            o = 0,
                            a = 0,
                            u = t.bitLength() % 26
                        for (0 === u && (u = 26), i = t.length - 1; i >= 0; i--) {
                            for (var c = t.words[i], d = u - 1; d >= 0; d--) {
                                var p = (c >> d) & 1
                                n !== r[0] && (n = this.sqr(n)),
                                    0 !== p || 0 !== o
                                        ? ((o <<= 1),
                                            (o |= p),
                                            (4 === ++a || (0 === i && 0 === d)) &&
                                            ((n = this.mul(n, r[o])), (a = 0), (o = 0)))
                                        : (a = 0)
                            }
                            u = 26
                        }
                        return n
                    }),
                    (C.prototype.convertTo = function (e) {
                        var t = e.umod(this.m)
                        return t === e ? t.clone() : t
                    }),
                    (C.prototype.convertFrom = function (e) {
                        var t = e.clone()
                        return (t.red = null), t
                    }),
                    (s.mont = function (e) {
                        return new S(e)
                    }),
                    n(S, C),
                    (S.prototype.convertTo = function (e) {
                        return this.imod(e.ushln(this.shift))
                    }),
                    (S.prototype.convertFrom = function (e) {
                        var t = this.imod(e.mul(this.rinv))
                        return (t.red = null), t
                    }),
                    (S.prototype.imul = function (e, t) {
                        if (e.isZero() || t.isZero())
                            return (e.words[0] = 0), (e.length = 1), e
                        var r = e.imul(t),
                            i = r
                                .maskn(this.shift)
                                .mul(this.minv)
                                .imaskn(this.shift)
                                .mul(this.m),
                            n = r.isub(i).iushrn(this.shift),
                            s = n
                        return (
                            n.cmp(this.m) >= 0
                                ? (s = n.isub(this.m))
                                : n.cmpn(0) < 0 && (s = n.iadd(this.m)),
                            s._forceRed(this)
                        )
                    }),
                    (S.prototype.mul = function (e, t) {
                        if (e.isZero() || t.isZero()) return new s(0)._forceRed(this)
                        var r = e.mul(t),
                            i = r
                                .maskn(this.shift)
                                .mul(this.minv)
                                .imaskn(this.shift)
                                .mul(this.m),
                            n = r.isub(i).iushrn(this.shift),
                            o = n
                        return (
                            n.cmp(this.m) >= 0
                                ? (o = n.isub(this.m))
                                : n.cmpn(0) < 0 && (o = n.iadd(this.m)),
                            o._forceRed(this)
                        )
                    }),
                    (S.prototype.invm = function (e) {
                        return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)
                    })
            })((e = r.nmd(e)), this)
        },
        86266: (e, t, r) => {
            'use strict'
            var i = t
                ; (i.version = r(18597).i8),
                    (i.utils = r(80953)),
                    (i.rand = r(29931)),
                    (i.curve = r(88254)),
                    (i.curves = r(45427)),
                    (i.ec = r(57954)),
                    (i.eddsa = r(65980))
        },
        4918: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(80953),
                s = n.getNAF,
                o = n.getJSF,
                a = n.assert
            function u(e, t) {
                ; (this.type = e),
                    (this.p = new i(t.p, 16)),
                    (this.red = t.prime ? i.red(t.prime) : i.mont(this.p)),
                    (this.zero = new i(0).toRed(this.red)),
                    (this.one = new i(1).toRed(this.red)),
                    (this.two = new i(2).toRed(this.red)),
                    (this.n = t.n && new i(t.n, 16)),
                    (this.g = t.g && this.pointFromJSON(t.g, t.gRed)),
                    (this._wnafT1 = new Array(4)),
                    (this._wnafT2 = new Array(4)),
                    (this._wnafT3 = new Array(4)),
                    (this._wnafT4 = new Array(4)),
                    (this._bitLength = this.n ? this.n.bitLength() : 0)
                var r = this.n && this.p.div(this.n)
                !r || r.cmpn(100) > 0
                    ? (this.redN = null)
                    : ((this._maxwellTrick = !0), (this.redN = this.n.toRed(this.red)))
            }
            function c(e, t) {
                ; (this.curve = e), (this.type = t), (this.precomputed = null)
            }
            ; (e.exports = u),
                (u.prototype.point = function () {
                    throw new Error('Not implemented')
                }),
                (u.prototype.validate = function () {
                    throw new Error('Not implemented')
                }),
                (u.prototype._fixedNafMul = function (e, t) {
                    a(e.precomputed)
                    var r = e._getDoubles(),
                        i = s(t, 1, this._bitLength),
                        n = (1 << (r.step + 1)) - (r.step % 2 == 0 ? 2 : 1)
                    n /= 3
                    var o,
                        u,
                        c = []
                    for (o = 0; o < i.length; o += r.step) {
                        u = 0
                        for (var d = o + r.step - 1; d >= o; d--) u = (u << 1) + i[d]
                        c.push(u)
                    }
                    for (
                        var p = this.jpoint(null, null, null),
                        f = this.jpoint(null, null, null),
                        l = n;
                        l > 0;
                        l--
                    ) {
                        for (o = 0; o < c.length; o++)
                            (u = c[o]) === l
                                ? (f = f.mixedAdd(r.points[o]))
                                : u === -l && (f = f.mixedAdd(r.points[o].neg()))
                        p = p.add(f)
                    }
                    return p.toP()
                }),
                (u.prototype._wnafMul = function (e, t) {
                    var r = 4,
                        i = e._getNAFPoints(r)
                    r = i.wnd
                    for (
                        var n = i.points,
                        o = s(t, r, this._bitLength),
                        u = this.jpoint(null, null, null),
                        c = o.length - 1;
                        c >= 0;
                        c--
                    ) {
                        for (var d = 0; c >= 0 && 0 === o[c]; c--) d++
                        if ((c >= 0 && d++, (u = u.dblp(d)), c < 0)) break
                        var p = o[c]
                        a(0 !== p),
                            (u =
                                'affine' === e.type
                                    ? p > 0
                                        ? u.mixedAdd(n[(p - 1) >> 1])
                                        : u.mixedAdd(n[(-p - 1) >> 1].neg())
                                    : p > 0
                                        ? u.add(n[(p - 1) >> 1])
                                        : u.add(n[(-p - 1) >> 1].neg()))
                    }
                    return 'affine' === e.type ? u.toP() : u
                }),
                (u.prototype._wnafMulAdd = function (e, t, r, i, n) {
                    var a,
                        u,
                        c,
                        d = this._wnafT1,
                        p = this._wnafT2,
                        f = this._wnafT3,
                        l = 0
                    for (a = 0; a < i; a++) {
                        var h = (c = t[a])._getNAFPoints(e)
                            ; (d[a] = h.wnd), (p[a] = h.points)
                    }
                    for (a = i - 1; a >= 1; a -= 2) {
                        var g = a - 1,
                            y = a
                        if (1 === d[g] && 1 === d[y]) {
                            var m = [t[g], null, null, t[y]]
                            0 === t[g].y.cmp(t[y].y)
                                ? ((m[1] = t[g].add(t[y])),
                                    (m[2] = t[g].toJ().mixedAdd(t[y].neg())))
                                : 0 === t[g].y.cmp(t[y].y.redNeg())
                                    ? ((m[1] = t[g].toJ().mixedAdd(t[y])),
                                        (m[2] = t[g].add(t[y].neg())))
                                    : ((m[1] = t[g].toJ().mixedAdd(t[y])),
                                        (m[2] = t[g].toJ().mixedAdd(t[y].neg())))
                            var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3],
                                b = o(r[g], r[y])
                            for (
                                l = Math.max(b[0].length, l),
                                f[g] = new Array(l),
                                f[y] = new Array(l),
                                u = 0;
                                u < l;
                                u++
                            ) {
                                var w = 0 | b[0][u],
                                    E = 0 | b[1][u]
                                    ; (f[g][u] = v[3 * (w + 1) + (E + 1)]), (f[y][u] = 0), (p[g] = m)
                            }
                        } else
                            (f[g] = s(r[g], d[g], this._bitLength)),
                                (f[y] = s(r[y], d[y], this._bitLength)),
                                (l = Math.max(f[g].length, l)),
                                (l = Math.max(f[y].length, l))
                    }
                    var I = this.jpoint(null, null, null),
                        C = this._wnafT4
                    for (a = l; a >= 0; a--) {
                        for (var S = 0; a >= 0;) {
                            var A = !0
                            for (u = 0; u < i; u++)
                                (C[u] = 0 | f[u][a]), 0 !== C[u] && (A = !1)
                            if (!A) break
                            S++, a--
                        }
                        if ((a >= 0 && S++, (I = I.dblp(S)), a < 0)) break
                        for (u = 0; u < i; u++) {
                            var T = C[u]
                            0 !== T &&
                                (T > 0
                                    ? (c = p[u][(T - 1) >> 1])
                                    : T < 0 && (c = p[u][(-T - 1) >> 1].neg()),
                                    (I = 'affine' === c.type ? I.mixedAdd(c) : I.add(c)))
                        }
                    }
                    for (a = 0; a < i; a++) p[a] = null
                    return n ? I : I.toP()
                }),
                (u.BasePoint = c),
                (c.prototype.eq = function () {
                    throw new Error('Not implemented')
                }),
                (c.prototype.validate = function () {
                    return this.curve.validate(this)
                }),
                (u.prototype.decodePoint = function (e, t) {
                    e = n.toArray(e, t)
                    var r = this.p.byteLength()
                    if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r)
                        return (
                            6 === e[0]
                                ? a(e[e.length - 1] % 2 == 0)
                                : 7 === e[0] && a(e[e.length - 1] % 2 == 1),
                            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r))
                        )
                    if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r)
                        return this.pointFromX(e.slice(1, 1 + r), 3 === e[0])
                    throw new Error('Unknown point format')
                }),
                (c.prototype.encodeCompressed = function (e) {
                    return this.encode(e, !0)
                }),
                (c.prototype._encode = function (e) {
                    var t = this.curve.p.byteLength(),
                        r = this.getX().toArray('be', t)
                    return e
                        ? [this.getY().isEven() ? 2 : 3].concat(r)
                        : [4].concat(r, this.getY().toArray('be', t))
                }),
                (c.prototype.encode = function (e, t) {
                    return n.encode(this._encode(t), e)
                }),
                (c.prototype.precompute = function (e) {
                    if (this.precomputed) return this
                    var t = { doubles: null, naf: null, beta: null }
                    return (
                        (t.naf = this._getNAFPoints(8)),
                        (t.doubles = this._getDoubles(4, e)),
                        (t.beta = this._getBeta()),
                        (this.precomputed = t),
                        this
                    )
                }),
                (c.prototype._hasDoubles = function (e) {
                    if (!this.precomputed) return !1
                    var t = this.precomputed.doubles
                    return (
                        !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step)
                    )
                }),
                (c.prototype._getDoubles = function (e, t) {
                    if (this.precomputed && this.precomputed.doubles)
                        return this.precomputed.doubles
                    for (var r = [this], i = this, n = 0; n < t; n += e) {
                        for (var s = 0; s < e; s++) i = i.dbl()
                        r.push(i)
                    }
                    return { step: e, points: r }
                }),
                (c.prototype._getNAFPoints = function (e) {
                    if (this.precomputed && this.precomputed.naf)
                        return this.precomputed.naf
                    for (
                        var t = [this],
                        r = (1 << e) - 1,
                        i = 1 === r ? null : this.dbl(),
                        n = 1;
                        n < r;
                        n++
                    )
                        t[n] = t[n - 1].add(i)
                    return { wnd: e, points: t }
                }),
                (c.prototype._getBeta = function () {
                    return null
                }),
                (c.prototype.dblp = function (e) {
                    for (var t = this, r = 0; r < e; r++) t = t.dbl()
                    return t
                })
        },
        31138: (e, t, r) => {
            'use strict'
            var i = r(80953),
                n = r(13550),
                s = r(35717),
                o = r(4918),
                a = i.assert
            function u(e) {
                ; (this.twisted = 1 != (0 | e.a)),
                    (this.mOneA = this.twisted && -1 == (0 | e.a)),
                    (this.extended = this.mOneA),
                    o.call(this, 'edwards', e),
                    (this.a = new n(e.a, 16).umod(this.red.m)),
                    (this.a = this.a.toRed(this.red)),
                    (this.c = new n(e.c, 16).toRed(this.red)),
                    (this.c2 = this.c.redSqr()),
                    (this.d = new n(e.d, 16).toRed(this.red)),
                    (this.dd = this.d.redAdd(this.d)),
                    a(!this.twisted || 0 === this.c.fromRed().cmpn(1)),
                    (this.oneC = 1 == (0 | e.c))
            }
            function c(e, t, r, i, s) {
                o.BasePoint.call(this, e, 'projective'),
                    null === t && null === r && null === i
                        ? ((this.x = this.curve.zero),
                            (this.y = this.curve.one),
                            (this.z = this.curve.one),
                            (this.t = this.curve.zero),
                            (this.zOne = !0))
                        : ((this.x = new n(t, 16)),
                            (this.y = new n(r, 16)),
                            (this.z = i ? new n(i, 16) : this.curve.one),
                            (this.t = s && new n(s, 16)),
                            this.x.red || (this.x = this.x.toRed(this.curve.red)),
                            this.y.red || (this.y = this.y.toRed(this.curve.red)),
                            this.z.red || (this.z = this.z.toRed(this.curve.red)),
                            this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)),
                            (this.zOne = this.z === this.curve.one),
                            this.curve.extended &&
                            !this.t &&
                            ((this.t = this.x.redMul(this.y)),
                                this.zOne || (this.t = this.t.redMul(this.z.redInvm()))))
            }
            s(u, o),
                (e.exports = u),
                (u.prototype._mulA = function (e) {
                    return this.mOneA ? e.redNeg() : this.a.redMul(e)
                }),
                (u.prototype._mulC = function (e) {
                    return this.oneC ? e : this.c.redMul(e)
                }),
                (u.prototype.jpoint = function (e, t, r, i) {
                    return this.point(e, t, r, i)
                }),
                (u.prototype.pointFromX = function (e, t) {
                    ; (e = new n(e, 16)).red || (e = e.toRed(this.red))
                    var r = e.redSqr(),
                        i = this.c2.redSub(this.a.redMul(r)),
                        s = this.one.redSub(this.c2.redMul(this.d).redMul(r)),
                        o = i.redMul(s.redInvm()),
                        a = o.redSqrt()
                    if (0 !== a.redSqr().redSub(o).cmp(this.zero))
                        throw new Error('invalid point')
                    var u = a.fromRed().isOdd()
                    return ((t && !u) || (!t && u)) && (a = a.redNeg()), this.point(e, a)
                }),
                (u.prototype.pointFromY = function (e, t) {
                    ; (e = new n(e, 16)).red || (e = e.toRed(this.red))
                    var r = e.redSqr(),
                        i = r.redSub(this.c2),
                        s = r.redMul(this.d).redMul(this.c2).redSub(this.a),
                        o = i.redMul(s.redInvm())
                    if (0 === o.cmp(this.zero)) {
                        if (t) throw new Error('invalid point')
                        return this.point(this.zero, e)
                    }
                    var a = o.redSqrt()
                    if (0 !== a.redSqr().redSub(o).cmp(this.zero))
                        throw new Error('invalid point')
                    return a.fromRed().isOdd() !== t && (a = a.redNeg()), this.point(a, e)
                }),
                (u.prototype.validate = function (e) {
                    if (e.isInfinity()) return !0
                    e.normalize()
                    var t = e.x.redSqr(),
                        r = e.y.redSqr(),
                        i = t.redMul(this.a).redAdd(r),
                        n = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)))
                    return 0 === i.cmp(n)
                }),
                s(c, o.BasePoint),
                (u.prototype.pointFromJSON = function (e) {
                    return c.fromJSON(this, e)
                }),
                (u.prototype.point = function (e, t, r, i) {
                    return new c(this, e, t, r, i)
                }),
                (c.fromJSON = function (e, t) {
                    return new c(e, t[0], t[1], t[2])
                }),
                (c.prototype.inspect = function () {
                    return this.isInfinity()
                        ? '<EC Point Infinity>'
                        : '<EC Point x: ' +
                        this.x.fromRed().toString(16, 2) +
                        ' y: ' +
                        this.y.fromRed().toString(16, 2) +
                        ' z: ' +
                        this.z.fromRed().toString(16, 2) +
                        '>'
                }),
                (c.prototype.isInfinity = function () {
                    return (
                        0 === this.x.cmpn(0) &&
                        (0 === this.y.cmp(this.z) ||
                            (this.zOne && 0 === this.y.cmp(this.curve.c)))
                    )
                }),
                (c.prototype._extDbl = function () {
                    var e = this.x.redSqr(),
                        t = this.y.redSqr(),
                        r = this.z.redSqr()
                    r = r.redIAdd(r)
                    var i = this.curve._mulA(e),
                        n = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),
                        s = i.redAdd(t),
                        o = s.redSub(r),
                        a = i.redSub(t),
                        u = n.redMul(o),
                        c = s.redMul(a),
                        d = n.redMul(a),
                        p = o.redMul(s)
                    return this.curve.point(u, c, p, d)
                }),
                (c.prototype._projDbl = function () {
                    var e,
                        t,
                        r,
                        i,
                        n,
                        s,
                        o = this.x.redAdd(this.y).redSqr(),
                        a = this.x.redSqr(),
                        u = this.y.redSqr()
                    if (this.curve.twisted) {
                        var c = (i = this.curve._mulA(a)).redAdd(u)
                        this.zOne
                            ? ((e = o.redSub(a).redSub(u).redMul(c.redSub(this.curve.two))),
                                (t = c.redMul(i.redSub(u))),
                                (r = c.redSqr().redSub(c).redSub(c)))
                            : ((n = this.z.redSqr()),
                                (s = c.redSub(n).redISub(n)),
                                (e = o.redSub(a).redISub(u).redMul(s)),
                                (t = c.redMul(i.redSub(u))),
                                (r = c.redMul(s)))
                    } else
                        (i = a.redAdd(u)),
                            (n = this.curve._mulC(this.z).redSqr()),
                            (s = i.redSub(n).redSub(n)),
                            (e = this.curve._mulC(o.redISub(i)).redMul(s)),
                            (t = this.curve._mulC(i).redMul(a.redISub(u))),
                            (r = i.redMul(s))
                    return this.curve.point(e, t, r)
                }),
                (c.prototype.dbl = function () {
                    return this.isInfinity()
                        ? this
                        : this.curve.extended
                            ? this._extDbl()
                            : this._projDbl()
                }),
                (c.prototype._extAdd = function (e) {
                    var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x)),
                        r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),
                        i = this.t.redMul(this.curve.dd).redMul(e.t),
                        n = this.z.redMul(e.z.redAdd(e.z)),
                        s = r.redSub(t),
                        o = n.redSub(i),
                        a = n.redAdd(i),
                        u = r.redAdd(t),
                        c = s.redMul(o),
                        d = a.redMul(u),
                        p = s.redMul(u),
                        f = o.redMul(a)
                    return this.curve.point(c, d, f, p)
                }),
                (c.prototype._projAdd = function (e) {
                    var t,
                        r,
                        i = this.z.redMul(e.z),
                        n = i.redSqr(),
                        s = this.x.redMul(e.x),
                        o = this.y.redMul(e.y),
                        a = this.curve.d.redMul(s).redMul(o),
                        u = n.redSub(a),
                        c = n.redAdd(a),
                        d = this.x
                            .redAdd(this.y)
                            .redMul(e.x.redAdd(e.y))
                            .redISub(s)
                            .redISub(o),
                        p = i.redMul(u).redMul(d)
                    return (
                        this.curve.twisted
                            ? ((t = i.redMul(c).redMul(o.redSub(this.curve._mulA(s)))),
                                (r = u.redMul(c)))
                            : ((t = i.redMul(c).redMul(o.redSub(s))),
                                (r = this.curve._mulC(u).redMul(c))),
                        this.curve.point(p, t, r)
                    )
                }),
                (c.prototype.add = function (e) {
                    return this.isInfinity()
                        ? e
                        : e.isInfinity()
                            ? this
                            : this.curve.extended
                                ? this._extAdd(e)
                                : this._projAdd(e)
                }),
                (c.prototype.mul = function (e) {
                    return this._hasDoubles(e)
                        ? this.curve._fixedNafMul(this, e)
                        : this.curve._wnafMul(this, e)
                }),
                (c.prototype.mulAdd = function (e, t, r) {
                    return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !1)
                }),
                (c.prototype.jmulAdd = function (e, t, r) {
                    return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !0)
                }),
                (c.prototype.normalize = function () {
                    if (this.zOne) return this
                    var e = this.z.redInvm()
                    return (
                        (this.x = this.x.redMul(e)),
                        (this.y = this.y.redMul(e)),
                        this.t && (this.t = this.t.redMul(e)),
                        (this.z = this.curve.one),
                        (this.zOne = !0),
                        this
                    )
                }),
                (c.prototype.neg = function () {
                    return this.curve.point(
                        this.x.redNeg(),
                        this.y,
                        this.z,
                        this.t && this.t.redNeg()
                    )
                }),
                (c.prototype.getX = function () {
                    return this.normalize(), this.x.fromRed()
                }),
                (c.prototype.getY = function () {
                    return this.normalize(), this.y.fromRed()
                }),
                (c.prototype.eq = function (e) {
                    return (
                        this === e ||
                        (0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY()))
                    )
                }),
                (c.prototype.eqXToP = function (e) {
                    var t = e.toRed(this.curve.red).redMul(this.z)
                    if (0 === this.x.cmp(t)) return !0
                    for (var r = e.clone(), i = this.curve.redN.redMul(this.z); ;) {
                        if ((r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0)) return !1
                        if ((t.redIAdd(i), 0 === this.x.cmp(t))) return !0
                    }
                }),
                (c.prototype.toP = c.prototype.normalize),
                (c.prototype.mixedAdd = c.prototype.add)
        },
        88254: (e, t, r) => {
            'use strict'
            var i = t
                ; (i.base = r(4918)),
                    (i.short = r(6673)),
                    (i.mont = r(22881)),
                    (i.edwards = r(31138))
        },
        22881: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(35717),
                s = r(4918),
                o = r(80953)
            function a(e) {
                s.call(this, 'mont', e),
                    (this.a = new i(e.a, 16).toRed(this.red)),
                    (this.b = new i(e.b, 16).toRed(this.red)),
                    (this.i4 = new i(4).toRed(this.red).redInvm()),
                    (this.two = new i(2).toRed(this.red)),
                    (this.a24 = this.i4.redMul(this.a.redAdd(this.two)))
            }
            function u(e, t, r) {
                s.BasePoint.call(this, e, 'projective'),
                    null === t && null === r
                        ? ((this.x = this.curve.one), (this.z = this.curve.zero))
                        : ((this.x = new i(t, 16)),
                            (this.z = new i(r, 16)),
                            this.x.red || (this.x = this.x.toRed(this.curve.red)),
                            this.z.red || (this.z = this.z.toRed(this.curve.red)))
            }
            n(a, s),
                (e.exports = a),
                (a.prototype.validate = function (e) {
                    var t = e.normalize().x,
                        r = t.redSqr(),
                        i = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t)
                    return 0 === i.redSqrt().redSqr().cmp(i)
                }),
                n(u, s.BasePoint),
                (a.prototype.decodePoint = function (e, t) {
                    return this.point(o.toArray(e, t), 1)
                }),
                (a.prototype.point = function (e, t) {
                    return new u(this, e, t)
                }),
                (a.prototype.pointFromJSON = function (e) {
                    return u.fromJSON(this, e)
                }),
                (u.prototype.precompute = function () { }),
                (u.prototype._encode = function () {
                    return this.getX().toArray('be', this.curve.p.byteLength())
                }),
                (u.fromJSON = function (e, t) {
                    return new u(e, t[0], t[1] || e.one)
                }),
                (u.prototype.inspect = function () {
                    return this.isInfinity()
                        ? '<EC Point Infinity>'
                        : '<EC Point x: ' +
                        this.x.fromRed().toString(16, 2) +
                        ' z: ' +
                        this.z.fromRed().toString(16, 2) +
                        '>'
                }),
                (u.prototype.isInfinity = function () {
                    return 0 === this.z.cmpn(0)
                }),
                (u.prototype.dbl = function () {
                    var e = this.x.redAdd(this.z).redSqr(),
                        t = this.x.redSub(this.z).redSqr(),
                        r = e.redSub(t),
                        i = e.redMul(t),
                        n = r.redMul(t.redAdd(this.curve.a24.redMul(r)))
                    return this.curve.point(i, n)
                }),
                (u.prototype.add = function () {
                    throw new Error('Not supported on Montgomery curve')
                }),
                (u.prototype.diffAdd = function (e, t) {
                    var r = this.x.redAdd(this.z),
                        i = this.x.redSub(this.z),
                        n = e.x.redAdd(e.z),
                        s = e.x.redSub(e.z).redMul(r),
                        o = n.redMul(i),
                        a = t.z.redMul(s.redAdd(o).redSqr()),
                        u = t.x.redMul(s.redISub(o).redSqr())
                    return this.curve.point(a, u)
                }),
                (u.prototype.mul = function (e) {
                    for (
                        var t = e.clone(),
                        r = this,
                        i = this.curve.point(null, null),
                        n = [];
                        0 !== t.cmpn(0);
                        t.iushrn(1)
                    )
                        n.push(t.andln(1))
                    for (var s = n.length - 1; s >= 0; s--)
                        0 === n[s]
                            ? ((r = r.diffAdd(i, this)), (i = i.dbl()))
                            : ((i = r.diffAdd(i, this)), (r = r.dbl()))
                    return i
                }),
                (u.prototype.mulAdd = function () {
                    throw new Error('Not supported on Montgomery curve')
                }),
                (u.prototype.jumlAdd = function () {
                    throw new Error('Not supported on Montgomery curve')
                }),
                (u.prototype.eq = function (e) {
                    return 0 === this.getX().cmp(e.getX())
                }),
                (u.prototype.normalize = function () {
                    return (
                        (this.x = this.x.redMul(this.z.redInvm())),
                        (this.z = this.curve.one),
                        this
                    )
                }),
                (u.prototype.getX = function () {
                    return this.normalize(), this.x.fromRed()
                })
        },
        6673: (e, t, r) => {
            'use strict'
            var i = r(80953),
                n = r(13550),
                s = r(35717),
                o = r(4918),
                a = i.assert
            function u(e) {
                o.call(this, 'short', e),
                    (this.a = new n(e.a, 16).toRed(this.red)),
                    (this.b = new n(e.b, 16).toRed(this.red)),
                    (this.tinv = this.two.redInvm()),
                    (this.zeroA = 0 === this.a.fromRed().cmpn(0)),
                    (this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3)),
                    (this.endo = this._getEndomorphism(e)),
                    (this._endoWnafT1 = new Array(4)),
                    (this._endoWnafT2 = new Array(4))
            }
            function c(e, t, r, i) {
                o.BasePoint.call(this, e, 'affine'),
                    null === t && null === r
                        ? ((this.x = null), (this.y = null), (this.inf = !0))
                        : ((this.x = new n(t, 16)),
                            (this.y = new n(r, 16)),
                            i &&
                            (this.x.forceRed(this.curve.red),
                                this.y.forceRed(this.curve.red)),
                            this.x.red || (this.x = this.x.toRed(this.curve.red)),
                            this.y.red || (this.y = this.y.toRed(this.curve.red)),
                            (this.inf = !1))
            }
            function d(e, t, r, i) {
                o.BasePoint.call(this, e, 'jacobian'),
                    null === t && null === r && null === i
                        ? ((this.x = this.curve.one),
                            (this.y = this.curve.one),
                            (this.z = new n(0)))
                        : ((this.x = new n(t, 16)),
                            (this.y = new n(r, 16)),
                            (this.z = new n(i, 16))),
                    this.x.red || (this.x = this.x.toRed(this.curve.red)),
                    this.y.red || (this.y = this.y.toRed(this.curve.red)),
                    this.z.red || (this.z = this.z.toRed(this.curve.red)),
                    (this.zOne = this.z === this.curve.one)
            }
            s(u, o),
                (e.exports = u),
                (u.prototype._getEndomorphism = function (e) {
                    if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                        var t, r
                        if (e.beta) t = new n(e.beta, 16).toRed(this.red)
                        else {
                            var i = this._getEndoRoots(this.p)
                            t = (t = i[0].cmp(i[1]) < 0 ? i[0] : i[1]).toRed(this.red)
                        }
                        if (e.lambda) r = new n(e.lambda, 16)
                        else {
                            var s = this._getEndoRoots(this.n)
                            0 === this.g.mul(s[0]).x.cmp(this.g.x.redMul(t))
                                ? (r = s[0])
                                : ((r = s[1]), a(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))))
                        }
                        return {
                            beta: t,
                            lambda: r,
                            basis: e.basis
                                ? e.basis.map(function (e) {
                                    return { a: new n(e.a, 16), b: new n(e.b, 16) }
                                })
                                : this._getEndoBasis(r),
                        }
                    }
                }),
                (u.prototype._getEndoRoots = function (e) {
                    var t = e === this.p ? this.red : n.mont(e),
                        r = new n(2).toRed(t).redInvm(),
                        i = r.redNeg(),
                        s = new n(3).toRed(t).redNeg().redSqrt().redMul(r)
                    return [i.redAdd(s).fromRed(), i.redSub(s).fromRed()]
                }),
                (u.prototype._getEndoBasis = function (e) {
                    for (
                        var t,
                        r,
                        i,
                        s,
                        o,
                        a,
                        u,
                        c,
                        d,
                        p = this.n.ushrn(Math.floor(this.n.bitLength() / 2)),
                        f = e,
                        l = this.n.clone(),
                        h = new n(1),
                        g = new n(0),
                        y = new n(0),
                        m = new n(1),
                        v = 0;
                        0 !== f.cmpn(0);

                    ) {
                        var b = l.div(f)
                            ; (c = l.sub(b.mul(f))), (d = y.sub(b.mul(h)))
                        var w = m.sub(b.mul(g))
                        if (!i && c.cmp(p) < 0)
                            (t = u.neg()), (r = h), (i = c.neg()), (s = d)
                        else if (i && 2 == ++v) break
                            ; (u = c), (l = f), (f = c), (y = h), (h = d), (m = g), (g = w)
                    }
                    ; (o = c.neg()), (a = d)
                    var E = i.sqr().add(s.sqr())
                    return (
                        o.sqr().add(a.sqr()).cmp(E) >= 0 && ((o = t), (a = r)),
                        i.negative && ((i = i.neg()), (s = s.neg())),
                        o.negative && ((o = o.neg()), (a = a.neg())),
                        [
                            { a: i, b: s },
                            { a: o, b: a },
                        ]
                    )
                }),
                (u.prototype._endoSplit = function (e) {
                    var t = this.endo.basis,
                        r = t[0],
                        i = t[1],
                        n = i.b.mul(e).divRound(this.n),
                        s = r.b.neg().mul(e).divRound(this.n),
                        o = n.mul(r.a),
                        a = s.mul(i.a),
                        u = n.mul(r.b),
                        c = s.mul(i.b)
                    return { k1: e.sub(o).sub(a), k2: u.add(c).neg() }
                }),
                (u.prototype.pointFromX = function (e, t) {
                    ; (e = new n(e, 16)).red || (e = e.toRed(this.red))
                    var r = e
                        .redSqr()
                        .redMul(e)
                        .redIAdd(e.redMul(this.a))
                        .redIAdd(this.b),
                        i = r.redSqrt()
                    if (0 !== i.redSqr().redSub(r).cmp(this.zero))
                        throw new Error('invalid point')
                    var s = i.fromRed().isOdd()
                    return ((t && !s) || (!t && s)) && (i = i.redNeg()), this.point(e, i)
                }),
                (u.prototype.validate = function (e) {
                    if (e.inf) return !0
                    var t = e.x,
                        r = e.y,
                        i = this.a.redMul(t),
                        n = t.redSqr().redMul(t).redIAdd(i).redIAdd(this.b)
                    return 0 === r.redSqr().redISub(n).cmpn(0)
                }),
                (u.prototype._endoWnafMulAdd = function (e, t, r) {
                    for (
                        var i = this._endoWnafT1, n = this._endoWnafT2, s = 0;
                        s < e.length;
                        s++
                    ) {
                        var o = this._endoSplit(t[s]),
                            a = e[s],
                            u = a._getBeta()
                        o.k1.negative && (o.k1.ineg(), (a = a.neg(!0))),
                            o.k2.negative && (o.k2.ineg(), (u = u.neg(!0))),
                            (i[2 * s] = a),
                            (i[2 * s + 1] = u),
                            (n[2 * s] = o.k1),
                            (n[2 * s + 1] = o.k2)
                    }
                    for (
                        var c = this._wnafMulAdd(1, i, n, 2 * s, r), d = 0;
                        d < 2 * s;
                        d++
                    )
                        (i[d] = null), (n[d] = null)
                    return c
                }),
                s(c, o.BasePoint),
                (u.prototype.point = function (e, t, r) {
                    return new c(this, e, t, r)
                }),
                (u.prototype.pointFromJSON = function (e, t) {
                    return c.fromJSON(this, e, t)
                }),
                (c.prototype._getBeta = function () {
                    if (this.curve.endo) {
                        var e = this.precomputed
                        if (e && e.beta) return e.beta
                        var t = this.curve.point(
                            this.x.redMul(this.curve.endo.beta),
                            this.y
                        )
                        if (e) {
                            var r = this.curve,
                                i = function (e) {
                                    return r.point(e.x.redMul(r.endo.beta), e.y)
                                }
                                ; (e.beta = t),
                                    (t.precomputed = {
                                        beta: null,
                                        naf: e.naf && { wnd: e.naf.wnd, points: e.naf.points.map(i) },
                                        doubles: e.doubles && {
                                            step: e.doubles.step,
                                            points: e.doubles.points.map(i),
                                        },
                                    })
                        }
                        return t
                    }
                }),
                (c.prototype.toJSON = function () {
                    return this.precomputed
                        ? [
                            this.x,
                            this.y,
                            this.precomputed && {
                                doubles: this.precomputed.doubles && {
                                    step: this.precomputed.doubles.step,
                                    points: this.precomputed.doubles.points.slice(1),
                                },
                                naf: this.precomputed.naf && {
                                    wnd: this.precomputed.naf.wnd,
                                    points: this.precomputed.naf.points.slice(1),
                                },
                            },
                        ]
                        : [this.x, this.y]
                }),
                (c.fromJSON = function (e, t, r) {
                    'string' == typeof t && (t = JSON.parse(t))
                    var i = e.point(t[0], t[1], r)
                    if (!t[2]) return i
                    function n(t) {
                        return e.point(t[0], t[1], r)
                    }
                    var s = t[2]
                    return (
                        (i.precomputed = {
                            beta: null,
                            doubles: s.doubles && {
                                step: s.doubles.step,
                                points: [i].concat(s.doubles.points.map(n)),
                            },
                            naf: s.naf && {
                                wnd: s.naf.wnd,
                                points: [i].concat(s.naf.points.map(n)),
                            },
                        }),
                        i
                    )
                }),
                (c.prototype.inspect = function () {
                    return this.isInfinity()
                        ? '<EC Point Infinity>'
                        : '<EC Point x: ' +
                        this.x.fromRed().toString(16, 2) +
                        ' y: ' +
                        this.y.fromRed().toString(16, 2) +
                        '>'
                }),
                (c.prototype.isInfinity = function () {
                    return this.inf
                }),
                (c.prototype.add = function (e) {
                    if (this.inf) return e
                    if (e.inf) return this
                    if (this.eq(e)) return this.dbl()
                    if (this.neg().eq(e)) return this.curve.point(null, null)
                    if (0 === this.x.cmp(e.x)) return this.curve.point(null, null)
                    var t = this.y.redSub(e.y)
                    0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()))
                    var r = t.redSqr().redISub(this.x).redISub(e.x),
                        i = t.redMul(this.x.redSub(r)).redISub(this.y)
                    return this.curve.point(r, i)
                }),
                (c.prototype.dbl = function () {
                    if (this.inf) return this
                    var e = this.y.redAdd(this.y)
                    if (0 === e.cmpn(0)) return this.curve.point(null, null)
                    var t = this.curve.a,
                        r = this.x.redSqr(),
                        i = e.redInvm(),
                        n = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(i),
                        s = n.redSqr().redISub(this.x.redAdd(this.x)),
                        o = n.redMul(this.x.redSub(s)).redISub(this.y)
                    return this.curve.point(s, o)
                }),
                (c.prototype.getX = function () {
                    return this.x.fromRed()
                }),
                (c.prototype.getY = function () {
                    return this.y.fromRed()
                }),
                (c.prototype.mul = function (e) {
                    return (
                        (e = new n(e, 16)),
                        this.isInfinity()
                            ? this
                            : this._hasDoubles(e)
                                ? this.curve._fixedNafMul(this, e)
                                : this.curve.endo
                                    ? this.curve._endoWnafMulAdd([this], [e])
                                    : this.curve._wnafMul(this, e)
                    )
                }),
                (c.prototype.mulAdd = function (e, t, r) {
                    var i = [this, t],
                        n = [e, r]
                    return this.curve.endo
                        ? this.curve._endoWnafMulAdd(i, n)
                        : this.curve._wnafMulAdd(1, i, n, 2)
                }),
                (c.prototype.jmulAdd = function (e, t, r) {
                    var i = [this, t],
                        n = [e, r]
                    return this.curve.endo
                        ? this.curve._endoWnafMulAdd(i, n, !0)
                        : this.curve._wnafMulAdd(1, i, n, 2, !0)
                }),
                (c.prototype.eq = function (e) {
                    return (
                        this === e ||
                        (this.inf === e.inf &&
                            (this.inf || (0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y))))
                    )
                }),
                (c.prototype.neg = function (e) {
                    if (this.inf) return this
                    var t = this.curve.point(this.x, this.y.redNeg())
                    if (e && this.precomputed) {
                        var r = this.precomputed,
                            i = function (e) {
                                return e.neg()
                            }
                        t.precomputed = {
                            naf: r.naf && { wnd: r.naf.wnd, points: r.naf.points.map(i) },
                            doubles: r.doubles && {
                                step: r.doubles.step,
                                points: r.doubles.points.map(i),
                            },
                        }
                    }
                    return t
                }),
                (c.prototype.toJ = function () {
                    return this.inf
                        ? this.curve.jpoint(null, null, null)
                        : this.curve.jpoint(this.x, this.y, this.curve.one)
                }),
                s(d, o.BasePoint),
                (u.prototype.jpoint = function (e, t, r) {
                    return new d(this, e, t, r)
                }),
                (d.prototype.toP = function () {
                    if (this.isInfinity()) return this.curve.point(null, null)
                    var e = this.z.redInvm(),
                        t = e.redSqr(),
                        r = this.x.redMul(t),
                        i = this.y.redMul(t).redMul(e)
                    return this.curve.point(r, i)
                }),
                (d.prototype.neg = function () {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z)
                }),
                (d.prototype.add = function (e) {
                    if (this.isInfinity()) return e
                    if (e.isInfinity()) return this
                    var t = e.z.redSqr(),
                        r = this.z.redSqr(),
                        i = this.x.redMul(t),
                        n = e.x.redMul(r),
                        s = this.y.redMul(t.redMul(e.z)),
                        o = e.y.redMul(r.redMul(this.z)),
                        a = i.redSub(n),
                        u = s.redSub(o)
                    if (0 === a.cmpn(0))
                        return 0 !== u.cmpn(0)
                            ? this.curve.jpoint(null, null, null)
                            : this.dbl()
                    var c = a.redSqr(),
                        d = c.redMul(a),
                        p = i.redMul(c),
                        f = u.redSqr().redIAdd(d).redISub(p).redISub(p),
                        l = u.redMul(p.redISub(f)).redISub(s.redMul(d)),
                        h = this.z.redMul(e.z).redMul(a)
                    return this.curve.jpoint(f, l, h)
                }),
                (d.prototype.mixedAdd = function (e) {
                    if (this.isInfinity()) return e.toJ()
                    if (e.isInfinity()) return this
                    var t = this.z.redSqr(),
                        r = this.x,
                        i = e.x.redMul(t),
                        n = this.y,
                        s = e.y.redMul(t).redMul(this.z),
                        o = r.redSub(i),
                        a = n.redSub(s)
                    if (0 === o.cmpn(0))
                        return 0 !== a.cmpn(0)
                            ? this.curve.jpoint(null, null, null)
                            : this.dbl()
                    var u = o.redSqr(),
                        c = u.redMul(o),
                        d = r.redMul(u),
                        p = a.redSqr().redIAdd(c).redISub(d).redISub(d),
                        f = a.redMul(d.redISub(p)).redISub(n.redMul(c)),
                        l = this.z.redMul(o)
                    return this.curve.jpoint(p, f, l)
                }),
                (d.prototype.dblp = function (e) {
                    if (0 === e) return this
                    if (this.isInfinity()) return this
                    if (!e) return this.dbl()
                    var t
                    if (this.curve.zeroA || this.curve.threeA) {
                        var r = this
                        for (t = 0; t < e; t++) r = r.dbl()
                        return r
                    }
                    var i = this.curve.a,
                        n = this.curve.tinv,
                        s = this.x,
                        o = this.y,
                        a = this.z,
                        u = a.redSqr().redSqr(),
                        c = o.redAdd(o)
                    for (t = 0; t < e; t++) {
                        var d = s.redSqr(),
                            p = c.redSqr(),
                            f = p.redSqr(),
                            l = d.redAdd(d).redIAdd(d).redIAdd(i.redMul(u)),
                            h = s.redMul(p),
                            g = l.redSqr().redISub(h.redAdd(h)),
                            y = h.redISub(g),
                            m = l.redMul(y)
                        m = m.redIAdd(m).redISub(f)
                        var v = c.redMul(a)
                        t + 1 < e && (u = u.redMul(f)), (s = g), (a = v), (c = m)
                    }
                    return this.curve.jpoint(s, c.redMul(n), a)
                }),
                (d.prototype.dbl = function () {
                    return this.isInfinity()
                        ? this
                        : this.curve.zeroA
                            ? this._zeroDbl()
                            : this.curve.threeA
                                ? this._threeDbl()
                                : this._dbl()
                }),
                (d.prototype._zeroDbl = function () {
                    var e, t, r
                    if (this.zOne) {
                        var i = this.x.redSqr(),
                            n = this.y.redSqr(),
                            s = n.redSqr(),
                            o = this.x.redAdd(n).redSqr().redISub(i).redISub(s)
                        o = o.redIAdd(o)
                        var a = i.redAdd(i).redIAdd(i),
                            u = a.redSqr().redISub(o).redISub(o),
                            c = s.redIAdd(s)
                            ; (c = (c = c.redIAdd(c)).redIAdd(c)),
                                (e = u),
                                (t = a.redMul(o.redISub(u)).redISub(c)),
                                (r = this.y.redAdd(this.y))
                    } else {
                        var d = this.x.redSqr(),
                            p = this.y.redSqr(),
                            f = p.redSqr(),
                            l = this.x.redAdd(p).redSqr().redISub(d).redISub(f)
                        l = l.redIAdd(l)
                        var h = d.redAdd(d).redIAdd(d),
                            g = h.redSqr(),
                            y = f.redIAdd(f)
                            ; (y = (y = y.redIAdd(y)).redIAdd(y)),
                                (e = g.redISub(l).redISub(l)),
                                (t = h.redMul(l.redISub(e)).redISub(y)),
                                (r = (r = this.y.redMul(this.z)).redIAdd(r))
                    }
                    return this.curve.jpoint(e, t, r)
                }),
                (d.prototype._threeDbl = function () {
                    var e, t, r
                    if (this.zOne) {
                        var i = this.x.redSqr(),
                            n = this.y.redSqr(),
                            s = n.redSqr(),
                            o = this.x.redAdd(n).redSqr().redISub(i).redISub(s)
                        o = o.redIAdd(o)
                        var a = i.redAdd(i).redIAdd(i).redIAdd(this.curve.a),
                            u = a.redSqr().redISub(o).redISub(o)
                        e = u
                        var c = s.redIAdd(s)
                            ; (c = (c = c.redIAdd(c)).redIAdd(c)),
                                (t = a.redMul(o.redISub(u)).redISub(c)),
                                (r = this.y.redAdd(this.y))
                    } else {
                        var d = this.z.redSqr(),
                            p = this.y.redSqr(),
                            f = this.x.redMul(p),
                            l = this.x.redSub(d).redMul(this.x.redAdd(d))
                        l = l.redAdd(l).redIAdd(l)
                        var h = f.redIAdd(f),
                            g = (h = h.redIAdd(h)).redAdd(h)
                            ; (e = l.redSqr().redISub(g)),
                                (r = this.y.redAdd(this.z).redSqr().redISub(p).redISub(d))
                        var y = p.redSqr()
                            ; (y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y)),
                                (t = l.redMul(h.redISub(e)).redISub(y))
                    }
                    return this.curve.jpoint(e, t, r)
                }),
                (d.prototype._dbl = function () {
                    var e = this.curve.a,
                        t = this.x,
                        r = this.y,
                        i = this.z,
                        n = i.redSqr().redSqr(),
                        s = t.redSqr(),
                        o = r.redSqr(),
                        a = s.redAdd(s).redIAdd(s).redIAdd(e.redMul(n)),
                        u = t.redAdd(t),
                        c = (u = u.redIAdd(u)).redMul(o),
                        d = a.redSqr().redISub(c.redAdd(c)),
                        p = c.redISub(d),
                        f = o.redSqr()
                    f = (f = (f = f.redIAdd(f)).redIAdd(f)).redIAdd(f)
                    var l = a.redMul(p).redISub(f),
                        h = r.redAdd(r).redMul(i)
                    return this.curve.jpoint(d, l, h)
                }),
                (d.prototype.trpl = function () {
                    if (!this.curve.zeroA) return this.dbl().add(this)
                    var e = this.x.redSqr(),
                        t = this.y.redSqr(),
                        r = this.z.redSqr(),
                        i = t.redSqr(),
                        n = e.redAdd(e).redIAdd(e),
                        s = n.redSqr(),
                        o = this.x.redAdd(t).redSqr().redISub(e).redISub(i),
                        a = (o = (o = (o = o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(
                            s
                        )).redSqr(),
                        u = i.redIAdd(i)
                    u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u)
                    var c = n.redIAdd(o).redSqr().redISub(s).redISub(a).redISub(u),
                        d = t.redMul(c)
                    d = (d = d.redIAdd(d)).redIAdd(d)
                    var p = this.x.redMul(a).redISub(d)
                    p = (p = p.redIAdd(p)).redIAdd(p)
                    var f = this.y.redMul(c.redMul(u.redISub(c)).redISub(o.redMul(a)))
                    f = (f = (f = f.redIAdd(f)).redIAdd(f)).redIAdd(f)
                    var l = this.z.redAdd(o).redSqr().redISub(r).redISub(a)
                    return this.curve.jpoint(p, f, l)
                }),
                (d.prototype.mul = function (e, t) {
                    return (e = new n(e, t)), this.curve._wnafMul(this, e)
                }),
                (d.prototype.eq = function (e) {
                    if ('affine' === e.type) return this.eq(e.toJ())
                    if (this === e) return !0
                    var t = this.z.redSqr(),
                        r = e.z.redSqr()
                    if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1
                    var i = t.redMul(this.z),
                        n = r.redMul(e.z)
                    return 0 === this.y.redMul(n).redISub(e.y.redMul(i)).cmpn(0)
                }),
                (d.prototype.eqXToP = function (e) {
                    var t = this.z.redSqr(),
                        r = e.toRed(this.curve.red).redMul(t)
                    if (0 === this.x.cmp(r)) return !0
                    for (var i = e.clone(), n = this.curve.redN.redMul(t); ;) {
                        if ((i.iadd(this.curve.n), i.cmp(this.curve.p) >= 0)) return !1
                        if ((r.redIAdd(n), 0 === this.x.cmp(r))) return !0
                    }
                }),
                (d.prototype.inspect = function () {
                    return this.isInfinity()
                        ? '<EC JPoint Infinity>'
                        : '<EC JPoint x: ' +
                        this.x.toString(16, 2) +
                        ' y: ' +
                        this.y.toString(16, 2) +
                        ' z: ' +
                        this.z.toString(16, 2) +
                        '>'
                }),
                (d.prototype.isInfinity = function () {
                    return 0 === this.z.cmpn(0)
                })
        },
        45427: (e, t, r) => {
            'use strict'
            var i,
                n = t,
                s = r(33715),
                o = r(88254),
                a = r(80953).assert
            function u(e) {
                'short' === e.type
                    ? (this.curve = new o.short(e))
                    : 'edwards' === e.type
                        ? (this.curve = new o.edwards(e))
                        : (this.curve = new o.mont(e)),
                    (this.g = this.curve.g),
                    (this.n = this.curve.n),
                    (this.hash = e.hash),
                    a(this.g.validate(), 'Invalid curve'),
                    a(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O')
            }
            function c(e, t) {
                Object.defineProperty(n, e, {
                    configurable: !0,
                    enumerable: !0,
                    get: function () {
                        var r = new u(t)
                        return (
                            Object.defineProperty(n, e, {
                                configurable: !0,
                                enumerable: !0,
                                value: r,
                            }),
                            r
                        )
                    },
                })
            }
            ; (n.PresetCurve = u),
                c('p192', {
                    type: 'short',
                    prime: 'p192',
                    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
                    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
                    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
                    hash: s.sha256,
                    gRed: !1,
                    g: [
                        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
                    ],
                }),
                c('p224', {
                    type: 'short',
                    prime: 'p224',
                    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
                    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
                    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
                    hash: s.sha256,
                    gRed: !1,
                    g: [
                        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
                    ],
                }),
                c('p256', {
                    type: 'short',
                    prime: null,
                    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
                    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
                    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
                    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
                    hash: s.sha256,
                    gRed: !1,
                    g: [
                        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
                    ],
                }),
                c('p384', {
                    type: 'short',
                    prime: null,
                    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff',
                    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc',
                    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
                    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
                    hash: s.sha384,
                    gRed: !1,
                    g: [
                        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7',
                        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
                    ],
                }),
                c('p521', {
                    type: 'short',
                    prime: null,
                    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff',
                    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc',
                    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
                    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
                    hash: s.sha512,
                    gRed: !1,
                    g: [
                        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650',
                    ],
                }),
                c('curve25519', {
                    type: 'mont',
                    prime: 'p25519',
                    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                    a: '76d06',
                    b: '1',
                    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                    hash: s.sha256,
                    gRed: !1,
                    g: ['9'],
                }),
                c('ed25519', {
                    type: 'edwards',
                    prime: 'p25519',
                    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                    a: '-1',
                    c: '1',
                    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
                    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                    hash: s.sha256,
                    gRed: !1,
                    g: [
                        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
                        '6666666666666666666666666666666666666666666666666666666666666658',
                    ],
                })
            try {
                i = r(91037)
            } catch (d) {
                i = void 0
            }
            c('secp256k1', {
                type: 'short',
                prime: 'k256',
                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                a: '0',
                b: '7',
                n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
                h: '1',
                hash: s.sha256,
                beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
                lambda:
                    '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
                basis: [
                    {
                        a: '3086d221a7d46bcde86c90e49284eb15',
                        b: '-e4437ed6010e88286f547fa90abfe4c3',
                    },
                    {
                        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                        b: '3086d221a7d46bcde86c90e49284eb15',
                    },
                ],
                gRed: !1,
                g: [
                    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                    i,
                ],
            })
        },
        57954: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(2156),
                s = r(80953),
                o = r(45427),
                a = r(29931),
                u = s.assert,
                c = r(31251),
                d = r(90611)
            function p(e) {
                if (!(this instanceof p)) return new p(e)
                'string' == typeof e &&
                    (u(Object.prototype.hasOwnProperty.call(o, e), 'Unknown curve ' + e),
                        (e = o[e])),
                    e instanceof o.PresetCurve && (e = { curve: e }),
                    (this.curve = e.curve.curve),
                    (this.n = this.curve.n),
                    (this.nh = this.n.ushrn(1)),
                    (this.g = this.curve.g),
                    (this.g = e.curve.g),
                    this.g.precompute(e.curve.n.bitLength() + 1),
                    (this.hash = e.hash || e.curve.hash)
            }
            ; (e.exports = p),
                (p.prototype.keyPair = function (e) {
                    return new c(this, e)
                }),
                (p.prototype.keyFromPrivate = function (e, t) {
                    return c.fromPrivate(this, e, t)
                }),
                (p.prototype.keyFromPublic = function (e, t) {
                    return c.fromPublic(this, e, t)
                }),
                (p.prototype.genKeyPair = function (e) {
                    e || (e = {})
                    for (
                        var t = new n({
                            hash: this.hash,
                            pers: e.pers,
                            persEnc: e.persEnc || 'utf8',
                            entropy: e.entropy || a(this.hash.hmacStrength),
                            entropyEnc: (e.entropy && e.entropyEnc) || 'utf8',
                            nonce: this.n.toArray(),
                        }),
                        r = this.n.byteLength(),
                        s = this.n.sub(new i(2));
                        ;

                    ) {
                        var o = new i(t.generate(r))
                        if (!(o.cmp(s) > 0)) return o.iaddn(1), this.keyFromPrivate(o)
                    }
                }),
                (p.prototype._truncateToN = function (e, t) {
                    var r = 8 * e.byteLength() - this.n.bitLength()
                    return (
                        r > 0 && (e = e.ushrn(r)),
                        !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e
                    )
                }),
                (p.prototype.sign = function (e, t, r, s) {
                    'object' == typeof r && ((s = r), (r = null)),
                        s || (s = {}),
                        (t = this.keyFromPrivate(t, r)),
                        (e = this._truncateToN(new i(e, 16)))
                    for (
                        var o = this.n.byteLength(),
                        a = t.getPrivate().toArray('be', o),
                        u = e.toArray('be', o),
                        c = new n({
                            hash: this.hash,
                            entropy: a,
                            nonce: u,
                            pers: s.pers,
                            persEnc: s.persEnc || 'utf8',
                        }),
                        p = this.n.sub(new i(1)),
                        f = 0;
                        ;
                        f++
                    ) {
                        var l = s.k ? s.k(f) : new i(c.generate(this.n.byteLength()))
                        if (
                            !((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(p) >= 0)
                        ) {
                            var h = this.g.mul(l)
                            if (!h.isInfinity()) {
                                var g = h.getX(),
                                    y = g.umod(this.n)
                                if (0 !== y.cmpn(0)) {
                                    var m = l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e))
                                    if (0 !== (m = m.umod(this.n)).cmpn(0)) {
                                        var v =
                                            (h.getY().isOdd() ? 1 : 0) | (0 !== g.cmp(y) ? 2 : 0)
                                        return (
                                            s.canonical &&
                                            m.cmp(this.nh) > 0 &&
                                            ((m = this.n.sub(m)), (v ^= 1)),
                                            new d({ r: y, s: m, recoveryParam: v })
                                        )
                                    }
                                }
                            }
                        }
                    }
                }),
                (p.prototype.verify = function (e, t, r, n) {
                    ; (e = this._truncateToN(new i(e, 16))), (r = this.keyFromPublic(r, n))
                    var s = (t = new d(t, 'hex')).r,
                        o = t.s
                    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return !1
                    if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1
                    var a,
                        u = o.invm(this.n),
                        c = u.mul(e).umod(this.n),
                        p = u.mul(s).umod(this.n)
                    return this.curve._maxwellTrick
                        ? !(a = this.g.jmulAdd(c, r.getPublic(), p)).isInfinity() &&
                        a.eqXToP(s)
                        : !(a = this.g.mulAdd(c, r.getPublic(), p)).isInfinity() &&
                        0 === a.getX().umod(this.n).cmp(s)
                }),
                (p.prototype.recoverPubKey = function (e, t, r, n) {
                    u((3 & r) === r, 'The recovery param is more than two bits'),
                        (t = new d(t, n))
                    var s = this.n,
                        o = new i(e),
                        a = t.r,
                        c = t.s,
                        p = 1 & r,
                        f = r >> 1
                    if (a.cmp(this.curve.p.umod(this.curve.n)) >= 0 && f)
                        throw new Error('Unable to find sencond key candinate')
                    a = f
                        ? this.curve.pointFromX(a.add(this.curve.n), p)
                        : this.curve.pointFromX(a, p)
                    var l = t.r.invm(s),
                        h = s.sub(o).mul(l).umod(s),
                        g = c.mul(l).umod(s)
                    return this.g.mulAdd(h, a, g)
                }),
                (p.prototype.getKeyRecoveryParam = function (e, t, r, i) {
                    if (null !== (t = new d(t, i)).recoveryParam) return t.recoveryParam
                    for (var n = 0; n < 4; n++) {
                        var s
                        try {
                            s = this.recoverPubKey(e, t, n)
                        } catch (e) {
                            continue
                        }
                        if (s.eq(r)) return n
                    }
                    throw new Error('Unable to find valid recovery factor')
                })
        },
        31251: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(80953).assert
            function s(e, t) {
                ; (this.ec = e),
                    (this.priv = null),
                    (this.pub = null),
                    t.priv && this._importPrivate(t.priv, t.privEnc),
                    t.pub && this._importPublic(t.pub, t.pubEnc)
            }
            ; (e.exports = s),
                (s.fromPublic = function (e, t, r) {
                    return t instanceof s ? t : new s(e, { pub: t, pubEnc: r })
                }),
                (s.fromPrivate = function (e, t, r) {
                    return t instanceof s ? t : new s(e, { priv: t, privEnc: r })
                }),
                (s.prototype.validate = function () {
                    var e = this.getPublic()
                    return e.isInfinity()
                        ? { result: !1, reason: 'Invalid public key' }
                        : e.validate()
                            ? e.mul(this.ec.curve.n).isInfinity()
                                ? { result: !0, reason: null }
                                : { result: !1, reason: 'Public key * N != O' }
                            : { result: !1, reason: 'Public key is not a point' }
                }),
                (s.prototype.getPublic = function (e, t) {
                    return (
                        'string' == typeof e && ((t = e), (e = null)),
                        this.pub || (this.pub = this.ec.g.mul(this.priv)),
                        t ? this.pub.encode(t, e) : this.pub
                    )
                }),
                (s.prototype.getPrivate = function (e) {
                    return 'hex' === e ? this.priv.toString(16, 2) : this.priv
                }),
                (s.prototype._importPrivate = function (e, t) {
                    ; (this.priv = new i(e, t || 16)),
                        (this.priv = this.priv.umod(this.ec.curve.n))
                }),
                (s.prototype._importPublic = function (e, t) {
                    if (e.x || e.y)
                        return (
                            'mont' === this.ec.curve.type
                                ? n(e.x, 'Need x coordinate')
                                : ('short' !== this.ec.curve.type &&
                                    'edwards' !== this.ec.curve.type) ||
                                n(e.x && e.y, 'Need both x and y coordinate'),
                            void (this.pub = this.ec.curve.point(e.x, e.y))
                        )
                    this.pub = this.ec.curve.decodePoint(e, t)
                }),
                (s.prototype.derive = function (e) {
                    return (
                        e.validate() || n(e.validate(), 'public point not validated'),
                        e.mul(this.priv).getX()
                    )
                }),
                (s.prototype.sign = function (e, t, r) {
                    return this.ec.sign(e, this, t, r)
                }),
                (s.prototype.verify = function (e, t) {
                    return this.ec.verify(e, t, this)
                }),
                (s.prototype.inspect = function () {
                    return (
                        '<Key priv: ' +
                        (this.priv && this.priv.toString(16, 2)) +
                        ' pub: ' +
                        (this.pub && this.pub.inspect()) +
                        ' >'
                    )
                })
        },
        90611: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(80953),
                s = n.assert
            function o(e, t) {
                if (e instanceof o) return e
                this._importDER(e, t) ||
                    (s(e.r && e.s, 'Signature without r or s'),
                        (this.r = new i(e.r, 16)),
                        (this.s = new i(e.s, 16)),
                        void 0 === e.recoveryParam
                            ? (this.recoveryParam = null)
                            : (this.recoveryParam = e.recoveryParam))
            }
            function a() {
                this.place = 0
            }
            function u(e, t) {
                var r = e[t.place++]
                if (!(128 & r)) return r
                var i = 15 & r
                if (0 === i || i > 4) return !1
                for (var n = 0, s = 0, o = t.place; s < i; s++, o++)
                    (n <<= 8), (n |= e[o]), (n >>>= 0)
                return !(n <= 127) && ((t.place = o), n)
            }
            function c(e) {
                for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;)
                    t++
                return 0 === t ? e : e.slice(t)
            }
            function d(e, t) {
                if (t < 128) e.push(t)
                else {
                    var r = 1 + ((Math.log(t) / Math.LN2) >>> 3)
                    for (e.push(128 | r); --r;) e.push((t >>> (r << 3)) & 255)
                    e.push(t)
                }
            }
            ; (e.exports = o),
                (o.prototype._importDER = function (e, t) {
                    e = n.toArray(e, t)
                    var r = new a()
                    if (48 !== e[r.place++]) return !1
                    var s = u(e, r)
                    if (!1 === s) return !1
                    if (s + r.place !== e.length) return !1
                    if (2 !== e[r.place++]) return !1
                    var o = u(e, r)
                    if (!1 === o) return !1
                    var c = e.slice(r.place, o + r.place)
                    if (((r.place += o), 2 !== e[r.place++])) return !1
                    var d = u(e, r)
                    if (!1 === d) return !1
                    if (e.length !== d + r.place) return !1
                    var p = e.slice(r.place, d + r.place)
                    if (0 === c[0]) {
                        if (!(128 & c[1])) return !1
                        c = c.slice(1)
                    }
                    if (0 === p[0]) {
                        if (!(128 & p[1])) return !1
                        p = p.slice(1)
                    }
                    return (
                        (this.r = new i(c)),
                        (this.s = new i(p)),
                        (this.recoveryParam = null),
                        !0
                    )
                }),
                (o.prototype.toDER = function (e) {
                    var t = this.r.toArray(),
                        r = this.s.toArray()
                    for (
                        128 & t[0] && (t = [0].concat(t)),
                        128 & r[0] && (r = [0].concat(r)),
                        t = c(t),
                        r = c(r);
                        !(r[0] || 128 & r[1]);

                    )
                        r = r.slice(1)
                    var i = [2]
                    d(i, t.length), (i = i.concat(t)).push(2), d(i, r.length)
                    var s = i.concat(r),
                        o = [48]
                    return d(o, s.length), (o = o.concat(s)), n.encode(o, e)
                })
        },
        65980: (e, t, r) => {
            'use strict'
            var i = r(33715),
                n = r(45427),
                s = r(80953),
                o = s.assert,
                a = s.parseBytes,
                u = r(79087),
                c = r(23622)
            function d(e) {
                if (
                    (o('ed25519' === e, 'only tested with ed25519 so far'),
                        !(this instanceof d))
                )
                    return new d(e)
                        ; (e = n[e].curve),
                            (this.curve = e),
                            (this.g = e.g),
                            this.g.precompute(e.n.bitLength() + 1),
                            (this.pointClass = e.point().constructor),
                            (this.encodingLength = Math.ceil(e.n.bitLength() / 8)),
                            (this.hash = i.sha512)
            }
            ; (e.exports = d),
                (d.prototype.sign = function (e, t) {
                    e = a(e)
                    var r = this.keyFromSecret(t),
                        i = this.hashInt(r.messagePrefix(), e),
                        n = this.g.mul(i),
                        s = this.encodePoint(n),
                        o = this.hashInt(s, r.pubBytes(), e).mul(r.priv()),
                        u = i.add(o).umod(this.curve.n)
                    return this.makeSignature({ R: n, S: u, Rencoded: s })
                }),
                (d.prototype.verify = function (e, t, r) {
                    ; (e = a(e)), (t = this.makeSignature(t))
                    var i = this.keyFromPublic(r),
                        n = this.hashInt(t.Rencoded(), i.pubBytes(), e),
                        s = this.g.mul(t.S())
                    return t.R().add(i.pub().mul(n)).eq(s)
                }),
                (d.prototype.hashInt = function () {
                    for (var e = this.hash(), t = 0; t < arguments.length; t++)
                        e.update(arguments[t])
                    return s.intFromLE(e.digest()).umod(this.curve.n)
                }),
                (d.prototype.keyFromPublic = function (e) {
                    return u.fromPublic(this, e)
                }),
                (d.prototype.keyFromSecret = function (e) {
                    return u.fromSecret(this, e)
                }),
                (d.prototype.makeSignature = function (e) {
                    return e instanceof c ? e : new c(this, e)
                }),
                (d.prototype.encodePoint = function (e) {
                    var t = e.getY().toArray('le', this.encodingLength)
                    return (t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0), t
                }),
                (d.prototype.decodePoint = function (e) {
                    var t = (e = s.parseBytes(e)).length - 1,
                        r = e.slice(0, t).concat(-129 & e[t]),
                        i = 0 != (128 & e[t]),
                        n = s.intFromLE(r)
                    return this.curve.pointFromY(n, i)
                }),
                (d.prototype.encodeInt = function (e) {
                    return e.toArray('le', this.encodingLength)
                }),
                (d.prototype.decodeInt = function (e) {
                    return s.intFromLE(e)
                }),
                (d.prototype.isPoint = function (e) {
                    return e instanceof this.pointClass
                })
        },
        79087: (e, t, r) => {
            'use strict'
            var i = r(80953),
                n = i.assert,
                s = i.parseBytes,
                o = i.cachedProperty
            function a(e, t) {
                ; (this.eddsa = e),
                    (this._secret = s(t.secret)),
                    e.isPoint(t.pub) ? (this._pub = t.pub) : (this._pubBytes = s(t.pub))
            }
            ; (a.fromPublic = function (e, t) {
                return t instanceof a ? t : new a(e, { pub: t })
            }),
                (a.fromSecret = function (e, t) {
                    return t instanceof a ? t : new a(e, { secret: t })
                }),
                (a.prototype.secret = function () {
                    return this._secret
                }),
                o(a, 'pubBytes', function () {
                    return this.eddsa.encodePoint(this.pub())
                }),
                o(a, 'pub', function () {
                    return this._pubBytes
                        ? this.eddsa.decodePoint(this._pubBytes)
                        : this.eddsa.g.mul(this.priv())
                }),
                o(a, 'privBytes', function () {
                    var e = this.eddsa,
                        t = this.hash(),
                        r = e.encodingLength - 1,
                        i = t.slice(0, e.encodingLength)
                    return (i[0] &= 248), (i[r] &= 127), (i[r] |= 64), i
                }),
                o(a, 'priv', function () {
                    return this.eddsa.decodeInt(this.privBytes())
                }),
                o(a, 'hash', function () {
                    return this.eddsa.hash().update(this.secret()).digest()
                }),
                o(a, 'messagePrefix', function () {
                    return this.hash().slice(this.eddsa.encodingLength)
                }),
                (a.prototype.sign = function (e) {
                    return (
                        n(this._secret, 'KeyPair can only verify'), this.eddsa.sign(e, this)
                    )
                }),
                (a.prototype.verify = function (e, t) {
                    return this.eddsa.verify(e, t, this)
                }),
                (a.prototype.getSecret = function (e) {
                    return (
                        n(this._secret, 'KeyPair is public only'),
                        i.encode(this.secret(), e)
                    )
                }),
                (a.prototype.getPublic = function (e) {
                    return i.encode(this.pubBytes(), e)
                }),
                (e.exports = a)
        },
        23622: (e, t, r) => {
            'use strict'
            var i = r(13550),
                n = r(80953),
                s = n.assert,
                o = n.cachedProperty,
                a = n.parseBytes
            function u(e, t) {
                ; (this.eddsa = e),
                    'object' != typeof t && (t = a(t)),
                    Array.isArray(t) &&
                    (t = {
                        R: t.slice(0, e.encodingLength),
                        S: t.slice(e.encodingLength),
                    }),
                    s(t.R && t.S, 'Signature without R or S'),
                    e.isPoint(t.R) && (this._R = t.R),
                    t.S instanceof i && (this._S = t.S),
                    (this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded),
                    (this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded)
            }
            o(u, 'S', function () {
                return this.eddsa.decodeInt(this.Sencoded())
            }),
                o(u, 'R', function () {
                    return this.eddsa.decodePoint(this.Rencoded())
                }),
                o(u, 'Rencoded', function () {
                    return this.eddsa.encodePoint(this.R())
                }),
                o(u, 'Sencoded', function () {
                    return this.eddsa.encodeInt(this.S())
                }),
                (u.prototype.toBytes = function () {
                    return this.Rencoded().concat(this.Sencoded())
                }),
                (u.prototype.toHex = function () {
                    return n.encode(this.toBytes(), 'hex').toUpperCase()
                }),
                (e.exports = u)
        },
        91037: (e) => {
            e.exports = {
                doubles: {
                    step: 4,
                    points: [
                        [
                            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
                        ],
                        [
                            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
                        ],
                        [
                            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
                        ],
                        [
                            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
                        ],
                        [
                            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
                        ],
                        [
                            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
                        ],
                        [
                            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
                        ],
                        [
                            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
                        ],
                        [
                            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
                        ],
                        [
                            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
                        ],
                        [
                            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
                        ],
                        [
                            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
                        ],
                        [
                            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
                        ],
                        [
                            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
                        ],
                        [
                            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
                        ],
                        [
                            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
                        ],
                        [
                            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
                        ],
                        [
                            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
                        ],
                        [
                            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
                        ],
                        [
                            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
                        ],
                        [
                            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
                        ],
                        [
                            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
                        ],
                        [
                            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
                        ],
                        [
                            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
                        ],
                        [
                            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
                        ],
                        [
                            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
                        ],
                        [
                            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
                        ],
                        [
                            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
                        ],
                        [
                            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
                        ],
                        [
                            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
                        ],
                        [
                            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
                        ],
                        [
                            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
                        ],
                        [
                            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
                        ],
                        [
                            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
                        ],
                        [
                            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
                        ],
                        [
                            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
                        ],
                        [
                            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
                        ],
                        [
                            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
                        ],
                        [
                            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
                        ],
                        [
                            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
                        ],
                        [
                            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
                        ],
                        [
                            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
                        ],
                        [
                            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
                        ],
                        [
                            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
                        ],
                        [
                            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
                        ],
                        [
                            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
                        ],
                        [
                            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
                        ],
                        [
                            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
                        ],
                        [
                            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
                        ],
                        [
                            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
                        ],
                        [
                            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
                        ],
                        [
                            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
                        ],
                        [
                            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
                        ],
                        [
                            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
                        ],
                        [
                            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
                        ],
                        [
                            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
                        ],
                        [
                            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
                        ],
                        [
                            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
                        ],
                        [
                            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
                        ],
                        [
                            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
                        ],
                        [
                            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
                        ],
                        [
                            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
                        ],
                        [
                            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
                        ],
                        [
                            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
                        ],
                        [
                            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
                        ],
                    ],
                },
                naf: {
                    wnd: 7,
                    points: [
                        [
                            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
                        ],
                        [
                            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
                        ],
                        [
                            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
                        ],
                        [
                            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
                        ],
                        [
                            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
                        ],
                        [
                            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
                        ],
                        [
                            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
                        ],
                        [
                            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
                        ],
                        [
                            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
                        ],
                        [
                            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
                        ],
                        [
                            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
                        ],
                        [
                            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
                        ],
                        [
                            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
                        ],
                        [
                            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
                        ],
                        [
                            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
                        ],
                        [
                            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
                        ],
                        [
                            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
                        ],
                        [
                            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
                        ],
                        [
                            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
                        ],
                        [
                            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
                        ],
                        [
                            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
                        ],
                        [
                            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
                        ],
                        [
                            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
                        ],
                        [
                            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
                        ],
                        [
                            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
                        ],
                        [
                            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
                        ],
                        [
                            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
                        ],
                        [
                            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
                        ],
                        [
                            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
                        ],
                        [
                            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
                        ],
                        [
                            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
                        ],
                        [
                            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
                        ],
                        [
                            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
                        ],
                        [
                            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
                        ],
                        [
                            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
                        ],
                        [
                            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
                        ],
                        [
                            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
                        ],
                        [
                            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
                        ],
                        [
                            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
                        ],
                        [
                            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
                        ],
                        [
                            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
                        ],
                        [
                            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
                        ],
                        [
                            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
                        ],
                        [
                            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
                        ],
                        [
                            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
                        ],
                        [
                            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
                        ],
                        [
                            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
                        ],
                        [
                            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
                        ],
                        [
                            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
                        ],
                        [
                            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
                        ],
                        [
                            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
                        ],
                        [
                            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
                        ],
                        [
                            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
                        ],
                        [
                            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
                        ],
                        [
                            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
                        ],
                        [
                            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
                        ],
                        [
                            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
                        ],
                        [
                            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
                        ],
                        [
                            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
                        ],
                        [
                            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
                        ],
                        [
                            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
                        ],
                        [
                            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
                        ],
                        [
                            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
                        ],
                        [
                            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
                        ],
                        [
                            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
                        ],
                        [
                            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
                        ],
                        [
                            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
                        ],
                        [
                            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
                        ],
                        [
                            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
                        ],
                        [
                            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
                        ],
                        [
                            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
                        ],
                        [
                            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
                        ],
                        [
                            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
                        ],
                        [
                            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
                        ],
                        [
                            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
                        ],
                        [
                            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
                        ],
                        [
                            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
                        ],
                        [
                            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
                        ],
                        [
                            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
                        ],
                        [
                            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
                        ],
                        [
                            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
                        ],
                        [
                            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
                        ],
                        [
                            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
                        ],
                        [
                            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
                        ],
                        [
                            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
                        ],
                        [
                            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
                        ],
                        [
                            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
                        ],
                        [
                            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
                        ],
                        [
                            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
                        ],
                        [
                            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
                        ],
                        [
                            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
                        ],
                        [
                            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
                        ],
                        [
                            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
                        ],
                        [
                            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
                        ],
                        [
                            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
                        ],
                        [
                            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
                        ],
                        [
                            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
                        ],
                        [
                            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
                        ],
                        [
                            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
                        ],
                        [
                            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
                        ],
                        [
                            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
                        ],
                        [
                            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
                        ],
                        [
                            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
                        ],
                        [
                            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
                        ],
                        [
                            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
                        ],
                        [
                            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
                        ],
                        [
                            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
                        ],
                        [
                            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
                        ],
                        [
                            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
                        ],
                        [
                            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
                        ],
                        [
                            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
                        ],
                        [
                            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
                        ],
                        [
                            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
                        ],
                        [
                            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
                        ],
                        [
                            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
                        ],
                        [
                            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
                        ],
                        [
                            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
                        ],
                        [
                            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
                        ],
                        [
                            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
                        ],
                        [
                            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
                        ],
                        [
                            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
                        ],
                        [
                            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
                        ],
                        [
                            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
                        ],
                        [
                            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
                        ],
                        [
                            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
                        ],
                        [
                            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
                        ],
                        [
                            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
                        ],
                    ],
                },
            }
        },
        80953: (e, t, r) => {
            'use strict'
            var i = t,
                n = r(13550),
                s = r(79746),
                o = r(34504)
                ; (i.assert = s),
                    (i.toArray = o.toArray),
                    (i.zero2 = o.zero2),
                    (i.toHex = o.toHex),
                    (i.encode = o.encode),
                    (i.getNAF = function (e, t, r) {
                        var i = new Array(Math.max(e.bitLength(), r) + 1)
                        i.fill(0)
                        for (var n = 1 << (t + 1), s = e.clone(), o = 0; o < i.length; o++) {
                            var a,
                                u = s.andln(n - 1)
                            s.isOdd()
                                ? ((a = u > (n >> 1) - 1 ? (n >> 1) - u : u), s.isubn(a))
                                : (a = 0),
                                (i[o] = a),
                                s.iushrn(1)
                        }
                        return i
                    }),
                    (i.getJSF = function (e, t) {
                        var r = [[], []]
                            ; (e = e.clone()), (t = t.clone())
                        for (var i, n = 0, s = 0; e.cmpn(-n) > 0 || t.cmpn(-s) > 0;) {
                            var o,
                                a,
                                u = (e.andln(3) + n) & 3,
                                c = (t.andln(3) + s) & 3
                            3 === u && (u = -1),
                                3 === c && (c = -1),
                                (o =
                                    0 == (1 & u)
                                        ? 0
                                        : (3 !== (i = (e.andln(7) + n) & 7) && 5 !== i) || 2 !== c
                                            ? u
                                            : -u),
                                r[0].push(o),
                                (a =
                                    0 == (1 & c)
                                        ? 0
                                        : (3 !== (i = (t.andln(7) + s) & 7) && 5 !== i) || 2 !== u
                                            ? c
                                            : -c),
                                r[1].push(a),
                                2 * n === o + 1 && (n = 1 - n),
                                2 * s === a + 1 && (s = 1 - s),
                                e.iushrn(1),
                                t.iushrn(1)
                        }
                        return r
                    }),
                    (i.cachedProperty = function (e, t, r) {
                        var i = '_' + t
                        e.prototype[t] = function () {
                            return void 0 !== this[i] ? this[i] : (this[i] = r.call(this))
                        }
                    }),
                    (i.parseBytes = function (e) {
                        return 'string' == typeof e ? i.toArray(e, 'hex') : e
                    }),
                    (i.intFromLE = function (e) {
                        return new n(e, 'hex', 'le')
                    })
        },
        8925: (e, t, r) => {
            var i = r(3832)
            function n(e, t) {
                i.cipher.registerAlgorithm(e, function () {
                    return new i.aes.Algorithm(e, t)
                })
            }
            r(85649),
                r(61967),
                r(97116),
                (e.exports = i.aes = i.aes || {}),
                (i.aes.startEncrypting = function (e, t, r, i) {
                    var n = g({ key: e, output: r, decrypt: !1, mode: i })
                    return n.start(t), n
                }),
                (i.aes.createEncryptionCipher = function (e, t) {
                    return g({ key: e, output: null, decrypt: !1, mode: t })
                }),
                (i.aes.startDecrypting = function (e, t, r, i) {
                    var n = g({ key: e, output: r, decrypt: !0, mode: i })
                    return n.start(t), n
                }),
                (i.aes.createDecryptionCipher = function (e, t) {
                    return g({ key: e, output: null, decrypt: !0, mode: t })
                }),
                (i.aes.Algorithm = function (e, t) {
                    d || f()
                    var r = this
                        ; (r.name = e),
                            (r.mode = new t({
                                blockSize: 16,
                                cipher: {
                                    encrypt: function (e, t) {
                                        return h(r._w, e, t, !1)
                                    },
                                    decrypt: function (e, t) {
                                        return h(r._w, e, t, !0)
                                    },
                                },
                            })),
                            (r._init = !1)
                }),
                (i.aes.Algorithm.prototype.initialize = function (e) {
                    if (!this._init) {
                        var t,
                            r = e.key
                        if (
                            'string' != typeof r ||
                            (16 !== r.length && 24 !== r.length && 32 !== r.length)
                        ) {
                            if (
                                i.util.isArray(r) &&
                                (16 === r.length || 24 === r.length || 32 === r.length)
                            ) {
                                ; (t = r), (r = i.util.createBuffer())
                                for (var n = 0; n < t.length; ++n) r.putByte(t[n])
                            }
                        } else r = i.util.createBuffer(r)
                        if (!i.util.isArray(r)) {
                            ; (t = r), (r = [])
                            var s = t.length()
                            if (16 === s || 24 === s || 32 === s) {
                                s >>>= 2
                                for (n = 0; n < s; ++n) r.push(t.getInt32())
                            }
                        }
                        if (
                            !i.util.isArray(r) ||
                            (4 !== r.length && 6 !== r.length && 8 !== r.length)
                        )
                            throw new Error('Invalid key parameter.')
                        var o = this.mode.name,
                            a = -1 !== ['CFB', 'OFB', 'CTR', 'GCM'].indexOf(o)
                            ; (this._w = l(r, e.decrypt && !a)), (this._init = !0)
                    }
                }),
                (i.aes._expandKey = function (e, t) {
                    return d || f(), l(e, t)
                }),
                (i.aes._updateBlock = h),
                n('AES-ECB', i.cipher.modes.ecb),
                n('AES-CBC', i.cipher.modes.cbc),
                n('AES-CFB', i.cipher.modes.cfb),
                n('AES-OFB', i.cipher.modes.ofb),
                n('AES-CTR', i.cipher.modes.ctr),
                n('AES-GCM', i.cipher.modes.gcm)
            var s,
                o,
                a,
                u,
                c,
                d = !1,
                p = 4
            function f() {
                ; (d = !0), (a = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54])
                for (var e = new Array(256), t = 0; t < 128; ++t)
                    (e[t] = t << 1), (e[t + 128] = ((t + 128) << 1) ^ 283)
                        ; (s = new Array(256)),
                            (o = new Array(256)),
                            (u = new Array(4)),
                            (c = new Array(4))
                for (t = 0; t < 4; ++t) (u[t] = new Array(256)), (c[t] = new Array(256))
                var r,
                    i,
                    n,
                    p,
                    f,
                    l,
                    h,
                    g = 0,
                    y = 0
                for (t = 0; t < 256; ++t) {
                    ; (p =
                        ((p = y ^ (y << 1) ^ (y << 2) ^ (y << 3) ^ (y << 4)) >> 8) ^
                        (255 & p) ^
                        99),
                        (s[g] = p),
                        (o[p] = g),
                        (l = ((f = e[p]) << 24) ^ (p << 16) ^ (p << 8) ^ p ^ f),
                        (h =
                            (((r = e[g]) ^ (i = e[r]) ^ (n = e[i])) << 24) ^
                            ((g ^ n) << 16) ^
                            ((g ^ i ^ n) << 8) ^
                            g ^
                            r ^
                            n)
                    for (var m = 0; m < 4; ++m)
                        (u[m][g] = l),
                            (c[m][p] = h),
                            (l = (l << 24) | (l >>> 8)),
                            (h = (h << 24) | (h >>> 8))
                    0 === g ? (g = y = 1) : ((g = r ^ e[e[e[r ^ n]]]), (y ^= e[e[y]]))
                }
            }
            function l(e, t) {
                for (
                    var r,
                    i = e.slice(0),
                    n = 1,
                    o = i.length,
                    u = p * (o + 6 + 1),
                    d = o;
                    d < u;
                    ++d
                )
                    (r = i[d - 1]),
                        d % o == 0
                            ? ((r =
                                (s[(r >>> 16) & 255] << 24) ^
                                (s[(r >>> 8) & 255] << 16) ^
                                (s[255 & r] << 8) ^
                                s[r >>> 24] ^
                                (a[n] << 24)),
                                n++)
                            : o > 6 &&
                            d % o == 4 &&
                            (r =
                                (s[r >>> 24] << 24) ^
                                (s[(r >>> 16) & 255] << 16) ^
                                (s[(r >>> 8) & 255] << 8) ^
                                s[255 & r]),
                        (i[d] = i[d - o] ^ r)
                if (t) {
                    for (
                        var f,
                        l = c[0],
                        h = c[1],
                        g = c[2],
                        y = c[3],
                        m = i.slice(0),
                        v = ((d = 0), (u = i.length) - p);
                        d < u;
                        d += p, v -= p
                    )
                        if (0 === d || d === u - p)
                            (m[d] = i[v]),
                                (m[d + 1] = i[v + 3]),
                                (m[d + 2] = i[v + 2]),
                                (m[d + 3] = i[v + 1])
                        else
                            for (var b = 0; b < p; ++b)
                                (f = i[v + b]),
                                    (m[d + (3 & -b)] =
                                        l[s[f >>> 24]] ^
                                        h[s[(f >>> 16) & 255]] ^
                                        g[s[(f >>> 8) & 255]] ^
                                        y[s[255 & f]])
                    i = m
                }
                return i
            }
            function h(e, t, r, i) {
                var n,
                    a,
                    d,
                    p,
                    f,
                    l,
                    h,
                    g,
                    y,
                    m,
                    v,
                    b,
                    w = e.length / 4 - 1
                i
                    ? ((n = c[0]), (a = c[1]), (d = c[2]), (p = c[3]), (f = o))
                    : ((n = u[0]), (a = u[1]), (d = u[2]), (p = u[3]), (f = s)),
                    (l = t[0] ^ e[0]),
                    (h = t[i ? 3 : 1] ^ e[1]),
                    (g = t[2] ^ e[2]),
                    (y = t[i ? 1 : 3] ^ e[3])
                for (var E = 3, I = 1; I < w; ++I)
                    (m =
                        n[l >>> 24] ^
                        a[(h >>> 16) & 255] ^
                        d[(g >>> 8) & 255] ^
                        p[255 & y] ^
                        e[++E]),
                        (v =
                            n[h >>> 24] ^
                            a[(g >>> 16) & 255] ^
                            d[(y >>> 8) & 255] ^
                            p[255 & l] ^
                            e[++E]),
                        (b =
                            n[g >>> 24] ^
                            a[(y >>> 16) & 255] ^
                            d[(l >>> 8) & 255] ^
                            p[255 & h] ^
                            e[++E]),
                        (y =
                            n[y >>> 24] ^
                            a[(l >>> 16) & 255] ^
                            d[(h >>> 8) & 255] ^
                            p[255 & g] ^
                            e[++E]),
                        (l = m),
                        (h = v),
                        (g = b)
                        ; (r[0] =
                            (f[l >>> 24] << 24) ^
                            (f[(h >>> 16) & 255] << 16) ^
                            (f[(g >>> 8) & 255] << 8) ^
                            f[255 & y] ^
                            e[++E]),
                            (r[i ? 3 : 1] =
                                (f[h >>> 24] << 24) ^
                                (f[(g >>> 16) & 255] << 16) ^
                                (f[(y >>> 8) & 255] << 8) ^
                                f[255 & l] ^
                                e[++E]),
                            (r[2] =
                                (f[g >>> 24] << 24) ^
                                (f[(y >>> 16) & 255] << 16) ^
                                (f[(l >>> 8) & 255] << 8) ^
                                f[255 & h] ^
                                e[++E]),
                            (r[i ? 1 : 3] =
                                (f[y >>> 24] << 24) ^
                                (f[(l >>> 16) & 255] << 16) ^
                                (f[(h >>> 8) & 255] << 8) ^
                                f[255 & g] ^
                                e[++E])
            }
            function g(e) {
                var t,
                    r = 'AES-' + ((e = e || {}).mode || 'CBC').toUpperCase(),
                    n = (t = e.decrypt
                        ? i.cipher.createDecipher(r, e.key)
                        : i.cipher.createCipher(r, e.key)).start
                return (
                    (t.start = function (e, r) {
                        var s = null
                        r instanceof i.util.ByteBuffer && ((s = r), (r = {})),
                            ((r = r || {}).output = s),
                            (r.iv = e),
                            n.call(t, r)
                    }),
                    t
                )
            }
        },
        26164: (e, t, r) => {
            var i = r(3832)
            r(8925), r(84311)
            var n = (e.exports = i.tls)
            function s(e, t, r) {
                var s = t.entity === i.tls.ConnectionEnd.client
                    ; (e.read.cipherState = {
                        init: !1,
                        cipher: i.cipher.createDecipher(
                            'AES-CBC',
                            s ? r.keys.server_write_key : r.keys.client_write_key
                        ),
                        iv: s ? r.keys.server_write_IV : r.keys.client_write_IV,
                    }),
                        (e.write.cipherState = {
                            init: !1,
                            cipher: i.cipher.createCipher(
                                'AES-CBC',
                                s ? r.keys.client_write_key : r.keys.server_write_key
                            ),
                            iv: s ? r.keys.client_write_IV : r.keys.server_write_IV,
                        }),
                        (e.read.cipherFunction = c),
                        (e.write.cipherFunction = o),
                        (e.read.macLength = e.write.macLength = r.mac_length),
                        (e.read.macFunction = e.write.macFunction = n.hmac_sha1)
            }
            function o(e, t) {
                var r,
                    s = !1,
                    o = t.macFunction(t.macKey, t.sequenceNumber, e)
                e.fragment.putBytes(o),
                    t.updateSequenceNumber(),
                    (r =
                        e.version.minor === n.Versions.TLS_1_0.minor
                            ? t.cipherState.init
                                ? null
                                : t.cipherState.iv
                            : i.random.getBytesSync(16)),
                    (t.cipherState.init = !0)
                var u = t.cipherState.cipher
                return (
                    u.start({ iv: r }),
                    e.version.minor >= n.Versions.TLS_1_1.minor && u.output.putBytes(r),
                    u.update(e.fragment),
                    u.finish(a) &&
                    ((e.fragment = u.output),
                        (e.length = e.fragment.length()),
                        (s = !0)),
                    s
                )
            }
            function a(e, t, r) {
                if (!r) {
                    var i = e - (t.length() % e)
                    t.fillWithByte(i - 1, i)
                }
                return !0
            }
            function u(e, t, r) {
                var i = !0
                if (r) {
                    for (var n = t.length(), s = t.last(), o = n - 1 - s; o < n - 1; ++o)
                        i = i && t.at(o) == s
                    i && t.truncate(s + 1)
                }
                return i
            }
            function c(e, t) {
                var r,
                    s = !1
                    ; (r =
                        e.version.minor === n.Versions.TLS_1_0.minor
                            ? t.cipherState.init
                                ? null
                                : t.cipherState.iv
                            : e.fragment.getBytes(16)),
                        (t.cipherState.init = !0)
                var o = t.cipherState.cipher
                o.start({ iv: r }), o.update(e.fragment), (s = o.finish(u))
                var a = t.macLength,
                    c = i.random.getBytesSync(a),
                    d = o.output.length()
                d >= a
                    ? ((e.fragment = o.output.getBytes(d - a)),
                        (c = o.output.getBytes(a)))
                    : (e.fragment = o.output.getBytes()),
                    (e.fragment = i.util.createBuffer(e.fragment)),
                    (e.length = e.fragment.length())
                var p = t.macFunction(t.macKey, t.sequenceNumber, e)
                return (
                    t.updateSequenceNumber(),
                    (s =
                        (function (e, t, r) {
                            var n = i.hmac.create()
                            return (
                                n.start('SHA1', e),
                                n.update(t),
                                (t = n.digest().getBytes()),
                                n.start(null, null),
                                n.update(r),
                                (r = n.digest().getBytes()),
                                t === r
                            )
                        })(t.macKey, c, p) && s),
                    s
                )
            }
            ; (n.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA = {
                id: [0, 47],
                name: 'TLS_RSA_WITH_AES_128_CBC_SHA',
                initSecurityParameters: function (e) {
                    ; (e.bulk_cipher_algorithm = n.BulkCipherAlgorithm.aes),
                        (e.cipher_type = n.CipherType.block),
                        (e.enc_key_length = 16),
                        (e.block_length = 16),
                        (e.fixed_iv_length = 16),
                        (e.record_iv_length = 16),
                        (e.mac_algorithm = n.MACAlgorithm.hmac_sha1),
                        (e.mac_length = 20),
                        (e.mac_key_length = 20)
                },
                initConnectionState: s,
            }),
                (n.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA = {
                    id: [0, 53],
                    name: 'TLS_RSA_WITH_AES_256_CBC_SHA',
                    initSecurityParameters: function (e) {
                        ; (e.bulk_cipher_algorithm = n.BulkCipherAlgorithm.aes),
                            (e.cipher_type = n.CipherType.block),
                            (e.enc_key_length = 32),
                            (e.block_length = 16),
                            (e.fixed_iv_length = 16),
                            (e.record_iv_length = 16),
                            (e.mac_algorithm = n.MACAlgorithm.hmac_sha1),
                            (e.mac_length = 20),
                            (e.mac_key_length = 20)
                    },
                    initConnectionState: s,
                })
        },
        59205: (e, t, r) => {
            var i = r(3832)
            r(3068)
            var n = i.asn1
                ; (t.privateKeyValidator = {
                    name: 'PrivateKeyInfo',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'PrivateKeyInfo.version',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyVersion',
                        },
                        {
                            name: 'PrivateKeyInfo.privateKeyAlgorithm',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'AlgorithmIdentifier.algorithm',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.OID,
                                    constructed: !1,
                                    capture: 'privateKeyOid',
                                },
                            ],
                        },
                        {
                            name: 'PrivateKeyInfo',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.OCTETSTRING,
                            constructed: !1,
                            capture: 'privateKey',
                        },
                    ],
                }),
                    (t.publicKeyValidator = {
                        name: 'SubjectPublicKeyInfo',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        captureAsn1: 'subjectPublicKeyInfo',
                        value: [
                            {
                                name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.SEQUENCE,
                                constructed: !0,
                                value: [
                                    {
                                        name: 'AlgorithmIdentifier.algorithm',
                                        tagClass: n.Class.UNIVERSAL,
                                        type: n.Type.OID,
                                        constructed: !1,
                                        capture: 'publicKeyOid',
                                    },
                                ],
                            },
                            {
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.BITSTRING,
                                constructed: !1,
                                composed: !0,
                                captureBitStringValue: 'ed25519PublicKey',
                            },
                        ],
                    })
        },
        3068: (e, t, r) => {
            var i = r(3832)
            r(97116), r(66270)
            var n = (e.exports = i.asn1 = i.asn1 || {})
            function s(e, t, r) {
                if (r > t) {
                    var i = new Error('Too few bytes to parse DER.')
                    throw (
                        ((i.available = e.length()),
                            (i.remaining = t),
                            (i.requested = r),
                            i)
                    )
                }
            }
            ; (n.Class = {
                UNIVERSAL: 0,
                APPLICATION: 64,
                CONTEXT_SPECIFIC: 128,
                PRIVATE: 192,
            }),
                (n.Type = {
                    NONE: 0,
                    BOOLEAN: 1,
                    INTEGER: 2,
                    BITSTRING: 3,
                    OCTETSTRING: 4,
                    NULL: 5,
                    OID: 6,
                    ODESC: 7,
                    EXTERNAL: 8,
                    REAL: 9,
                    ENUMERATED: 10,
                    EMBEDDED: 11,
                    UTF8: 12,
                    ROID: 13,
                    SEQUENCE: 16,
                    SET: 17,
                    PRINTABLESTRING: 19,
                    IA5STRING: 22,
                    UTCTIME: 23,
                    GENERALIZEDTIME: 24,
                    BMPSTRING: 30,
                }),
                (n.create = function (e, t, r, s, o) {
                    if (i.util.isArray(s)) {
                        for (var a = [], u = 0; u < s.length; ++u)
                            void 0 !== s[u] && a.push(s[u])
                        s = a
                    }
                    var c = {
                        tagClass: e,
                        type: t,
                        constructed: r,
                        composed: r || i.util.isArray(s),
                        value: s,
                    }
                    return (
                        o &&
                        'bitStringContents' in o &&
                        ((c.bitStringContents = o.bitStringContents),
                            (c.original = n.copy(c))),
                        c
                    )
                }),
                (n.copy = function (e, t) {
                    var r
                    if (i.util.isArray(e)) {
                        r = []
                        for (var s = 0; s < e.length; ++s) r.push(n.copy(e[s], t))
                        return r
                    }
                    return 'string' == typeof e
                        ? e
                        : ((r = {
                            tagClass: e.tagClass,
                            type: e.type,
                            constructed: e.constructed,
                            composed: e.composed,
                            value: n.copy(e.value, t),
                        }),
                            t &&
                            !t.excludeBitStringContents &&
                            (r.bitStringContents = e.bitStringContents),
                            r)
                }),
                (n.equals = function (e, t, r) {
                    if (i.util.isArray(e)) {
                        if (!i.util.isArray(t)) return !1
                        if (e.length !== t.length) return !1
                        for (var s = 0; s < e.length; ++s)
                            if (!n.equals(e[s], t[s])) return !1
                        return !0
                    }
                    if (typeof e != typeof t) return !1
                    if ('string' == typeof e) return e === t
                    var o =
                        e.tagClass === t.tagClass &&
                        e.type === t.type &&
                        e.constructed === t.constructed &&
                        e.composed === t.composed &&
                        n.equals(e.value, t.value)
                    return (
                        r &&
                        r.includeBitStringContents &&
                        (o = o && e.bitStringContents === t.bitStringContents),
                        o
                    )
                }),
                (n.getBerValueLength = function (e) {
                    var t = e.getByte()
                    if (128 !== t) return 128 & t ? e.getInt((127 & t) << 3) : t
                })
            function o(e, t, r, i) {
                var a
                s(e, t, 2)
                var u = e.getByte()
                t--
                var c = 192 & u,
                    d = 31 & u
                a = e.length()
                var p,
                    f,
                    l = (function (e, t) {
                        var r = e.getByte()
                        if ((t--, 128 !== r)) {
                            var i
                            if (128 & r) {
                                var n = 127 & r
                                s(e, t, n), (i = e.getInt(n << 3))
                            } else i = r
                            if (i < 0) throw new Error('Negative length: ' + i)
                            return i
                        }
                    })(e, t)
                if (((t -= a - e.length()), void 0 !== l && l > t)) {
                    if (i.strict) {
                        var h = new Error('Too few bytes to read ASN.1 value.')
                        throw (
                            ((h.available = e.length()),
                                (h.remaining = t),
                                (h.requested = l),
                                h)
                        )
                    }
                    l = t
                }
                var g = 32 == (32 & u)
                if (g)
                    if (((p = []), void 0 === l))
                        for (; ;) {
                            if ((s(e, t, 2), e.bytes(2) === String.fromCharCode(0, 0))) {
                                e.getBytes(2), (t -= 2)
                                break
                            }
                            ; (a = e.length()),
                                p.push(o(e, t, r + 1, i)),
                                (t -= a - e.length())
                        }
                    else
                        for (; l > 0;)
                            (a = e.length()),
                                p.push(o(e, l, r + 1, i)),
                                (t -= a - e.length()),
                                (l -= a - e.length())
                if (
                    (void 0 === p &&
                        c === n.Class.UNIVERSAL &&
                        d === n.Type.BITSTRING &&
                        (f = e.bytes(l)),
                        void 0 === p &&
                        i.decodeBitStrings &&
                        c === n.Class.UNIVERSAL &&
                        d === n.Type.BITSTRING &&
                        l > 1)
                ) {
                    var y = e.read,
                        m = t,
                        v = 0
                    if (
                        (d === n.Type.BITSTRING && (s(e, t, 1), (v = e.getByte()), t--),
                            0 === v)
                    )
                        try {
                            a = e.length()
                            var b = o(e, t, r + 1, { strict: !0, decodeBitStrings: !0 }),
                                w = a - e.length()
                                ; (t -= w), d == n.Type.BITSTRING && w++
                            var E = b.tagClass
                            w !== l ||
                                (E !== n.Class.UNIVERSAL && E !== n.Class.CONTEXT_SPECIFIC) ||
                                (p = [b])
                        } catch (C) { }
                    void 0 === p && ((e.read = y), (t = m))
                }
                if (void 0 === p) {
                    if (void 0 === l) {
                        if (i.strict)
                            throw new Error(
                                'Non-constructed ASN.1 object of indefinite length.'
                            )
                        l = t
                    }
                    if (d === n.Type.BMPSTRING)
                        for (p = ''; l > 0; l -= 2)
                            s(e, t, 2), (p += String.fromCharCode(e.getInt16())), (t -= 2)
                    else (p = e.getBytes(l)), (t -= l)
                }
                var I = void 0 === f ? null : { bitStringContents: f }
                return n.create(c, d, g, p, I)
            }
            ; (n.fromDer = function (e, t) {
                void 0 === t &&
                    (t = { strict: !0, parseAllBytes: !0, decodeBitStrings: !0 }),
                    'boolean' == typeof t &&
                    (t = { strict: t, parseAllBytes: !0, decodeBitStrings: !0 }),
                    'strict' in t || (t.strict = !0),
                    'parseAllBytes' in t || (t.parseAllBytes = !0),
                    'decodeBitStrings' in t || (t.decodeBitStrings = !0),
                    'string' == typeof e && (e = i.util.createBuffer(e))
                var r = e.length(),
                    n = o(e, e.length(), 0, t)
                if (t.parseAllBytes && 0 !== e.length()) {
                    var s = new Error('Unparsed DER bytes remain after ASN.1 parsing.')
                    throw ((s.byteCount = r), (s.remaining = e.length()), s)
                }
                return n
            }),
                (n.toDer = function (e) {
                    var t = i.util.createBuffer(),
                        r = e.tagClass | e.type,
                        s = i.util.createBuffer(),
                        o = !1
                    if (
                        ('bitStringContents' in e &&
                            ((o = !0), e.original && (o = n.equals(e, e.original))),
                            o)
                    )
                        s.putBytes(e.bitStringContents)
                    else if (e.composed) {
                        e.constructed ? (r |= 32) : s.putByte(0)
                        for (var a = 0; a < e.value.length; ++a)
                            void 0 !== e.value[a] && s.putBuffer(n.toDer(e.value[a]))
                    } else if (e.type === n.Type.BMPSTRING)
                        for (a = 0; a < e.value.length; ++a)
                            s.putInt16(e.value.charCodeAt(a))
                    else
                        e.type === n.Type.INTEGER &&
                            e.value.length > 1 &&
                            ((0 === e.value.charCodeAt(0) &&
                                0 == (128 & e.value.charCodeAt(1))) ||
                                (255 === e.value.charCodeAt(0) &&
                                    128 == (128 & e.value.charCodeAt(1))))
                            ? s.putBytes(e.value.substr(1))
                            : s.putBytes(e.value)
                    if ((t.putByte(r), s.length() <= 127)) t.putByte(127 & s.length())
                    else {
                        var u = s.length(),
                            c = ''
                        do {
                            ; (c += String.fromCharCode(255 & u)), (u >>>= 8)
                        } while (u > 0)
                        t.putByte(128 | c.length)
                        for (a = c.length - 1; a >= 0; --a) t.putByte(c.charCodeAt(a))
                    }
                    return t.putBuffer(s), t
                }),
                (n.oidToDer = function (e) {
                    var t,
                        r,
                        n,
                        s,
                        o = e.split('.'),
                        a = i.util.createBuffer()
                    a.putByte(40 * parseInt(o[0], 10) + parseInt(o[1], 10))
                    for (var u = 2; u < o.length; ++u) {
                        ; (t = !0), (r = []), (n = parseInt(o[u], 10))
                        do {
                            ; (s = 127 & n), (n >>>= 7), t || (s |= 128), r.push(s), (t = !1)
                        } while (n > 0)
                        for (var c = r.length - 1; c >= 0; --c) a.putByte(r[c])
                    }
                    return a
                }),
                (n.derToOid = function (e) {
                    var t
                    'string' == typeof e && (e = i.util.createBuffer(e))
                    var r = e.getByte()
                    t = Math.floor(r / 40) + '.' + (r % 40)
                    for (var n = 0; e.length() > 0;)
                        (n <<= 7),
                            128 & (r = e.getByte())
                                ? (n += 127 & r)
                                : ((t += '.' + (n + r)), (n = 0))
                    return t
                }),
                (n.utcTimeToDate = function (e) {
                    var t = new Date(),
                        r = parseInt(e.substr(0, 2), 10)
                    r = r >= 50 ? 1900 + r : 2e3 + r
                    var i = parseInt(e.substr(2, 2), 10) - 1,
                        n = parseInt(e.substr(4, 2), 10),
                        s = parseInt(e.substr(6, 2), 10),
                        o = parseInt(e.substr(8, 2), 10),
                        a = 0
                    if (e.length > 11) {
                        var u = e.charAt(10),
                            c = 10
                        '+' !== u &&
                            '-' !== u &&
                            ((a = parseInt(e.substr(10, 2), 10)), (c += 2))
                    }
                    if (
                        (t.setUTCFullYear(r, i, n),
                            t.setUTCHours(s, o, a, 0),
                            c && ('+' === (u = e.charAt(c)) || '-' === u))
                    ) {
                        var d =
                            60 * parseInt(e.substr(c + 1, 2), 10) +
                            parseInt(e.substr(c + 4, 2), 10)
                            ; (d *= 6e4), '+' === u ? t.setTime(+t - d) : t.setTime(+t + d)
                    }
                    return t
                }),
                (n.generalizedTimeToDate = function (e) {
                    var t = new Date(),
                        r = parseInt(e.substr(0, 4), 10),
                        i = parseInt(e.substr(4, 2), 10) - 1,
                        n = parseInt(e.substr(6, 2), 10),
                        s = parseInt(e.substr(8, 2), 10),
                        o = parseInt(e.substr(10, 2), 10),
                        a = parseInt(e.substr(12, 2), 10),
                        u = 0,
                        c = 0,
                        d = !1
                    'Z' === e.charAt(e.length - 1) && (d = !0)
                    var p = e.length - 5,
                        f = e.charAt(p)
                        ; ('+' !== f && '-' !== f) ||
                            ((c =
                                60 * parseInt(e.substr(p + 1, 2), 10) +
                                parseInt(e.substr(p + 4, 2), 10)),
                                (c *= 6e4),
                                '+' === f && (c *= -1),
                                (d = !0))
                    return (
                        '.' === e.charAt(14) && (u = 1e3 * parseFloat(e.substr(14), 10)),
                        d
                            ? (t.setUTCFullYear(r, i, n),
                                t.setUTCHours(s, o, a, u),
                                t.setTime(+t + c))
                            : (t.setFullYear(r, i, n), t.setHours(s, o, a, u)),
                        t
                    )
                }),
                (n.dateToUtcTime = function (e) {
                    if ('string' == typeof e) return e
                    var t = '',
                        r = []
                    r.push(('' + e.getUTCFullYear()).substr(2)),
                        r.push('' + (e.getUTCMonth() + 1)),
                        r.push('' + e.getUTCDate()),
                        r.push('' + e.getUTCHours()),
                        r.push('' + e.getUTCMinutes()),
                        r.push('' + e.getUTCSeconds())
                    for (var i = 0; i < r.length; ++i)
                        r[i].length < 2 && (t += '0'), (t += r[i])
                    return (t += 'Z')
                }),
                (n.dateToGeneralizedTime = function (e) {
                    if ('string' == typeof e) return e
                    var t = '',
                        r = []
                    r.push('' + e.getUTCFullYear()),
                        r.push('' + (e.getUTCMonth() + 1)),
                        r.push('' + e.getUTCDate()),
                        r.push('' + e.getUTCHours()),
                        r.push('' + e.getUTCMinutes()),
                        r.push('' + e.getUTCSeconds())
                    for (var i = 0; i < r.length; ++i)
                        r[i].length < 2 && (t += '0'), (t += r[i])
                    return (t += 'Z')
                }),
                (n.integerToDer = function (e) {
                    var t = i.util.createBuffer()
                    if (e >= -128 && e < 128) return t.putSignedInt(e, 8)
                    if (e >= -32768 && e < 32768) return t.putSignedInt(e, 16)
                    if (e >= -8388608 && e < 8388608) return t.putSignedInt(e, 24)
                    if (e >= -2147483648 && e < 2147483648) return t.putSignedInt(e, 32)
                    var r = new Error('Integer too large; max is 32-bits.')
                    throw ((r.integer = e), r)
                }),
                (n.derToInteger = function (e) {
                    'string' == typeof e && (e = i.util.createBuffer(e))
                    var t = 8 * e.length()
                    if (t > 32) throw new Error('Integer too large; max is 32-bits.')
                    return e.getSignedInt(t)
                }),
                (n.validate = function (e, t, r, s) {
                    var o = !1
                    if (
                        (e.tagClass !== t.tagClass && void 0 !== t.tagClass) ||
                        (e.type !== t.type && void 0 !== t.type)
                    )
                        s &&
                            (e.tagClass !== t.tagClass &&
                                s.push(
                                    '[' +
                                    t.name +
                                    '] Expected tag class "' +
                                    t.tagClass +
                                    '", got "' +
                                    e.tagClass +
                                    '"'
                                ),
                                e.type !== t.type &&
                                s.push(
                                    '[' +
                                    t.name +
                                    '] Expected type "' +
                                    t.type +
                                    '", got "' +
                                    e.type +
                                    '"'
                                ))
                    else if (
                        e.constructed === t.constructed ||
                        void 0 === t.constructed
                    ) {
                        if (((o = !0), t.value && i.util.isArray(t.value)))
                            for (var a = 0, u = 0; o && u < t.value.length; ++u)
                                (o = t.value[u].optional || !1),
                                    e.value[a] &&
                                    ((o = n.validate(e.value[a], t.value[u], r, s))
                                        ? ++a
                                        : t.value[u].optional && (o = !0)),
                                    !o &&
                                    s &&
                                    s.push(
                                        '[' +
                                        t.name +
                                        '] Tag class "' +
                                        t.tagClass +
                                        '", type "' +
                                        t.type +
                                        '" expected value length "' +
                                        t.value.length +
                                        '", got "' +
                                        e.value.length +
                                        '"'
                                    )
                        if (o && r)
                            if (
                                (t.capture && (r[t.capture] = e.value),
                                    t.captureAsn1 && (r[t.captureAsn1] = e),
                                    t.captureBitStringContents &&
                                    'bitStringContents' in e &&
                                    (r[t.captureBitStringContents] = e.bitStringContents),
                                    t.captureBitStringValue && 'bitStringContents' in e)
                            )
                                if (e.bitStringContents.length < 2)
                                    r[t.captureBitStringValue] = ''
                                else {
                                    if (0 !== e.bitStringContents.charCodeAt(0))
                                        throw new Error(
                                            'captureBitStringValue only supported for zero unused bits'
                                        )
                                    r[t.captureBitStringValue] = e.bitStringContents.slice(1)
                                }
                    } else
                        s &&
                            s.push(
                                '[' +
                                t.name +
                                '] Expected constructed "' +
                                t.constructed +
                                '", got "' +
                                e.constructed +
                                '"'
                            )
                    return o
                })
            var a = /[^\\u0000-\\u00ff]/
            n.prettyPrint = function (e, t, r) {
                var s = ''
                    ; (r = r || 2), (t = t || 0) > 0 && (s += '\n')
                for (var o = '', u = 0; u < t * r; ++u) o += ' '
                switch (((s += o + 'Tag: '), e.tagClass)) {
                    case n.Class.UNIVERSAL:
                        s += 'Universal:'
                        break
                    case n.Class.APPLICATION:
                        s += 'Application:'
                        break
                    case n.Class.CONTEXT_SPECIFIC:
                        s += 'Context-Specific:'
                        break
                    case n.Class.PRIVATE:
                        s += 'Private:'
                }
                if (e.tagClass === n.Class.UNIVERSAL)
                    switch (((s += e.type), e.type)) {
                        case n.Type.NONE:
                            s += ' (None)'
                            break
                        case n.Type.BOOLEAN:
                            s += ' (Boolean)'
                            break
                        case n.Type.INTEGER:
                            s += ' (Integer)'
                            break
                        case n.Type.BITSTRING:
                            s += ' (Bit string)'
                            break
                        case n.Type.OCTETSTRING:
                            s += ' (Octet string)'
                            break
                        case n.Type.NULL:
                            s += ' (Null)'
                            break
                        case n.Type.OID:
                            s += ' (Object Identifier)'
                            break
                        case n.Type.ODESC:
                            s += ' (Object Descriptor)'
                            break
                        case n.Type.EXTERNAL:
                            s += ' (External or Instance of)'
                            break
                        case n.Type.REAL:
                            s += ' (Real)'
                            break
                        case n.Type.ENUMERATED:
                            s += ' (Enumerated)'
                            break
                        case n.Type.EMBEDDED:
                            s += ' (Embedded PDV)'
                            break
                        case n.Type.UTF8:
                            s += ' (UTF8)'
                            break
                        case n.Type.ROID:
                            s += ' (Relative Object Identifier)'
                            break
                        case n.Type.SEQUENCE:
                            s += ' (Sequence)'
                            break
                        case n.Type.SET:
                            s += ' (Set)'
                            break
                        case n.Type.PRINTABLESTRING:
                            s += ' (Printable String)'
                            break
                        case n.Type.IA5String:
                            s += ' (IA5String (ASCII))'
                            break
                        case n.Type.UTCTIME:
                            s += ' (UTC time)'
                            break
                        case n.Type.GENERALIZEDTIME:
                            s += ' (Generalized time)'
                            break
                        case n.Type.BMPSTRING:
                            s += ' (BMP String)'
                    }
                else s += e.type
                if (
                    ((s += '\n'),
                        (s += o + 'Constructed: ' + e.constructed + '\n'),
                        e.composed)
                ) {
                    var c = 0,
                        d = ''
                    for (u = 0; u < e.value.length; ++u)
                        void 0 !== e.value[u] &&
                            ((c += 1),
                                (d += n.prettyPrint(e.value[u], t + 1, r)),
                                u + 1 < e.value.length && (d += ','))
                    s += o + 'Sub values: ' + c + d
                } else {
                    if (((s += o + 'Value: '), e.type === n.Type.OID)) {
                        var p = n.derToOid(e.value)
                            ; (s += p),
                                i.pki &&
                                i.pki.oids &&
                                p in i.pki.oids &&
                                (s += ' (' + i.pki.oids[p] + ') ')
                    }
                    if (e.type === n.Type.INTEGER)
                        try {
                            s += n.derToInteger(e.value)
                        } catch (l) {
                            s += '0x' + i.util.bytesToHex(e.value)
                        }
                    else if (e.type === n.Type.BITSTRING) {
                        if (
                            (e.value.length > 1
                                ? (s += '0x' + i.util.bytesToHex(e.value.slice(1)))
                                : (s += '(none)'),
                                e.value.length > 0)
                        ) {
                            var f = e.value.charCodeAt(0)
                            1 == f
                                ? (s += ' (1 unused bit shown)')
                                : f > 1 && (s += ' (' + f + ' unused bits shown)')
                        }
                    } else if (e.type === n.Type.OCTETSTRING)
                        a.test(e.value) || (s += '(' + e.value + ') '),
                            (s += '0x' + i.util.bytesToHex(e.value))
                    else if (e.type === n.Type.UTF8)
                        try {
                            s += i.util.decodeUtf8(e.value)
                        } catch (h) {
                            if ('URI malformed' !== h.message) throw h
                            s += '0x' + i.util.bytesToHex(e.value) + ' (malformed UTF8)'
                        }
                    else
                        e.type === n.Type.PRINTABLESTRING || e.type === n.Type.IA5String
                            ? (s += e.value)
                            : a.test(e.value)
                                ? (s += '0x' + i.util.bytesToHex(e.value))
                                : 0 === e.value.length
                                    ? (s += '[null]')
                                    : (s += e.value)
                }
                return s
            }
        },
        78807: (e) => {
            var t = {}
            e.exports = t
            var r = {}
                ; (t.encode = function (e, t, r) {
                    if ('string' != typeof t)
                        throw new TypeError('"alphabet" must be a string.')
                    if (void 0 !== r && 'number' != typeof r)
                        throw new TypeError('"maxline" must be a number.')
                    var i = ''
                    if (e instanceof Uint8Array) {
                        var n = 0,
                            s = t.length,
                            o = t.charAt(0),
                            a = [0]
                        for (n = 0; n < e.length; ++n) {
                            for (var u = 0, c = e[n]; u < a.length; ++u)
                                (c += a[u] << 8), (a[u] = c % s), (c = (c / s) | 0)
                            for (; c > 0;) a.push(c % s), (c = (c / s) | 0)
                        }
                        for (n = 0; 0 === e[n] && n < e.length - 1; ++n) i += o
                        for (n = a.length - 1; n >= 0; --n) i += t[a[n]]
                    } else
                        i = (function (e, t) {
                            var r = 0,
                                i = t.length,
                                n = t.charAt(0),
                                s = [0]
                            for (r = 0; r < e.length(); ++r) {
                                for (var o = 0, a = e.at(r); o < s.length; ++o)
                                    (a += s[o] << 8), (s[o] = a % i), (a = (a / i) | 0)
                                for (; a > 0;) s.push(a % i), (a = (a / i) | 0)
                            }
                            var u = ''
                            for (r = 0; 0 === e.at(r) && r < e.length() - 1; ++r) u += n
                            for (r = s.length - 1; r >= 0; --r) u += t[s[r]]
                            return u
                        })(e, t)
                    if (r) {
                        var d = new RegExp('.{1,' + r + '}', 'g')
                        i = i.match(d).join('\r\n')
                    }
                    return i
                }),
                    (t.decode = function (e, t) {
                        if ('string' != typeof e)
                            throw new TypeError('"input" must be a string.')
                        if ('string' != typeof t)
                            throw new TypeError('"alphabet" must be a string.')
                        var i = r[t]
                        if (!i) {
                            i = r[t] = []
                            for (var n = 0; n < t.length; ++n) i[t.charCodeAt(n)] = n
                        }
                        e = e.replace(/\s/g, '')
                        var s = t.length,
                            o = t.charAt(0),
                            a = [0]
                        for (n = 0; n < e.length; n++) {
                            var u = i[e.charCodeAt(n)]
                            if (void 0 === u) return
                            for (var c = 0, d = u; c < a.length; ++c)
                                (d += a[c] * s), (a[c] = 255 & d), (d >>= 8)
                            for (; d > 0;) a.push(255 & d), (d >>= 8)
                        }
                        for (var p = 0; e[p] === o && p < e.length - 1; ++p) a.push(0)
                        return 'undefined' != typeof Buffer
                            ? Buffer.from(a.reverse())
                            : new Uint8Array(a.reverse())
                    })
        },
        85649: (e, t, r) => {
            var i = r(3832)
            r(97116),
                (e.exports = i.cipher = i.cipher || {}),
                (i.cipher.algorithms = i.cipher.algorithms || {}),
                (i.cipher.createCipher = function (e, t) {
                    var r = e
                    if (
                        ('string' == typeof r &&
                            (r = i.cipher.getAlgorithm(r)) &&
                            (r = r()),
                            !r)
                    )
                        throw new Error('Unsupported algorithm: ' + e)
                    return new i.cipher.BlockCipher({ algorithm: r, key: t, decrypt: !1 })
                }),
                (i.cipher.createDecipher = function (e, t) {
                    var r = e
                    if (
                        ('string' == typeof r &&
                            (r = i.cipher.getAlgorithm(r)) &&
                            (r = r()),
                            !r)
                    )
                        throw new Error('Unsupported algorithm: ' + e)
                    return new i.cipher.BlockCipher({ algorithm: r, key: t, decrypt: !0 })
                }),
                (i.cipher.registerAlgorithm = function (e, t) {
                    ; (e = e.toUpperCase()), (i.cipher.algorithms[e] = t)
                }),
                (i.cipher.getAlgorithm = function (e) {
                    return (e = e.toUpperCase()) in i.cipher.algorithms
                        ? i.cipher.algorithms[e]
                        : null
                })
            var n = (i.cipher.BlockCipher = function (e) {
                ; (this.algorithm = e.algorithm),
                    (this.mode = this.algorithm.mode),
                    (this.blockSize = this.mode.blockSize),
                    (this._finish = !1),
                    (this._input = null),
                    (this.output = null),
                    (this._op = e.decrypt ? this.mode.decrypt : this.mode.encrypt),
                    (this._decrypt = e.decrypt),
                    this.algorithm.initialize(e)
            })
                ; (n.prototype.start = function (e) {
                    e = e || {}
                    var t = {}
                    for (var r in e) t[r] = e[r]
                        ; (t.decrypt = this._decrypt),
                            (this._finish = !1),
                            (this._input = i.util.createBuffer()),
                            (this.output = e.output || i.util.createBuffer()),
                            this.mode.start(t)
                }),
                    (n.prototype.update = function (e) {
                        for (
                            e && this._input.putBuffer(e);
                            !this._op.call(this.mode, this._input, this.output, this._finish) &&
                            !this._finish;

                        );
                        this._input.compact()
                    }),
                    (n.prototype.finish = function (e) {
                        !e ||
                            ('ECB' !== this.mode.name && 'CBC' !== this.mode.name) ||
                            ((this.mode.pad = function (t) {
                                return e(this.blockSize, t, !1)
                            }),
                                (this.mode.unpad = function (t) {
                                    return e(this.blockSize, t, !0)
                                }))
                        var t = {}
                        return (
                            (t.decrypt = this._decrypt),
                            (t.overflow = this._input.length() % this.blockSize),
                            !(
                                !this._decrypt &&
                                this.mode.pad &&
                                !this.mode.pad(this._input, t)
                            ) &&
                            ((this._finish = !0),
                                this.update(),
                                !(
                                    this._decrypt &&
                                    this.mode.unpad &&
                                    !this.mode.unpad(this.output, t)
                                ) &&
                                !(
                                    this.mode.afterFinish &&
                                    !this.mode.afterFinish(this.output, t)
                                ))
                        )
                    })
        },
        61967: (e, t, r) => {
            var i = r(3832)
            r(97116), (i.cipher = i.cipher || {})
            var n = (e.exports = i.cipher.modes = i.cipher.modes || {})
            function s(e, t) {
                if (
                    ('string' == typeof e && (e = i.util.createBuffer(e)),
                        i.util.isArray(e) && e.length > 4)
                ) {
                    var r = e
                    e = i.util.createBuffer()
                    for (var n = 0; n < r.length; ++n) e.putByte(r[n])
                }
                if (e.length() < t)
                    throw new Error(
                        'Invalid IV length; got ' +
                        e.length() +
                        ' bytes and expected ' +
                        t +
                        ' bytes.'
                    )
                if (!i.util.isArray(e)) {
                    var s = [],
                        o = t / 4
                    for (n = 0; n < o; ++n) s.push(e.getInt32())
                    e = s
                }
                return e
            }
            function o(e) {
                e[e.length - 1] = (e[e.length - 1] + 1) & 4294967295
            }
            function a(e) {
                return [(e / 4294967296) | 0, 4294967295 & e]
            }
            ; (n.ecb = function (e) {
                ; (e = e || {}),
                    (this.name = 'ECB'),
                    (this.cipher = e.cipher),
                    (this.blockSize = e.blockSize || 16),
                    (this._ints = this.blockSize / 4),
                    (this._inBlock = new Array(this._ints)),
                    (this._outBlock = new Array(this._ints))
            }),
                (n.ecb.prototype.start = function (e) { }),
                (n.ecb.prototype.encrypt = function (e, t, r) {
                    if (e.length() < this.blockSize && !(r && e.length() > 0)) return !0
                    for (var i = 0; i < this._ints; ++i) this._inBlock[i] = e.getInt32()
                    this.cipher.encrypt(this._inBlock, this._outBlock)
                    for (i = 0; i < this._ints; ++i) t.putInt32(this._outBlock[i])
                }),
                (n.ecb.prototype.decrypt = function (e, t, r) {
                    if (e.length() < this.blockSize && !(r && e.length() > 0)) return !0
                    for (var i = 0; i < this._ints; ++i) this._inBlock[i] = e.getInt32()
                    this.cipher.decrypt(this._inBlock, this._outBlock)
                    for (i = 0; i < this._ints; ++i) t.putInt32(this._outBlock[i])
                }),
                (n.ecb.prototype.pad = function (e, t) {
                    var r =
                        e.length() === this.blockSize
                            ? this.blockSize
                            : this.blockSize - e.length()
                    return e.fillWithByte(r, r), !0
                }),
                (n.ecb.prototype.unpad = function (e, t) {
                    if (t.overflow > 0) return !1
                    var r = e.length(),
                        i = e.at(r - 1)
                    return !(i > this.blockSize << 2) && (e.truncate(i), !0)
                }),
                (n.cbc = function (e) {
                    ; (e = e || {}),
                        (this.name = 'CBC'),
                        (this.cipher = e.cipher),
                        (this.blockSize = e.blockSize || 16),
                        (this._ints = this.blockSize / 4),
                        (this._inBlock = new Array(this._ints)),
                        (this._outBlock = new Array(this._ints))
                }),
                (n.cbc.prototype.start = function (e) {
                    if (null === e.iv) {
                        if (!this._prev) throw new Error('Invalid IV parameter.')
                        this._iv = this._prev.slice(0)
                    } else {
                        if (!('iv' in e)) throw new Error('Invalid IV parameter.')
                            ; (this._iv = s(e.iv, this.blockSize)),
                                (this._prev = this._iv.slice(0))
                    }
                }),
                (n.cbc.prototype.encrypt = function (e, t, r) {
                    if (e.length() < this.blockSize && !(r && e.length() > 0)) return !0
                    for (var i = 0; i < this._ints; ++i)
                        this._inBlock[i] = this._prev[i] ^ e.getInt32()
                    this.cipher.encrypt(this._inBlock, this._outBlock)
                    for (i = 0; i < this._ints; ++i) t.putInt32(this._outBlock[i])
                    this._prev = this._outBlock
                }),
                (n.cbc.prototype.decrypt = function (e, t, r) {
                    if (e.length() < this.blockSize && !(r && e.length() > 0)) return !0
                    for (var i = 0; i < this._ints; ++i) this._inBlock[i] = e.getInt32()
                    this.cipher.decrypt(this._inBlock, this._outBlock)
                    for (i = 0; i < this._ints; ++i)
                        t.putInt32(this._prev[i] ^ this._outBlock[i])
                    this._prev = this._inBlock.slice(0)
                }),
                (n.cbc.prototype.pad = function (e, t) {
                    var r =
                        e.length() === this.blockSize
                            ? this.blockSize
                            : this.blockSize - e.length()
                    return e.fillWithByte(r, r), !0
                }),
                (n.cbc.prototype.unpad = function (e, t) {
                    if (t.overflow > 0) return !1
                    var r = e.length(),
                        i = e.at(r - 1)
                    return !(i > this.blockSize << 2) && (e.truncate(i), !0)
                }),
                (n.cfb = function (e) {
                    ; (e = e || {}),
                        (this.name = 'CFB'),
                        (this.cipher = e.cipher),
                        (this.blockSize = e.blockSize || 16),
                        (this._ints = this.blockSize / 4),
                        (this._inBlock = null),
                        (this._outBlock = new Array(this._ints)),
                        (this._partialBlock = new Array(this._ints)),
                        (this._partialOutput = i.util.createBuffer()),
                        (this._partialBytes = 0)
                }),
                (n.cfb.prototype.start = function (e) {
                    if (!('iv' in e)) throw new Error('Invalid IV parameter.')
                        ; (this._iv = s(e.iv, this.blockSize)),
                            (this._inBlock = this._iv.slice(0)),
                            (this._partialBytes = 0)
                }),
                (n.cfb.prototype.encrypt = function (e, t, r) {
                    var i = e.length()
                    if (0 === i) return !0
                    if (
                        (this.cipher.encrypt(this._inBlock, this._outBlock),
                            0 === this._partialBytes && i >= this.blockSize)
                    )
                        for (var n = 0; n < this._ints; ++n)
                            (this._inBlock[n] = e.getInt32() ^ this._outBlock[n]),
                                t.putInt32(this._inBlock[n])
                    else {
                        var s = (this.blockSize - i) % this.blockSize
                        s > 0 && (s = this.blockSize - s), this._partialOutput.clear()
                        for (n = 0; n < this._ints; ++n)
                            (this._partialBlock[n] = e.getInt32() ^ this._outBlock[n]),
                                this._partialOutput.putInt32(this._partialBlock[n])
                        if (s > 0) e.read -= this.blockSize
                        else
                            for (n = 0; n < this._ints; ++n)
                                this._inBlock[n] = this._partialBlock[n]
                        if (
                            (this._partialBytes > 0 &&
                                this._partialOutput.getBytes(this._partialBytes),
                                s > 0 && !r)
                        )
                            return (
                                t.putBytes(
                                    this._partialOutput.getBytes(s - this._partialBytes)
                                ),
                                (this._partialBytes = s),
                                !0
                            )
                        t.putBytes(this._partialOutput.getBytes(i - this._partialBytes)),
                            (this._partialBytes = 0)
                    }
                }),
                (n.cfb.prototype.decrypt = function (e, t, r) {
                    var i = e.length()
                    if (0 === i) return !0
                    if (
                        (this.cipher.encrypt(this._inBlock, this._outBlock),
                            0 === this._partialBytes && i >= this.blockSize)
                    )
                        for (var n = 0; n < this._ints; ++n)
                            (this._inBlock[n] = e.getInt32()),
                                t.putInt32(this._inBlock[n] ^ this._outBlock[n])
                    else {
                        var s = (this.blockSize - i) % this.blockSize
                        s > 0 && (s = this.blockSize - s), this._partialOutput.clear()
                        for (n = 0; n < this._ints; ++n)
                            (this._partialBlock[n] = e.getInt32()),
                                this._partialOutput.putInt32(
                                    this._partialBlock[n] ^ this._outBlock[n]
                                )
                        if (s > 0) e.read -= this.blockSize
                        else
                            for (n = 0; n < this._ints; ++n)
                                this._inBlock[n] = this._partialBlock[n]
                        if (
                            (this._partialBytes > 0 &&
                                this._partialOutput.getBytes(this._partialBytes),
                                s > 0 && !r)
                        )
                            return (
                                t.putBytes(
                                    this._partialOutput.getBytes(s - this._partialBytes)
                                ),
                                (this._partialBytes = s),
                                !0
                            )
                        t.putBytes(this._partialOutput.getBytes(i - this._partialBytes)),
                            (this._partialBytes = 0)
                    }
                }),
                (n.ofb = function (e) {
                    ; (e = e || {}),
                        (this.name = 'OFB'),
                        (this.cipher = e.cipher),
                        (this.blockSize = e.blockSize || 16),
                        (this._ints = this.blockSize / 4),
                        (this._inBlock = null),
                        (this._outBlock = new Array(this._ints)),
                        (this._partialOutput = i.util.createBuffer()),
                        (this._partialBytes = 0)
                }),
                (n.ofb.prototype.start = function (e) {
                    if (!('iv' in e)) throw new Error('Invalid IV parameter.')
                        ; (this._iv = s(e.iv, this.blockSize)),
                            (this._inBlock = this._iv.slice(0)),
                            (this._partialBytes = 0)
                }),
                (n.ofb.prototype.encrypt = function (e, t, r) {
                    var i = e.length()
                    if (0 === e.length()) return !0
                    if (
                        (this.cipher.encrypt(this._inBlock, this._outBlock),
                            0 === this._partialBytes && i >= this.blockSize)
                    )
                        for (var n = 0; n < this._ints; ++n)
                            t.putInt32(e.getInt32() ^ this._outBlock[n]),
                                (this._inBlock[n] = this._outBlock[n])
                    else {
                        var s = (this.blockSize - i) % this.blockSize
                        s > 0 && (s = this.blockSize - s), this._partialOutput.clear()
                        for (n = 0; n < this._ints; ++n)
                            this._partialOutput.putInt32(e.getInt32() ^ this._outBlock[n])
                        if (s > 0) e.read -= this.blockSize
                        else
                            for (n = 0; n < this._ints; ++n)
                                this._inBlock[n] = this._outBlock[n]
                        if (
                            (this._partialBytes > 0 &&
                                this._partialOutput.getBytes(this._partialBytes),
                                s > 0 && !r)
                        )
                            return (
                                t.putBytes(
                                    this._partialOutput.getBytes(s - this._partialBytes)
                                ),
                                (this._partialBytes = s),
                                !0
                            )
                        t.putBytes(this._partialOutput.getBytes(i - this._partialBytes)),
                            (this._partialBytes = 0)
                    }
                }),
                (n.ofb.prototype.decrypt = n.ofb.prototype.encrypt),
                (n.ctr = function (e) {
                    ; (e = e || {}),
                        (this.name = 'CTR'),
                        (this.cipher = e.cipher),
                        (this.blockSize = e.blockSize || 16),
                        (this._ints = this.blockSize / 4),
                        (this._inBlock = null),
                        (this._outBlock = new Array(this._ints)),
                        (this._partialOutput = i.util.createBuffer()),
                        (this._partialBytes = 0)
                }),
                (n.ctr.prototype.start = function (e) {
                    if (!('iv' in e)) throw new Error('Invalid IV parameter.')
                        ; (this._iv = s(e.iv, this.blockSize)),
                            (this._inBlock = this._iv.slice(0)),
                            (this._partialBytes = 0)
                }),
                (n.ctr.prototype.encrypt = function (e, t, r) {
                    var i = e.length()
                    if (0 === i) return !0
                    if (
                        (this.cipher.encrypt(this._inBlock, this._outBlock),
                            0 === this._partialBytes && i >= this.blockSize)
                    )
                        for (var n = 0; n < this._ints; ++n)
                            t.putInt32(e.getInt32() ^ this._outBlock[n])
                    else {
                        var s = (this.blockSize - i) % this.blockSize
                        s > 0 && (s = this.blockSize - s), this._partialOutput.clear()
                        for (n = 0; n < this._ints; ++n)
                            this._partialOutput.putInt32(e.getInt32() ^ this._outBlock[n])
                        if (
                            (s > 0 && (e.read -= this.blockSize),
                                this._partialBytes > 0 &&
                                this._partialOutput.getBytes(this._partialBytes),
                                s > 0 && !r)
                        )
                            return (
                                t.putBytes(
                                    this._partialOutput.getBytes(s - this._partialBytes)
                                ),
                                (this._partialBytes = s),
                                !0
                            )
                        t.putBytes(this._partialOutput.getBytes(i - this._partialBytes)),
                            (this._partialBytes = 0)
                    }
                    o(this._inBlock)
                }),
                (n.ctr.prototype.decrypt = n.ctr.prototype.encrypt),
                (n.gcm = function (e) {
                    ; (e = e || {}),
                        (this.name = 'GCM'),
                        (this.cipher = e.cipher),
                        (this.blockSize = e.blockSize || 16),
                        (this._ints = this.blockSize / 4),
                        (this._inBlock = new Array(this._ints)),
                        (this._outBlock = new Array(this._ints)),
                        (this._partialOutput = i.util.createBuffer()),
                        (this._partialBytes = 0),
                        (this._R = 3774873600)
                }),
                (n.gcm.prototype.start = function (e) {
                    if (!('iv' in e)) throw new Error('Invalid IV parameter.')
                    var t,
                        r = i.util.createBuffer(e.iv)
                    if (
                        ((this._cipherLength = 0),
                            (t =
                                'additionalData' in e
                                    ? i.util.createBuffer(e.additionalData)
                                    : i.util.createBuffer()),
                            (this._tagLength = 'tagLength' in e ? e.tagLength : 128),
                            (this._tag = null),
                            e.decrypt &&
                            ((this._tag = i.util.createBuffer(e.tag).getBytes()),
                                this._tag.length !== this._tagLength / 8))
                    )
                        throw new Error('Authentication tag does not match tag length.')
                        ; (this._hashBlock = new Array(this._ints)),
                            (this.tag = null),
                            (this._hashSubkey = new Array(this._ints)),
                            this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey),
                            (this.componentBits = 4),
                            (this._m = this.generateHashTable(
                                this._hashSubkey,
                                this.componentBits
                            ))
                    var n = r.length()
                    if (12 === n) this._j0 = [r.getInt32(), r.getInt32(), r.getInt32(), 1]
                    else {
                        for (this._j0 = [0, 0, 0, 0]; r.length() > 0;)
                            this._j0 = this.ghash(this._hashSubkey, this._j0, [
                                r.getInt32(),
                                r.getInt32(),
                                r.getInt32(),
                                r.getInt32(),
                            ])
                        this._j0 = this.ghash(
                            this._hashSubkey,
                            this._j0,
                            [0, 0].concat(a(8 * n))
                        )
                    }
                    ; (this._inBlock = this._j0.slice(0)),
                        o(this._inBlock),
                        (this._partialBytes = 0),
                        (t = i.util.createBuffer(t)),
                        (this._aDataLength = a(8 * t.length()))
                    var s = t.length() % this.blockSize
                    for (
                        s && t.fillWithByte(0, this.blockSize - s), this._s = [0, 0, 0, 0];
                        t.length() > 0;

                    )
                        this._s = this.ghash(this._hashSubkey, this._s, [
                            t.getInt32(),
                            t.getInt32(),
                            t.getInt32(),
                            t.getInt32(),
                        ])
                }),
                (n.gcm.prototype.encrypt = function (e, t, r) {
                    var i = e.length()
                    if (0 === i) return !0
                    if (
                        (this.cipher.encrypt(this._inBlock, this._outBlock),
                            0 === this._partialBytes && i >= this.blockSize)
                    ) {
                        for (var n = 0; n < this._ints; ++n)
                            t.putInt32((this._outBlock[n] ^= e.getInt32()))
                        this._cipherLength += this.blockSize
                    } else {
                        var s = (this.blockSize - i) % this.blockSize
                        s > 0 && (s = this.blockSize - s), this._partialOutput.clear()
                        for (n = 0; n < this._ints; ++n)
                            this._partialOutput.putInt32(e.getInt32() ^ this._outBlock[n])
                        if (s <= 0 || r) {
                            if (r) {
                                var a = i % this.blockSize
                                    ; (this._cipherLength += a),
                                        this._partialOutput.truncate(this.blockSize - a)
                            } else this._cipherLength += this.blockSize
                            for (n = 0; n < this._ints; ++n)
                                this._outBlock[n] = this._partialOutput.getInt32()
                            this._partialOutput.read -= this.blockSize
                        }
                        if (
                            (this._partialBytes > 0 &&
                                this._partialOutput.getBytes(this._partialBytes),
                                s > 0 && !r)
                        )
                            return (
                                (e.read -= this.blockSize),
                                t.putBytes(
                                    this._partialOutput.getBytes(s - this._partialBytes)
                                ),
                                (this._partialBytes = s),
                                !0
                            )
                        t.putBytes(this._partialOutput.getBytes(i - this._partialBytes)),
                            (this._partialBytes = 0)
                    }
                    ; (this._s = this.ghash(this._hashSubkey, this._s, this._outBlock)),
                        o(this._inBlock)
                }),
                (n.gcm.prototype.decrypt = function (e, t, r) {
                    var i = e.length()
                    if (i < this.blockSize && !(r && i > 0)) return !0
                    this.cipher.encrypt(this._inBlock, this._outBlock),
                        o(this._inBlock),
                        (this._hashBlock[0] = e.getInt32()),
                        (this._hashBlock[1] = e.getInt32()),
                        (this._hashBlock[2] = e.getInt32()),
                        (this._hashBlock[3] = e.getInt32()),
                        (this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock))
                    for (var n = 0; n < this._ints; ++n)
                        t.putInt32(this._outBlock[n] ^ this._hashBlock[n])
                    i < this.blockSize
                        ? (this._cipherLength += i % this.blockSize)
                        : (this._cipherLength += this.blockSize)
                }),
                (n.gcm.prototype.afterFinish = function (e, t) {
                    var r = !0
                    t.decrypt && t.overflow && e.truncate(this.blockSize - t.overflow),
                        (this.tag = i.util.createBuffer())
                    var n = this._aDataLength.concat(a(8 * this._cipherLength))
                    this._s = this.ghash(this._hashSubkey, this._s, n)
                    var s = []
                    this.cipher.encrypt(this._j0, s)
                    for (var o = 0; o < this._ints; ++o)
                        this.tag.putInt32(this._s[o] ^ s[o])
                    return (
                        this.tag.truncate(this.tag.length() % (this._tagLength / 8)),
                        t.decrypt && this.tag.bytes() !== this._tag && (r = !1),
                        r
                    )
                }),
                (n.gcm.prototype.multiply = function (e, t) {
                    for (var r = [0, 0, 0, 0], i = t.slice(0), n = 0; n < 128; ++n) {
                        e[(n / 32) | 0] & (1 << (31 - (n % 32))) &&
                            ((r[0] ^= i[0]), (r[1] ^= i[1]), (r[2] ^= i[2]), (r[3] ^= i[3])),
                            this.pow(i, i)
                    }
                    return r
                }),
                (n.gcm.prototype.pow = function (e, t) {
                    for (var r = 1 & e[3], i = 3; i > 0; --i)
                        t[i] = (e[i] >>> 1) | ((1 & e[i - 1]) << 31)
                            ; (t[0] = e[0] >>> 1), r && (t[0] ^= this._R)
                }),
                (n.gcm.prototype.tableMultiply = function (e) {
                    for (var t = [0, 0, 0, 0], r = 0; r < 32; ++r) {
                        var i = (e[(r / 8) | 0] >>> (4 * (7 - (r % 8)))) & 15,
                            n = this._m[r][i]
                            ; (t[0] ^= n[0]), (t[1] ^= n[1]), (t[2] ^= n[2]), (t[3] ^= n[3])
                    }
                    return t
                }),
                (n.gcm.prototype.ghash = function (e, t, r) {
                    return (
                        (t[0] ^= r[0]),
                        (t[1] ^= r[1]),
                        (t[2] ^= r[2]),
                        (t[3] ^= r[3]),
                        this.tableMultiply(t)
                    )
                }),
                (n.gcm.prototype.generateHashTable = function (e, t) {
                    for (
                        var r = 8 / t, i = 4 * r, n = 16 * r, s = new Array(n), o = 0;
                        o < n;
                        ++o
                    ) {
                        var a = [0, 0, 0, 0],
                            u = (i - 1 - (o % i)) * t
                            ; (a[(o / i) | 0] = (1 << (t - 1)) << u),
                                (s[o] = this.generateSubHashTable(this.multiply(a, e), t))
                    }
                    return s
                }),
                (n.gcm.prototype.generateSubHashTable = function (e, t) {
                    var r = 1 << t,
                        i = r >>> 1,
                        n = new Array(r)
                    n[i] = e.slice(0)
                    for (var s = i >>> 1; s > 0;)
                        this.pow(n[2 * s], (n[s] = [])), (s >>= 1)
                    for (s = 2; s < i;) {
                        for (var o = 1; o < s; ++o) {
                            var a = n[s],
                                u = n[o]
                            n[s + o] = [a[0] ^ u[0], a[1] ^ u[1], a[2] ^ u[2], a[3] ^ u[3]]
                        }
                        s *= 2
                    }
                    for (n[0] = [0, 0, 0, 0], s = i + 1; s < r; ++s) {
                        var c = n[s ^ i]
                        n[s] = [e[0] ^ c[0], e[1] ^ c[1], e[2] ^ c[2], e[3] ^ c[3]]
                    }
                    return n
                })
        },
        33480: (e, t, r) => {
            var i = r(3832)
            function n(e, t) {
                i.cipher.registerAlgorithm(e, function () {
                    return new i.des.Algorithm(e, t)
                })
            }
            r(85649),
                r(61967),
                r(97116),
                (e.exports = i.des = i.des || {}),
                (i.des.startEncrypting = function (e, t, r, i) {
                    var n = h({
                        key: e,
                        output: r,
                        decrypt: !1,
                        mode: i || (null === t ? 'ECB' : 'CBC'),
                    })
                    return n.start(t), n
                }),
                (i.des.createEncryptionCipher = function (e, t) {
                    return h({ key: e, output: null, decrypt: !1, mode: t })
                }),
                (i.des.startDecrypting = function (e, t, r, i) {
                    var n = h({
                        key: e,
                        output: r,
                        decrypt: !0,
                        mode: i || (null === t ? 'ECB' : 'CBC'),
                    })
                    return n.start(t), n
                }),
                (i.des.createDecryptionCipher = function (e, t) {
                    return h({ key: e, output: null, decrypt: !0, mode: t })
                }),
                (i.des.Algorithm = function (e, t) {
                    var r = this
                        ; (r.name = e),
                            (r.mode = new t({
                                blockSize: 8,
                                cipher: {
                                    encrypt: function (e, t) {
                                        return l(r._keys, e, t, !1)
                                    },
                                    decrypt: function (e, t) {
                                        return l(r._keys, e, t, !0)
                                    },
                                },
                            })),
                            (r._init = !1)
                }),
                (i.des.Algorithm.prototype.initialize = function (e) {
                    if (!this._init) {
                        var t = i.util.createBuffer(e.key)
                        if (0 === this.name.indexOf('3DES') && 24 !== t.length())
                            throw new Error('Invalid Triple-DES key size: ' + 8 * t.length())
                            ; (this._keys = (function (e) {
                                for (
                                    var t,
                                    r = [
                                        0, 4, 536870912, 536870916, 65536, 65540, 536936448,
                                        536936452, 512, 516, 536871424, 536871428, 66048, 66052,
                                        536936960, 536936964,
                                    ],
                                    i = [
                                        0, 1, 1048576, 1048577, 67108864, 67108865, 68157440,
                                        68157441, 256, 257, 1048832, 1048833, 67109120, 67109121,
                                        68157696, 68157697,
                                    ],
                                    n = [
                                        0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0,
                                        8, 2048, 2056, 16777216, 16777224, 16779264, 16779272,
                                    ],
                                    s = [
                                        0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920,
                                        136323072, 131072, 2228224, 134348800, 136445952, 139264,
                                        2236416, 134356992, 136454144,
                                    ],
                                    o = [
                                        0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240,
                                        4112, 266256, 4096, 266240, 4112, 266256,
                                    ],
                                    a = [
                                        0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456,
                                        33554464, 33555488, 33554432, 33555456, 33554464, 33555488,
                                    ],
                                    u = [
                                        0, 268435456, 524288, 268959744, 2, 268435458, 524290,
                                        268959746, 0, 268435456, 524288, 268959744, 2, 268435458,
                                        524290, 268959746,
                                    ],
                                    c = [
                                        0, 65536, 2048, 67584, 536870912, 536936448, 536872960,
                                        536938496, 131072, 196608, 133120, 198656, 537001984,
                                        537067520, 537004032, 537069568,
                                    ],
                                    d = [
                                        0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432,
                                        33816576, 33554432, 33816576, 33554434, 33816578, 33554434,
                                        33816578,
                                    ],
                                    p = [
                                        0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464,
                                        1024, 268436480, 1032, 268436488, 1024, 268436480, 1032,
                                        268436488,
                                    ],
                                    f = [
                                        0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192,
                                        8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800,
                                    ],
                                    l = [
                                        0, 16777216, 512, 16777728, 2097152, 18874368, 2097664,
                                        18874880, 67108864, 83886080, 67109376, 83886592, 69206016,
                                        85983232, 69206528, 85983744,
                                    ],
                                    h = [
                                        0, 4096, 134217728, 134221824, 524288, 528384, 134742016,
                                        134746112, 16, 4112, 134217744, 134221840, 524304, 528400,
                                        134742032, 134746128,
                                    ],
                                    g = [
                                        0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257,
                                        261,
                                    ],
                                    y = e.length() > 8 ? 3 : 1,
                                    m = [],
                                    v = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
                                    b = 0,
                                    w = 0;
                                    w < y;
                                    w++
                                ) {
                                    var E = e.getInt32(),
                                        I = e.getInt32()
                                        ; (E ^= (t = 252645135 & ((E >>> 4) ^ I)) << 4),
                                            (E ^= t = 65535 & (((I ^= t) >>> -16) ^ E)),
                                            (E ^= (t = 858993459 & ((E >>> 2) ^ (I ^= t << -16))) << 2),
                                            (E ^= t = 65535 & (((I ^= t) >>> -16) ^ E)),
                                            (E ^= (t = 1431655765 & ((E >>> 1) ^ (I ^= t << -16))) << 1),
                                            (E ^= t = 16711935 & (((I ^= t) >>> 8) ^ E)),
                                            (t =
                                                ((E ^=
                                                    (t = 1431655765 & ((E >>> 1) ^ (I ^= t << 8))) << 1) <<
                                                    8) |
                                                (((I ^= t) >>> 20) & 240)),
                                            (E =
                                                (I << 24) |
                                                ((I << 8) & 16711680) |
                                                ((I >>> 8) & 65280) |
                                                ((I >>> 24) & 240)),
                                            (I = t)
                                    for (var C = 0; C < v.length; ++C) {
                                        v[C]
                                            ? ((E = (E << 2) | (E >>> 26)), (I = (I << 2) | (I >>> 26)))
                                            : ((E = (E << 1) | (E >>> 27)),
                                                (I = (I << 1) | (I >>> 27))),
                                            (I &= -15)
                                        var S =
                                            r[(E &= -15) >>> 28] |
                                            i[(E >>> 24) & 15] |
                                            n[(E >>> 20) & 15] |
                                            s[(E >>> 16) & 15] |
                                            o[(E >>> 12) & 15] |
                                            a[(E >>> 8) & 15] |
                                            u[(E >>> 4) & 15],
                                            A =
                                                c[I >>> 28] |
                                                d[(I >>> 24) & 15] |
                                                p[(I >>> 20) & 15] |
                                                f[(I >>> 16) & 15] |
                                                l[(I >>> 12) & 15] |
                                                h[(I >>> 8) & 15] |
                                                g[(I >>> 4) & 15]
                                            ; (t = 65535 & ((A >>> 16) ^ S)),
                                                (m[b++] = S ^ t),
                                                (m[b++] = A ^ (t << 16))
                                    }
                                }
                                return m
                            })(t)),
                                (this._init = !0)
                    }
                }),
                n('DES-ECB', i.cipher.modes.ecb),
                n('DES-CBC', i.cipher.modes.cbc),
                n('DES-CFB', i.cipher.modes.cfb),
                n('DES-OFB', i.cipher.modes.ofb),
                n('DES-CTR', i.cipher.modes.ctr),
                n('3DES-ECB', i.cipher.modes.ecb),
                n('3DES-CBC', i.cipher.modes.cbc),
                n('3DES-CFB', i.cipher.modes.cfb),
                n('3DES-OFB', i.cipher.modes.ofb),
                n('3DES-CTR', i.cipher.modes.ctr)
            var s = [
                16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024,
                16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028,
                16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540,
                16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780,
                4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536,
                66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752,
                16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240,
                0, 65540, 66560, 0, 16842756,
            ],
                o = [
                    -2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040,
                    -2147450848, -2147483616, -2146402272, -2146402304, -2147483648,
                    -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848,
                    0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0,
                    1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376,
                    -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768,
                    -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768,
                    -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608,
                    -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800,
                    -2147483648, -2146435040, -2146402272, 1081344,
                ],
                a = [
                    520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080,
                    134217736, 134217736, 131072, 134349320, 131080, 134348800, 520,
                    134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592,
                    134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728,
                    134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0,
                    512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808,
                    134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736,
                    134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584,
                ],
                u = [
                    8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800,
                    8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801,
                    128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928,
                    8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800,
                    8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1,
                    8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801,
                    128, 8388608, 8192, 8396928,
                ],
                c = [
                    256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824,
                    34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512,
                    1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0,
                    1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080,
                    0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288,
                    1107296512, 256, 33554432, 1073741824, 34078720, 1107296512,
                    1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368,
                    256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800,
                    34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080,
                    524288, 0, 1074266112, 34078976, 1073742080,
                ],
                d = [
                    536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616,
                    4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296,
                    536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312,
                    16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688,
                    541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616,
                    4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400,
                    536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0,
                    541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312,
                    0, 541081600, 536870912, 4194320, 536887312,
                ],
                p = [
                    2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064,
                    69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912,
                    2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154,
                    69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200,
                    67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2,
                    2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202,
                    69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066,
                    0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154,
                ],
                f = [
                    268439616, 4096, 262144, 268701760, 268435456, 268439616, 64,
                    268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304,
                    4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208,
                    268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552,
                    266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096,
                    266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456,
                    262144, 268439616, 0, 268701760, 262208, 268435520, 268697600,
                    268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160,
                    262208, 268435456, 268701696,
                ]
            function l(e, t, r, i) {
                var n,
                    l,
                    h = 32 === e.length ? 3 : 9
                n =
                    3 === h
                        ? i
                            ? [30, -2, -2]
                            : [0, 32, 2]
                        : i
                            ? [94, 62, -2, 32, 64, 2, 30, -2, -2]
                            : [0, 32, 2, 62, 30, -2, 64, 96, 2]
                var g = t[0],
                    y = t[1]
                    ; (g ^= (l = 252645135 & ((g >>> 4) ^ y)) << 4),
                        (g ^= (l = 65535 & ((g >>> 16) ^ (y ^= l))) << 16),
                        (g ^= l = 858993459 & (((y ^= l) >>> 2) ^ g)),
                        (g ^= l = 16711935 & (((y ^= l << 2) >>> 8) ^ g)),
                        (g =
                            ((g ^= (l = 1431655765 & ((g >>> 1) ^ (y ^= l << 8))) << 1) << 1) |
                            (g >>> 31)),
                        (y = ((y ^= l) << 1) | (y >>> 31))
                for (var m = 0; m < h; m += 3) {
                    for (var v = n[m + 1], b = n[m + 2], w = n[m]; w != v; w += b) {
                        var E = y ^ e[w],
                            I = ((y >>> 4) | (y << 28)) ^ e[w + 1]
                            ; (l = g),
                                (g = y),
                                (y =
                                    l ^
                                    (o[(E >>> 24) & 63] |
                                        u[(E >>> 16) & 63] |
                                        d[(E >>> 8) & 63] |
                                        f[63 & E] |
                                        s[(I >>> 24) & 63] |
                                        a[(I >>> 16) & 63] |
                                        c[(I >>> 8) & 63] |
                                        p[63 & I]))
                    }
                    ; (l = g), (g = y), (y = l)
                }
                ; (y = (y >>> 1) | (y << 31)),
                    (y ^= l = 1431655765 & (((g = (g >>> 1) | (g << 31)) >>> 1) ^ y)),
                    (y ^= (l = 16711935 & ((y >>> 8) ^ (g ^= l << 1))) << 8),
                    (y ^= (l = 858993459 & ((y >>> 2) ^ (g ^= l))) << 2),
                    (y ^= l = 65535 & (((g ^= l) >>> 16) ^ y)),
                    (y ^= l = 252645135 & (((g ^= l << 16) >>> 4) ^ y)),
                    (g ^= l << 4),
                    (r[0] = g),
                    (r[1] = y)
            }
            function h(e) {
                var t,
                    r = 'DES-' + ((e = e || {}).mode || 'CBC').toUpperCase(),
                    n = (t = e.decrypt
                        ? i.cipher.createDecipher(r, e.key)
                        : i.cipher.createCipher(r, e.key)).start
                return (
                    (t.start = function (e, r) {
                        var s = null
                        r instanceof i.util.ByteBuffer && ((s = r), (r = {})),
                            ((r = r || {}).output = s),
                            (r.iv = e),
                            n.call(t, r)
                    }),
                    t
                )
            }
        },
        80069: (e, t, r) => {
            var i = r(3832)
            r(15764), r(49563), r(63219), r(97116)
            var n = r(59205),
                s = n.publicKeyValidator,
                o = n.privateKeyValidator
            if (void 0 === a) var a = i.jsbn.BigInteger
            var u = i.util.ByteBuffer,
                c = 'undefined' == typeof Buffer ? Uint8Array : Buffer
                ; (i.pki = i.pki || {}),
                    (e.exports = i.pki.ed25519 = i.ed25519 = i.ed25519 || {})
            var d = i.ed25519
            function p(e) {
                var t = e.message
                if (t instanceof Uint8Array || t instanceof c) return t
                var r = e.encoding
                if (void 0 === t) {
                    if (!e.md)
                        throw new TypeError(
                            '"options.message" or "options.md" not specified.'
                        )
                        ; (t = e.md.digest().getBytes()), (r = 'binary')
                }
                if ('string' == typeof t && !r)
                    throw new TypeError('"options.encoding" must be "binary" or "utf8".')
                if ('string' == typeof t) {
                    if ('undefined' != typeof Buffer) return Buffer.from(t, r)
                    t = new u(t, r)
                } else if (!(t instanceof u))
                    throw new TypeError(
                        '"options.message" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a string with "options.encoding" specifying its encoding.'
                    )
                for (var i = new c(t.length()), n = 0; n < i.length; ++n) i[n] = t.at(n)
                return i
            }
            ; (d.constants = {}),
                (d.constants.PUBLIC_KEY_BYTE_LENGTH = 32),
                (d.constants.PRIVATE_KEY_BYTE_LENGTH = 64),
                (d.constants.SEED_BYTE_LENGTH = 32),
                (d.constants.SIGN_BYTE_LENGTH = 64),
                (d.constants.HASH_BYTE_LENGTH = 64),
                (d.generateKeyPair = function (e) {
                    var t = (e = e || {}).seed
                    if (void 0 === t)
                        t = i.random.getBytesSync(d.constants.SEED_BYTE_LENGTH)
                    else if ('string' == typeof t) {
                        if (t.length !== d.constants.SEED_BYTE_LENGTH)
                            throw new TypeError(
                                '"seed" must be ' +
                                d.constants.SEED_BYTE_LENGTH +
                                ' bytes in length.'
                            )
                    } else if (!(t instanceof Uint8Array))
                        throw new TypeError(
                            '"seed" must be a node.js Buffer, Uint8Array, or a binary string.'
                        )
                    t = p({ message: t, encoding: 'binary' })
                    for (
                        var r = new c(d.constants.PUBLIC_KEY_BYTE_LENGTH),
                        n = new c(d.constants.PRIVATE_KEY_BYTE_LENGTH),
                        s = 0;
                        s < 32;
                        ++s
                    )
                        n[s] = t[s]
                    return (
                        (function (e, t) {
                            var r,
                                i = [D(), D(), D(), D()],
                                n = w(t, 32)
                            for (
                                n[0] &= 248, n[31] &= 127, n[31] |= 64, R(i, n), A(e, i), r = 0;
                                r < 32;
                                ++r
                            )
                                t[r + 32] = e[r]
                        })(r, n),
                        { publicKey: r, privateKey: n }
                    )
                }),
                (d.privateKeyFromAsn1 = function (e) {
                    var t = {},
                        r = []
                    if (!i.asn1.validate(e, o, t, r)) {
                        var n = new Error('Invalid Key.')
                        throw ((n.errors = r), n)
                    }
                    var s = i.asn1.derToOid(t.privateKeyOid),
                        a = i.oids.EdDSA25519
                    if (s !== a)
                        throw new Error('Invalid OID "' + s + '"; OID must be "' + a + '".')
                    var u = t.privateKey
                    return {
                        privateKeyBytes: p({
                            message: i.asn1.fromDer(u).value,
                            encoding: 'binary',
                        }),
                    }
                }),
                (d.publicKeyFromAsn1 = function (e) {
                    var t = {},
                        r = []
                    if (!i.asn1.validate(e, s, t, r)) {
                        var n = new Error('Invalid Key.')
                        throw ((n.errors = r), n)
                    }
                    var o = i.asn1.derToOid(t.publicKeyOid),
                        a = i.oids.EdDSA25519
                    if (o !== a)
                        throw new Error('Invalid OID "' + o + '"; OID must be "' + a + '".')
                    var u = t.ed25519PublicKey
                    if (u.length !== d.constants.PUBLIC_KEY_BYTE_LENGTH)
                        throw new Error('Key length is invalid.')
                    return p({ message: u, encoding: 'binary' })
                }),
                (d.publicKeyFromPrivateKey = function (e) {
                    var t = p({ message: (e = e || {}).privateKey, encoding: 'binary' })
                    if (t.length !== d.constants.PRIVATE_KEY_BYTE_LENGTH)
                        throw new TypeError(
                            '"options.privateKey" must have a byte length of ' +
                            d.constants.PRIVATE_KEY_BYTE_LENGTH
                        )
                    for (
                        var r = new c(d.constants.PUBLIC_KEY_BYTE_LENGTH), i = 0;
                        i < r.length;
                        ++i
                    )
                        r[i] = t[32 + i]
                    return r
                }),
                (d.sign = function (e) {
                    var t = p((e = e || {})),
                        r = p({ message: e.privateKey, encoding: 'binary' })
                    if (r.length === d.constants.SEED_BYTE_LENGTH)
                        r = d.generateKeyPair({ seed: r }).privateKey
                    else if (r.length !== d.constants.PRIVATE_KEY_BYTE_LENGTH)
                        throw new TypeError(
                            '"options.privateKey" must have a byte length of ' +
                            d.constants.SEED_BYTE_LENGTH +
                            ' or ' +
                            d.constants.PRIVATE_KEY_BYTE_LENGTH
                        )
                    var i = new c(d.constants.SIGN_BYTE_LENGTH + t.length)
                    !(function (e, t, r, i) {
                        var n,
                            s,
                            o = new Float64Array(64),
                            a = [D(), D(), D(), D()],
                            u = w(i, 32)
                            ; (u[0] &= 248), (u[31] &= 127), (u[31] |= 64)
                        var c = r + 64
                        for (n = 0; n < r; ++n) e[64 + n] = t[n]
                        for (n = 0; n < 32; ++n) e[32 + n] = u[32 + n]
                        var d = w(e.subarray(32), r + 32)
                        for (I(d), R(a, d), A(e, a), n = 32; n < 64; ++n) e[n] = i[n]
                        var p = w(e, r + 64)
                        for (I(p), n = 32; n < 64; ++n) o[n] = 0
                        for (n = 0; n < 32; ++n) o[n] = d[n]
                        for (n = 0; n < 32; ++n)
                            for (s = 0; s < 32; s++) o[n + s] += p[n] * u[s]
                        E(e.subarray(32), o)
                    })(i, t, t.length, r)
                    for (
                        var n = new c(d.constants.SIGN_BYTE_LENGTH), s = 0;
                        s < n.length;
                        ++s
                    )
                        n[s] = i[s]
                    return n
                }),
                (d.verify = function (e) {
                    var t = p((e = e || {}))
                    if (void 0 === e.signature)
                        throw new TypeError(
                            '"options.signature" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a binary string.'
                        )
                    var r = p({ message: e.signature, encoding: 'binary' })
                    if (r.length !== d.constants.SIGN_BYTE_LENGTH)
                        throw new TypeError(
                            '"options.signature" must have a byte length of ' +
                            d.constants.SIGN_BYTE_LENGTH
                        )
                    var i = p({ message: e.publicKey, encoding: 'binary' })
                    if (i.length !== d.constants.PUBLIC_KEY_BYTE_LENGTH)
                        throw new TypeError(
                            '"options.publicKey" must have a byte length of ' +
                            d.constants.PUBLIC_KEY_BYTE_LENGTH
                        )
                    var n,
                        s = new c(d.constants.SIGN_BYTE_LENGTH + t.length),
                        o = new c(d.constants.SIGN_BYTE_LENGTH + t.length)
                    for (n = 0; n < d.constants.SIGN_BYTE_LENGTH; ++n) s[n] = r[n]
                    for (n = 0; n < t.length; ++n)
                        s[n + d.constants.SIGN_BYTE_LENGTH] = t[n]
                    return (
                        (function (e, t, r, i) {
                            var n,
                                s = new c(32),
                                o = [D(), D(), D(), D()],
                                a = [D(), D(), D(), D()]
                            if ((-1, r < 64)) return -1
                            if (
                                (function (e, t) {
                                    var r = D(),
                                        i = D(),
                                        n = D(),
                                        s = D(),
                                        o = D(),
                                        a = D(),
                                        u = D()
                                    L(e[2], l),
                                        (function (e, t) {
                                            var r
                                            for (r = 0; r < 16; ++r)
                                                e[r] = t[2 * r] + (t[2 * r + 1] << 8)
                                            e[15] &= 32767
                                        })(e[1], t),
                                        O(n, e[1]),
                                        V(s, n, h),
                                        U(n, n, e[2]),
                                        P(s, e[2], s),
                                        O(o, s),
                                        O(a, o),
                                        V(u, a, o),
                                        V(r, u, n),
                                        V(r, r, s),
                                        (function (e, t) {
                                            var r,
                                                i = D()
                                            for (r = 0; r < 16; ++r) i[r] = t[r]
                                            for (r = 250; r >= 0; --r) O(i, i), 1 !== r && V(i, i, t)
                                            for (r = 0; r < 16; ++r) e[r] = i[r]
                                        })(r, r),
                                        V(r, r, n),
                                        V(r, r, s),
                                        V(r, r, s),
                                        V(e[0], r, s),
                                        O(i, e[0]),
                                        V(i, i, s),
                                        N(i, n) && V(e[0], e[0], b)
                                    if ((O(i, e[0]), V(i, i, s), N(i, n))) return -1
                                    B(e[0]) === t[31] >> 7 && U(e[0], f, e[0])
                                    return V(e[3], e[0], e[1]), 0
                                })(a, i)
                            )
                                return -1
                            for (n = 0; n < r; ++n) e[n] = t[n]
                            for (n = 0; n < 32; ++n) e[n + 32] = i[n]
                            var u = w(e, r)
                            if (
                                (I(u),
                                    k(o, a, u),
                                    R(a, t.subarray(32)),
                                    C(o, a),
                                    A(s, o),
                                    (r -= 64),
                                    _(t, 0, s, 0))
                            ) {
                                for (n = 0; n < r; ++n) e[n] = 0
                                return -1
                            }
                            for (n = 0; n < r; ++n) e[n] = t[n + 64]
                            return r
                        })(o, s, s.length, i) >= 0
                    )
                })
            var f = D(),
                l = D([1]),
                h = D([
                    30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585,
                    16505, 36039, 65139, 11119, 27886, 20995,
                ]),
                g = D([
                    61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171,
                    33010, 6542, 64743, 22239, 55772, 9222,
                ]),
                y = D([
                    54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982,
                    57905, 49316, 21502, 52590, 14035, 8553,
                ]),
                m = D([
                    26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214,
                    26214, 26214, 26214, 26214, 26214, 26214,
                ]),
                v = new Float64Array([
                    237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222,
                    20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
                ]),
                b = D([
                    41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867,
                    153, 11085, 57099, 20417, 9344, 11139,
                ])
            function w(e, t) {
                var r = i.md.sha512.create(),
                    n = new u(e)
                r.update(n.getBytes(t), 'binary')
                var s = r.digest().getBytes()
                if ('undefined' != typeof Buffer) return Buffer.from(s, 'binary')
                for (var o = new c(d.constants.HASH_BYTE_LENGTH), a = 0; a < 64; ++a)
                    o[a] = s.charCodeAt(a)
                return o
            }
            function E(e, t) {
                var r, i, n, s
                for (i = 63; i >= 32; --i) {
                    for (r = 0, n = i - 32, s = i - 12; n < s; ++n)
                        (t[n] += r - 16 * t[i] * v[n - (i - 32)]),
                            (r = (t[n] + 128) >> 8),
                            (t[n] -= 256 * r)
                            ; (t[n] += r), (t[i] = 0)
                }
                for (r = 0, n = 0; n < 32; ++n)
                    (t[n] += r - (t[31] >> 4) * v[n]), (r = t[n] >> 8), (t[n] &= 255)
                for (n = 0; n < 32; ++n) t[n] -= r * v[n]
                for (i = 0; i < 32; ++i) (t[i + 1] += t[i] >> 8), (e[i] = 255 & t[i])
            }
            function I(e) {
                for (var t = new Float64Array(64), r = 0; r < 64; ++r)
                    (t[r] = e[r]), (e[r] = 0)
                E(e, t)
            }
            function C(e, t) {
                var r = D(),
                    i = D(),
                    n = D(),
                    s = D(),
                    o = D(),
                    a = D(),
                    u = D(),
                    c = D(),
                    d = D()
                U(r, e[1], e[0]),
                    U(d, t[1], t[0]),
                    V(r, r, d),
                    P(i, e[0], e[1]),
                    P(d, t[0], t[1]),
                    V(i, i, d),
                    V(n, e[3], t[3]),
                    V(n, n, g),
                    V(s, e[2], t[2]),
                    P(s, s, s),
                    U(o, i, r),
                    U(a, s, n),
                    P(u, s, n),
                    P(c, i, r),
                    V(e[0], o, a),
                    V(e[1], c, u),
                    V(e[2], u, a),
                    V(e[3], o, c)
            }
            function S(e, t, r) {
                for (var i = 0; i < 4; ++i) x(e[i], t[i], r)
            }
            function A(e, t) {
                var r = D(),
                    i = D(),
                    n = D()
                !(function (e, t) {
                    var r,
                        i = D()
                    for (r = 0; r < 16; ++r) i[r] = t[r]
                    for (r = 253; r >= 0; --r) O(i, i), 2 !== r && 4 !== r && V(i, i, t)
                    for (r = 0; r < 16; ++r) e[r] = i[r]
                })(n, t[2]),
                    V(r, t[0], n),
                    V(i, t[1], n),
                    T(e, i),
                    (e[31] ^= B(r) << 7)
            }
            function T(e, t) {
                var r,
                    i,
                    n,
                    s = D(),
                    o = D()
                for (r = 0; r < 16; ++r) o[r] = t[r]
                for (M(o), M(o), M(o), i = 0; i < 2; ++i) {
                    for (s[0] = o[0] - 65517, r = 1; r < 15; ++r)
                        (s[r] = o[r] - 65535 - ((s[r - 1] >> 16) & 1)), (s[r - 1] &= 65535)
                            ; (s[15] = o[15] - 32767 - ((s[14] >> 16) & 1)),
                                (n = (s[15] >> 16) & 1),
                                (s[14] &= 65535),
                                x(o, s, 1 - n)
                }
                for (r = 0; r < 16; r++)
                    (e[2 * r] = 255 & o[r]), (e[2 * r + 1] = o[r] >> 8)
            }
            function N(e, t) {
                var r = new c(32),
                    i = new c(32)
                return T(r, e), T(i, t), _(r, 0, i, 0)
            }
            function _(e, t, r, i) {
                return (function (e, t, r, i, n) {
                    var s,
                        o = 0
                    for (s = 0; s < n; ++s) o |= e[t + s] ^ r[i + s]
                    return (1 & ((o - 1) >>> 8)) - 1
                })(e, t, r, i, 32)
            }
            function B(e) {
                var t = new c(32)
                return T(t, e), 1 & t[0]
            }
            function k(e, t, r) {
                var i, n
                for (
                    L(e[0], f), L(e[1], l), L(e[2], l), L(e[3], f), n = 255;
                    n >= 0;
                    --n
                )
                    S(e, t, (i = (r[(n / 8) | 0] >> (7 & n)) & 1)),
                        C(t, e),
                        C(e, e),
                        S(e, t, i)
            }
            function R(e, t) {
                var r = [D(), D(), D(), D()]
                L(r[0], y), L(r[1], m), L(r[2], l), V(r[3], y, m), k(e, r, t)
            }
            function L(e, t) {
                var r
                for (r = 0; r < 16; r++) e[r] = 0 | t[r]
            }
            function M(e) {
                var t,
                    r,
                    i = 1
                for (t = 0; t < 16; ++t)
                    (r = e[t] + i + 65535),
                        (i = Math.floor(r / 65536)),
                        (e[t] = r - 65536 * i)
                e[0] += i - 1 + 37 * (i - 1)
            }
            function x(e, t, r) {
                for (var i, n = ~(r - 1), s = 0; s < 16; ++s)
                    (i = n & (e[s] ^ t[s])), (e[s] ^= i), (t[s] ^= i)
            }
            function D(e) {
                var t,
                    r = new Float64Array(16)
                if (e) for (t = 0; t < e.length; ++t) r[t] = e[t]
                return r
            }
            function P(e, t, r) {
                for (var i = 0; i < 16; ++i) e[i] = t[i] + r[i]
            }
            function U(e, t, r) {
                for (var i = 0; i < 16; ++i) e[i] = t[i] - r[i]
            }
            function O(e, t) {
                V(e, t, t)
            }
            function V(e, t, r) {
                var i,
                    n,
                    s = 0,
                    o = 0,
                    a = 0,
                    u = 0,
                    c = 0,
                    d = 0,
                    p = 0,
                    f = 0,
                    l = 0,
                    h = 0,
                    g = 0,
                    y = 0,
                    m = 0,
                    v = 0,
                    b = 0,
                    w = 0,
                    E = 0,
                    I = 0,
                    C = 0,
                    S = 0,
                    A = 0,
                    T = 0,
                    N = 0,
                    _ = 0,
                    B = 0,
                    k = 0,
                    R = 0,
                    L = 0,
                    M = 0,
                    x = 0,
                    D = 0,
                    P = r[0],
                    U = r[1],
                    O = r[2],
                    V = r[3],
                    K = r[4],
                    z = r[5],
                    F = r[6],
                    q = r[7],
                    $ = r[8],
                    j = r[9],
                    H = r[10],
                    G = r[11],
                    W = r[12],
                    Q = r[13],
                    Z = r[14],
                    X = r[15]
                    ; (s += (i = t[0]) * P),
                        (o += i * U),
                        (a += i * O),
                        (u += i * V),
                        (c += i * K),
                        (d += i * z),
                        (p += i * F),
                        (f += i * q),
                        (l += i * $),
                        (h += i * j),
                        (g += i * H),
                        (y += i * G),
                        (m += i * W),
                        (v += i * Q),
                        (b += i * Z),
                        (w += i * X),
                        (o += (i = t[1]) * P),
                        (a += i * U),
                        (u += i * O),
                        (c += i * V),
                        (d += i * K),
                        (p += i * z),
                        (f += i * F),
                        (l += i * q),
                        (h += i * $),
                        (g += i * j),
                        (y += i * H),
                        (m += i * G),
                        (v += i * W),
                        (b += i * Q),
                        (w += i * Z),
                        (E += i * X),
                        (a += (i = t[2]) * P),
                        (u += i * U),
                        (c += i * O),
                        (d += i * V),
                        (p += i * K),
                        (f += i * z),
                        (l += i * F),
                        (h += i * q),
                        (g += i * $),
                        (y += i * j),
                        (m += i * H),
                        (v += i * G),
                        (b += i * W),
                        (w += i * Q),
                        (E += i * Z),
                        (I += i * X),
                        (u += (i = t[3]) * P),
                        (c += i * U),
                        (d += i * O),
                        (p += i * V),
                        (f += i * K),
                        (l += i * z),
                        (h += i * F),
                        (g += i * q),
                        (y += i * $),
                        (m += i * j),
                        (v += i * H),
                        (b += i * G),
                        (w += i * W),
                        (E += i * Q),
                        (I += i * Z),
                        (C += i * X),
                        (c += (i = t[4]) * P),
                        (d += i * U),
                        (p += i * O),
                        (f += i * V),
                        (l += i * K),
                        (h += i * z),
                        (g += i * F),
                        (y += i * q),
                        (m += i * $),
                        (v += i * j),
                        (b += i * H),
                        (w += i * G),
                        (E += i * W),
                        (I += i * Q),
                        (C += i * Z),
                        (S += i * X),
                        (d += (i = t[5]) * P),
                        (p += i * U),
                        (f += i * O),
                        (l += i * V),
                        (h += i * K),
                        (g += i * z),
                        (y += i * F),
                        (m += i * q),
                        (v += i * $),
                        (b += i * j),
                        (w += i * H),
                        (E += i * G),
                        (I += i * W),
                        (C += i * Q),
                        (S += i * Z),
                        (A += i * X),
                        (p += (i = t[6]) * P),
                        (f += i * U),
                        (l += i * O),
                        (h += i * V),
                        (g += i * K),
                        (y += i * z),
                        (m += i * F),
                        (v += i * q),
                        (b += i * $),
                        (w += i * j),
                        (E += i * H),
                        (I += i * G),
                        (C += i * W),
                        (S += i * Q),
                        (A += i * Z),
                        (T += i * X),
                        (f += (i = t[7]) * P),
                        (l += i * U),
                        (h += i * O),
                        (g += i * V),
                        (y += i * K),
                        (m += i * z),
                        (v += i * F),
                        (b += i * q),
                        (w += i * $),
                        (E += i * j),
                        (I += i * H),
                        (C += i * G),
                        (S += i * W),
                        (A += i * Q),
                        (T += i * Z),
                        (N += i * X),
                        (l += (i = t[8]) * P),
                        (h += i * U),
                        (g += i * O),
                        (y += i * V),
                        (m += i * K),
                        (v += i * z),
                        (b += i * F),
                        (w += i * q),
                        (E += i * $),
                        (I += i * j),
                        (C += i * H),
                        (S += i * G),
                        (A += i * W),
                        (T += i * Q),
                        (N += i * Z),
                        (_ += i * X),
                        (h += (i = t[9]) * P),
                        (g += i * U),
                        (y += i * O),
                        (m += i * V),
                        (v += i * K),
                        (b += i * z),
                        (w += i * F),
                        (E += i * q),
                        (I += i * $),
                        (C += i * j),
                        (S += i * H),
                        (A += i * G),
                        (T += i * W),
                        (N += i * Q),
                        (_ += i * Z),
                        (B += i * X),
                        (g += (i = t[10]) * P),
                        (y += i * U),
                        (m += i * O),
                        (v += i * V),
                        (b += i * K),
                        (w += i * z),
                        (E += i * F),
                        (I += i * q),
                        (C += i * $),
                        (S += i * j),
                        (A += i * H),
                        (T += i * G),
                        (N += i * W),
                        (_ += i * Q),
                        (B += i * Z),
                        (k += i * X),
                        (y += (i = t[11]) * P),
                        (m += i * U),
                        (v += i * O),
                        (b += i * V),
                        (w += i * K),
                        (E += i * z),
                        (I += i * F),
                        (C += i * q),
                        (S += i * $),
                        (A += i * j),
                        (T += i * H),
                        (N += i * G),
                        (_ += i * W),
                        (B += i * Q),
                        (k += i * Z),
                        (R += i * X),
                        (m += (i = t[12]) * P),
                        (v += i * U),
                        (b += i * O),
                        (w += i * V),
                        (E += i * K),
                        (I += i * z),
                        (C += i * F),
                        (S += i * q),
                        (A += i * $),
                        (T += i * j),
                        (N += i * H),
                        (_ += i * G),
                        (B += i * W),
                        (k += i * Q),
                        (R += i * Z),
                        (L += i * X),
                        (v += (i = t[13]) * P),
                        (b += i * U),
                        (w += i * O),
                        (E += i * V),
                        (I += i * K),
                        (C += i * z),
                        (S += i * F),
                        (A += i * q),
                        (T += i * $),
                        (N += i * j),
                        (_ += i * H),
                        (B += i * G),
                        (k += i * W),
                        (R += i * Q),
                        (L += i * Z),
                        (M += i * X),
                        (b += (i = t[14]) * P),
                        (w += i * U),
                        (E += i * O),
                        (I += i * V),
                        (C += i * K),
                        (S += i * z),
                        (A += i * F),
                        (T += i * q),
                        (N += i * $),
                        (_ += i * j),
                        (B += i * H),
                        (k += i * G),
                        (R += i * W),
                        (L += i * Q),
                        (M += i * Z),
                        (x += i * X),
                        (w += (i = t[15]) * P),
                        (o += 38 * (I += i * O)),
                        (a += 38 * (C += i * V)),
                        (u += 38 * (S += i * K)),
                        (c += 38 * (A += i * z)),
                        (d += 38 * (T += i * F)),
                        (p += 38 * (N += i * q)),
                        (f += 38 * (_ += i * $)),
                        (l += 38 * (B += i * j)),
                        (h += 38 * (k += i * H)),
                        (g += 38 * (R += i * G)),
                        (y += 38 * (L += i * W)),
                        (m += 38 * (M += i * Q)),
                        (v += 38 * (x += i * Z)),
                        (b += 38 * (D += i * X)),
                        (s =
                            (i = (s += 38 * (E += i * U)) + (n = 1) + 65535) -
                            65536 * (n = Math.floor(i / 65536))),
                        (o = (i = o + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (a = (i = a + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (u = (i = u + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (c = (i = c + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (d = (i = d + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (p = (i = p + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (f = (i = f + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (l = (i = l + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (h = (i = h + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (g = (i = g + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (y = (i = y + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (m = (i = m + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (v = (i = v + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (b = (i = b + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (w = (i = w + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (s =
                            (i = (s += n - 1 + 37 * (n - 1)) + (n = 1) + 65535) -
                            65536 * (n = Math.floor(i / 65536))),
                        (o = (i = o + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (a = (i = a + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (u = (i = u + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (c = (i = c + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (d = (i = d + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (p = (i = p + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (f = (i = f + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (l = (i = l + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (h = (i = h + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (g = (i = g + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (y = (i = y + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (m = (i = m + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (v = (i = v + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (b = (i = b + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (w = (i = w + n + 65535) - 65536 * (n = Math.floor(i / 65536))),
                        (s += n - 1 + 37 * (n - 1)),
                        (e[0] = s),
                        (e[1] = o),
                        (e[2] = a),
                        (e[3] = u),
                        (e[4] = c),
                        (e[5] = d),
                        (e[6] = p),
                        (e[7] = f),
                        (e[8] = l),
                        (e[9] = h),
                        (e[10] = g),
                        (e[11] = y),
                        (e[12] = m),
                        (e[13] = v),
                        (e[14] = b),
                        (e[15] = w)
            }
        },
        3832: (e) => {
            e.exports = { options: { usePureJavaScript: !1 } }
        },
        36607: (e, t, r) => {
            var i = r(3832)
            r(28991),
                r(97116),
                ((e.exports = i.hmac = i.hmac || {}).create = function () {
                    var e = null,
                        t = null,
                        r = null,
                        n = null,
                        s = {
                            start: function (s, o) {
                                if (null !== s)
                                    if ('string' == typeof s) {
                                        if (!((s = s.toLowerCase()) in i.md.algorithms))
                                            throw new Error('Unknown hash algorithm "' + s + '"')
                                        t = i.md.algorithms[s].create()
                                    } else t = s
                                if (null === o) o = e
                                else {
                                    if ('string' == typeof o) o = i.util.createBuffer(o)
                                    else if (i.util.isArray(o)) {
                                        var a = o
                                        o = i.util.createBuffer()
                                        for (var u = 0; u < a.length; ++u) o.putByte(a[u])
                                    }
                                    var c = o.length()
                                    c > t.blockLength &&
                                        (t.start(), t.update(o.bytes()), (o = t.digest())),
                                        (r = i.util.createBuffer()),
                                        (n = i.util.createBuffer()),
                                        (c = o.length())
                                    for (u = 0; u < c; ++u) {
                                        a = o.at(u)
                                        r.putByte(54 ^ a), n.putByte(92 ^ a)
                                    }
                                    if (c < t.blockLength)
                                        for (a = t.blockLength - c, u = 0; u < a; ++u)
                                            r.putByte(54), n.putByte(92)
                                                ; (e = o), (r = r.bytes()), (n = n.bytes())
                                }
                                t.start(), t.update(r)
                            },
                            update: function (e) {
                                t.update(e)
                            },
                            getMac: function () {
                                var e = t.digest().bytes()
                                return t.start(), t.update(n), t.update(e), t.digest()
                            },
                        }
                    return (s.digest = s.getMac), s
                })
        },
        22079: (e, t, r) => {
            ; (e.exports = r(3832)),
                r(8925),
                r(26164),
                r(3068),
                r(85649),
                r(33480),
                r(80069),
                r(36607),
                r(96366),
                r(84145),
                r(43389),
                r(83453),
                r(98960),
                r(26953),
                r(18936),
                r(55147),
                r(79437),
                r(4742),
                r(29654),
                r(74933),
                r(47629),
                r(49563),
                r(69372),
                r(77173),
                r(84311),
                r(97116)
        },
        15764: (e, t, r) => {
            var i,
                n = r(3832)
            e.exports = n.jsbn = n.jsbn || {}
            function s(e, t, r) {
                ; (this.data = []),
                    null != e &&
                    ('number' == typeof e
                        ? this.fromNumber(e, t, r)
                        : null == t && 'string' != typeof e
                            ? this.fromString(e, 256)
                            : this.fromString(e, t))
            }
            function o() {
                return new s(null)
            }
            function a(e, t, r, i, n, s) {
                for (var o = 16383 & t, a = t >> 14; --s >= 0;) {
                    var u = 16383 & this.data[e],
                        c = this.data[e++] >> 14,
                        d = a * u + c * o
                        ; (n =
                            ((u = o * u + ((16383 & d) << 14) + r.data[i] + n) >> 28) +
                            (d >> 14) +
                            a * c),
                            (r.data[i++] = 268435455 & u)
                }
                return n
            }
            ; (n.jsbn.BigInteger = s),
                'undefined' == typeof navigator
                    ? ((s.prototype.am = a), (i = 28))
                    : 'Microsoft Internet Explorer' == navigator.appName
                        ? ((s.prototype.am = function (e, t, r, i, n, s) {
                            for (var o = 32767 & t, a = t >> 15; --s >= 0;) {
                                var u = 32767 & this.data[e],
                                    c = this.data[e++] >> 15,
                                    d = a * u + c * o
                                    ; (n =
                                        ((u =
                                            o * u +
                                            ((32767 & d) << 15) +
                                            r.data[i] +
                                            (1073741823 & n)) >>>
                                            30) +
                                        (d >>> 15) +
                                        a * c +
                                        (n >>> 30)),
                                        (r.data[i++] = 1073741823 & u)
                            }
                            return n
                        }),
                            (i = 30))
                        : 'Netscape' != navigator.appName
                            ? ((s.prototype.am = function (e, t, r, i, n, s) {
                                for (; --s >= 0;) {
                                    var o = t * this.data[e++] + r.data[i] + n
                                        ; (n = Math.floor(o / 67108864)), (r.data[i++] = 67108863 & o)
                                }
                                return n
                            }),
                                (i = 26))
                            : ((s.prototype.am = a), (i = 28)),
                (s.prototype.DB = i),
                (s.prototype.DM = (1 << i) - 1),
                (s.prototype.DV = 1 << i)
                ; (s.prototype.FV = Math.pow(2, 52)),
                    (s.prototype.F1 = 52 - i),
                    (s.prototype.F2 = 2 * i - 52)
            var u,
                c,
                d = '0123456789abcdefghijklmnopqrstuvwxyz',
                p = new Array()
            for (u = '0'.charCodeAt(0), c = 0; c <= 9; ++c) p[u++] = c
            for (u = 'a'.charCodeAt(0), c = 10; c < 36; ++c) p[u++] = c
            for (u = 'A'.charCodeAt(0), c = 10; c < 36; ++c) p[u++] = c
            function f(e) {
                return d.charAt(e)
            }
            function l(e, t) {
                var r = p[e.charCodeAt(t)]
                return null == r ? -1 : r
            }
            function h(e) {
                var t = o()
                return t.fromInt(e), t
            }
            function g(e) {
                var t,
                    r = 1
                return (
                    0 != (t = e >>> 16) && ((e = t), (r += 16)),
                    0 != (t = e >> 8) && ((e = t), (r += 8)),
                    0 != (t = e >> 4) && ((e = t), (r += 4)),
                    0 != (t = e >> 2) && ((e = t), (r += 2)),
                    0 != (t = e >> 1) && ((e = t), (r += 1)),
                    r
                )
            }
            function y(e) {
                this.m = e
            }
            function m(e) {
                ; (this.m = e),
                    (this.mp = e.invDigit()),
                    (this.mpl = 32767 & this.mp),
                    (this.mph = this.mp >> 15),
                    (this.um = (1 << (e.DB - 15)) - 1),
                    (this.mt2 = 2 * e.t)
            }
            function v(e, t) {
                return e & t
            }
            function b(e, t) {
                return e | t
            }
            function w(e, t) {
                return e ^ t
            }
            function E(e, t) {
                return e & ~t
            }
            function I(e) {
                if (0 == e) return -1
                var t = 0
                return (
                    0 == (65535 & e) && ((e >>= 16), (t += 16)),
                    0 == (255 & e) && ((e >>= 8), (t += 8)),
                    0 == (15 & e) && ((e >>= 4), (t += 4)),
                    0 == (3 & e) && ((e >>= 2), (t += 2)),
                    0 == (1 & e) && ++t,
                    t
                )
            }
            function C(e) {
                for (var t = 0; 0 != e;) (e &= e - 1), ++t
                return t
            }
            function S() { }
            function A(e) {
                return e
            }
            function T(e) {
                ; (this.r2 = o()),
                    (this.q3 = o()),
                    s.ONE.dlShiftTo(2 * e.t, this.r2),
                    (this.mu = this.r2.divide(e)),
                    (this.m = e)
            }
            ; (y.prototype.convert = function (e) {
                return e.s < 0 || e.compareTo(this.m) >= 0 ? e.mod(this.m) : e
            }),
                (y.prototype.revert = function (e) {
                    return e
                }),
                (y.prototype.reduce = function (e) {
                    e.divRemTo(this.m, null, e)
                }),
                (y.prototype.mulTo = function (e, t, r) {
                    e.multiplyTo(t, r), this.reduce(r)
                }),
                (y.prototype.sqrTo = function (e, t) {
                    e.squareTo(t), this.reduce(t)
                }),
                (m.prototype.convert = function (e) {
                    var t = o()
                    return (
                        e.abs().dlShiftTo(this.m.t, t),
                        t.divRemTo(this.m, null, t),
                        e.s < 0 && t.compareTo(s.ZERO) > 0 && this.m.subTo(t, t),
                        t
                    )
                }),
                (m.prototype.revert = function (e) {
                    var t = o()
                    return e.copyTo(t), this.reduce(t), t
                }),
                (m.prototype.reduce = function (e) {
                    for (; e.t <= this.mt2;) e.data[e.t++] = 0
                    for (var t = 0; t < this.m.t; ++t) {
                        var r = 32767 & e.data[t],
                            i =
                                (r * this.mpl +
                                    (((r * this.mph + (e.data[t] >> 15) * this.mpl) & this.um) <<
                                        15)) &
                                e.DM
                        for (
                            r = t + this.m.t, e.data[r] += this.m.am(0, i, e, t, 0, this.m.t);
                            e.data[r] >= e.DV;

                        )
                            (e.data[r] -= e.DV), e.data[++r]++
                    }
                    e.clamp(),
                        e.drShiftTo(this.m.t, e),
                        e.compareTo(this.m) >= 0 && e.subTo(this.m, e)
                }),
                (m.prototype.mulTo = function (e, t, r) {
                    e.multiplyTo(t, r), this.reduce(r)
                }),
                (m.prototype.sqrTo = function (e, t) {
                    e.squareTo(t), this.reduce(t)
                }),
                (s.prototype.copyTo = function (e) {
                    for (var t = this.t - 1; t >= 0; --t) e.data[t] = this.data[t]
                        ; (e.t = this.t), (e.s = this.s)
                }),
                (s.prototype.fromInt = function (e) {
                    ; (this.t = 1),
                        (this.s = e < 0 ? -1 : 0),
                        e > 0
                            ? (this.data[0] = e)
                            : e < -1
                                ? (this.data[0] = e + this.DV)
                                : (this.t = 0)
                }),
                (s.prototype.fromString = function (e, t) {
                    var r
                    if (16 == t) r = 4
                    else if (8 == t) r = 3
                    else if (256 == t) r = 8
                    else if (2 == t) r = 1
                    else if (32 == t) r = 5
                    else {
                        if (4 != t) return void this.fromRadix(e, t)
                        r = 2
                    }
                    ; (this.t = 0), (this.s = 0)
                    for (var i = e.length, n = !1, o = 0; --i >= 0;) {
                        var a = 8 == r ? 255 & e[i] : l(e, i)
                        a < 0
                            ? '-' == e.charAt(i) && (n = !0)
                            : ((n = !1),
                                0 == o
                                    ? (this.data[this.t++] = a)
                                    : o + r > this.DB
                                        ? ((this.data[this.t - 1] |=
                                            (a & ((1 << (this.DB - o)) - 1)) << o),
                                            (this.data[this.t++] = a >> (this.DB - o)))
                                        : (this.data[this.t - 1] |= a << o),
                                (o += r) >= this.DB && (o -= this.DB))
                    }
                    8 == r &&
                        0 != (128 & e[0]) &&
                        ((this.s = -1),
                            o > 0 &&
                            (this.data[this.t - 1] |= ((1 << (this.DB - o)) - 1) << o)),
                        this.clamp(),
                        n && s.ZERO.subTo(this, this)
                }),
                (s.prototype.clamp = function () {
                    for (
                        var e = this.s & this.DM;
                        this.t > 0 && this.data[this.t - 1] == e;

                    )
                        --this.t
                }),
                (s.prototype.dlShiftTo = function (e, t) {
                    var r
                    for (r = this.t - 1; r >= 0; --r) t.data[r + e] = this.data[r]
                    for (r = e - 1; r >= 0; --r) t.data[r] = 0
                        ; (t.t = this.t + e), (t.s = this.s)
                }),
                (s.prototype.drShiftTo = function (e, t) {
                    for (var r = e; r < this.t; ++r) t.data[r - e] = this.data[r]
                        ; (t.t = Math.max(this.t - e, 0)), (t.s = this.s)
                }),
                (s.prototype.lShiftTo = function (e, t) {
                    var r,
                        i = e % this.DB,
                        n = this.DB - i,
                        s = (1 << n) - 1,
                        o = Math.floor(e / this.DB),
                        a = (this.s << i) & this.DM
                    for (r = this.t - 1; r >= 0; --r)
                        (t.data[r + o + 1] = (this.data[r] >> n) | a),
                            (a = (this.data[r] & s) << i)
                    for (r = o - 1; r >= 0; --r) t.data[r] = 0
                        ; (t.data[o] = a), (t.t = this.t + o + 1), (t.s = this.s), t.clamp()
                }),
                (s.prototype.rShiftTo = function (e, t) {
                    t.s = this.s
                    var r = Math.floor(e / this.DB)
                    if (r >= this.t) t.t = 0
                    else {
                        var i = e % this.DB,
                            n = this.DB - i,
                            s = (1 << i) - 1
                        t.data[0] = this.data[r] >> i
                        for (var o = r + 1; o < this.t; ++o)
                            (t.data[o - r - 1] |= (this.data[o] & s) << n),
                                (t.data[o - r] = this.data[o] >> i)
                        i > 0 && (t.data[this.t - r - 1] |= (this.s & s) << n),
                            (t.t = this.t - r),
                            t.clamp()
                    }
                }),
                (s.prototype.subTo = function (e, t) {
                    for (var r = 0, i = 0, n = Math.min(e.t, this.t); r < n;)
                        (i += this.data[r] - e.data[r]),
                            (t.data[r++] = i & this.DM),
                            (i >>= this.DB)
                    if (e.t < this.t) {
                        for (i -= e.s; r < this.t;)
                            (i += this.data[r]), (t.data[r++] = i & this.DM), (i >>= this.DB)
                        i += this.s
                    } else {
                        for (i += this.s; r < e.t;)
                            (i -= e.data[r]), (t.data[r++] = i & this.DM), (i >>= this.DB)
                        i -= e.s
                    }
                    ; (t.s = i < 0 ? -1 : 0),
                        i < -1 ? (t.data[r++] = this.DV + i) : i > 0 && (t.data[r++] = i),
                        (t.t = r),
                        t.clamp()
                }),
                (s.prototype.multiplyTo = function (e, t) {
                    var r = this.abs(),
                        i = e.abs(),
                        n = r.t
                    for (t.t = n + i.t; --n >= 0;) t.data[n] = 0
                    for (n = 0; n < i.t; ++n)
                        t.data[n + r.t] = r.am(0, i.data[n], t, n, 0, r.t)
                            ; (t.s = 0), t.clamp(), this.s != e.s && s.ZERO.subTo(t, t)
                }),
                (s.prototype.squareTo = function (e) {
                    for (var t = this.abs(), r = (e.t = 2 * t.t); --r >= 0;)
                        e.data[r] = 0
                    for (r = 0; r < t.t - 1; ++r) {
                        var i = t.am(r, t.data[r], e, 2 * r, 0, 1)
                            ; (e.data[r + t.t] += t.am(
                                r + 1,
                                2 * t.data[r],
                                e,
                                2 * r + 1,
                                i,
                                t.t - r - 1
                            )) >= t.DV && ((e.data[r + t.t] -= t.DV), (e.data[r + t.t + 1] = 1))
                    }
                    e.t > 0 && (e.data[e.t - 1] += t.am(r, t.data[r], e, 2 * r, 0, 1)),
                        (e.s = 0),
                        e.clamp()
                }),
                (s.prototype.divRemTo = function (e, t, r) {
                    var i = e.abs()
                    if (!(i.t <= 0)) {
                        var n = this.abs()
                        if (n.t < i.t)
                            return (
                                null != t && t.fromInt(0), void (null != r && this.copyTo(r))
                            )
                        null == r && (r = o())
                        var a = o(),
                            u = this.s,
                            c = e.s,
                            d = this.DB - g(i.data[i.t - 1])
                        d > 0
                            ? (i.lShiftTo(d, a), n.lShiftTo(d, r))
                            : (i.copyTo(a), n.copyTo(r))
                        var p = a.t,
                            f = a.data[p - 1]
                        if (0 != f) {
                            var l =
                                f * (1 << this.F1) + (p > 1 ? a.data[p - 2] >> this.F2 : 0),
                                h = this.FV / l,
                                y = (1 << this.F1) / l,
                                m = 1 << this.F2,
                                v = r.t,
                                b = v - p,
                                w = null == t ? o() : t
                            for (
                                a.dlShiftTo(b, w),
                                r.compareTo(w) >= 0 && ((r.data[r.t++] = 1), r.subTo(w, r)),
                                s.ONE.dlShiftTo(p, w),
                                w.subTo(a, a);
                                a.t < p;

                            )
                                a.data[a.t++] = 0
                            for (; --b >= 0;) {
                                var E =
                                    r.data[--v] == f
                                        ? this.DM
                                        : Math.floor(r.data[v] * h + (r.data[v - 1] + m) * y)
                                if ((r.data[v] += a.am(0, E, r, b, 0, p)) < E)
                                    for (a.dlShiftTo(b, w), r.subTo(w, r); r.data[v] < --E;)
                                        r.subTo(w, r)
                            }
                            null != t && (r.drShiftTo(p, t), u != c && s.ZERO.subTo(t, t)),
                                (r.t = p),
                                r.clamp(),
                                d > 0 && r.rShiftTo(d, r),
                                u < 0 && s.ZERO.subTo(r, r)
                        }
                    }
                }),
                (s.prototype.invDigit = function () {
                    if (this.t < 1) return 0
                    var e = this.data[0]
                    if (0 == (1 & e)) return 0
                    var t = 3 & e
                    return (t =
                        ((t =
                            ((t =
                                ((t = (t * (2 - (15 & e) * t)) & 15) * (2 - (255 & e) * t)) &
                                255) *
                                (2 - (((65535 & e) * t) & 65535))) &
                            65535) *
                            (2 - ((e * t) % this.DV))) %
                        this.DV) > 0
                        ? this.DV - t
                        : -t
                }),
                (s.prototype.isEven = function () {
                    return 0 == (this.t > 0 ? 1 & this.data[0] : this.s)
                }),
                (s.prototype.exp = function (e, t) {
                    if (e > 4294967295 || e < 1) return s.ONE
                    var r = o(),
                        i = o(),
                        n = t.convert(this),
                        a = g(e) - 1
                    for (n.copyTo(r); --a >= 0;)
                        if ((t.sqrTo(r, i), (e & (1 << a)) > 0)) t.mulTo(i, n, r)
                        else {
                            var u = r
                                ; (r = i), (i = u)
                        }
                    return t.revert(r)
                }),
                (s.prototype.toString = function (e) {
                    if (this.s < 0) return '-' + this.negate().toString(e)
                    var t
                    if (16 == e) t = 4
                    else if (8 == e) t = 3
                    else if (2 == e) t = 1
                    else if (32 == e) t = 5
                    else {
                        if (4 != e) return this.toRadix(e)
                        t = 2
                    }
                    var r,
                        i = (1 << t) - 1,
                        n = !1,
                        s = '',
                        o = this.t,
                        a = this.DB - ((o * this.DB) % t)
                    if (o-- > 0)
                        for (
                            a < this.DB &&
                            (r = this.data[o] >> a) > 0 &&
                            ((n = !0), (s = f(r)));
                            o >= 0;

                        )
                            a < t
                                ? ((r = (this.data[o] & ((1 << a) - 1)) << (t - a)),
                                    (r |= this.data[--o] >> (a += this.DB - t)))
                                : ((r = (this.data[o] >> (a -= t)) & i),
                                    a <= 0 && ((a += this.DB), --o)),
                                r > 0 && (n = !0),
                                n && (s += f(r))
                    return n ? s : '0'
                }),
                (s.prototype.negate = function () {
                    var e = o()
                    return s.ZERO.subTo(this, e), e
                }),
                (s.prototype.abs = function () {
                    return this.s < 0 ? this.negate() : this
                }),
                (s.prototype.compareTo = function (e) {
                    var t = this.s - e.s
                    if (0 != t) return t
                    var r = this.t
                    if (0 != (t = r - e.t)) return this.s < 0 ? -t : t
                    for (; --r >= 0;) if (0 != (t = this.data[r] - e.data[r])) return t
                    return 0
                }),
                (s.prototype.bitLength = function () {
                    return this.t <= 0
                        ? 0
                        : this.DB * (this.t - 1) +
                        g(this.data[this.t - 1] ^ (this.s & this.DM))
                }),
                (s.prototype.mod = function (e) {
                    var t = o()
                    return (
                        this.abs().divRemTo(e, null, t),
                        this.s < 0 && t.compareTo(s.ZERO) > 0 && e.subTo(t, t),
                        t
                    )
                }),
                (s.prototype.modPowInt = function (e, t) {
                    var r
                    return (
                        (r = e < 256 || t.isEven() ? new y(t) : new m(t)), this.exp(e, r)
                    )
                }),
                (s.ZERO = h(0)),
                (s.ONE = h(1)),
                (S.prototype.convert = A),
                (S.prototype.revert = A),
                (S.prototype.mulTo = function (e, t, r) {
                    e.multiplyTo(t, r)
                }),
                (S.prototype.sqrTo = function (e, t) {
                    e.squareTo(t)
                }),
                (T.prototype.convert = function (e) {
                    if (e.s < 0 || e.t > 2 * this.m.t) return e.mod(this.m)
                    if (e.compareTo(this.m) < 0) return e
                    var t = o()
                    return e.copyTo(t), this.reduce(t), t
                }),
                (T.prototype.revert = function (e) {
                    return e
                }),
                (T.prototype.reduce = function (e) {
                    for (
                        e.drShiftTo(this.m.t - 1, this.r2),
                        e.t > this.m.t + 1 && ((e.t = this.m.t + 1), e.clamp()),
                        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3),
                        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
                        e.compareTo(this.r2) < 0;

                    )
                        e.dAddOffset(1, this.m.t + 1)
                    for (e.subTo(this.r2, e); e.compareTo(this.m) >= 0;)
                        e.subTo(this.m, e)
                }),
                (T.prototype.mulTo = function (e, t, r) {
                    e.multiplyTo(t, r), this.reduce(r)
                }),
                (T.prototype.sqrTo = function (e, t) {
                    e.squareTo(t), this.reduce(t)
                })
            var N = [
                2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
                67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,
                139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
                223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,
                293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
                383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,
                463, 467, 479, 487, 491, 499, 503, 509,
            ],
                _ = (1 << 26) / N[N.length - 1]
                ; (s.prototype.chunkSize = function (e) {
                    return Math.floor((Math.LN2 * this.DB) / Math.log(e))
                }),
                    (s.prototype.toRadix = function (e) {
                        if ((null == e && (e = 10), 0 == this.signum() || e < 2 || e > 36))
                            return '0'
                        var t = this.chunkSize(e),
                            r = Math.pow(e, t),
                            i = h(r),
                            n = o(),
                            s = o(),
                            a = ''
                        for (this.divRemTo(i, n, s); n.signum() > 0;)
                            (a = (r + s.intValue()).toString(e).substr(1) + a),
                                n.divRemTo(i, n, s)
                        return s.intValue().toString(e) + a
                    }),
                    (s.prototype.fromRadix = function (e, t) {
                        this.fromInt(0), null == t && (t = 10)
                        for (
                            var r = this.chunkSize(t),
                            i = Math.pow(t, r),
                            n = !1,
                            o = 0,
                            a = 0,
                            u = 0;
                            u < e.length;
                            ++u
                        ) {
                            var c = l(e, u)
                            c < 0
                                ? '-' == e.charAt(u) && 0 == this.signum() && (n = !0)
                                : ((a = t * a + c),
                                    ++o >= r &&
                                    (this.dMultiply(i), this.dAddOffset(a, 0), (o = 0), (a = 0)))
                        }
                        o > 0 && (this.dMultiply(Math.pow(t, o)), this.dAddOffset(a, 0)),
                            n && s.ZERO.subTo(this, this)
                    }),
                    (s.prototype.fromNumber = function (e, t, r) {
                        if ('number' == typeof t)
                            if (e < 2) this.fromInt(1)
                            else
                                for (
                                    this.fromNumber(e, r),
                                    this.testBit(e - 1) ||
                                    this.bitwiseTo(s.ONE.shiftLeft(e - 1), b, this),
                                    this.isEven() && this.dAddOffset(1, 0);
                                    !this.isProbablePrime(t);

                                )
                                    this.dAddOffset(2, 0),
                                        this.bitLength() > e &&
                                        this.subTo(s.ONE.shiftLeft(e - 1), this)
                        else {
                            var i = new Array(),
                                n = 7 & e
                                ; (i.length = 1 + (e >> 3)),
                                    t.nextBytes(i),
                                    n > 0 ? (i[0] &= (1 << n) - 1) : (i[0] = 0),
                                    this.fromString(i, 256)
                        }
                    }),
                    (s.prototype.bitwiseTo = function (e, t, r) {
                        var i,
                            n,
                            s = Math.min(e.t, this.t)
                        for (i = 0; i < s; ++i) r.data[i] = t(this.data[i], e.data[i])
                        if (e.t < this.t) {
                            for (n = e.s & this.DM, i = s; i < this.t; ++i)
                                r.data[i] = t(this.data[i], n)
                            r.t = this.t
                        } else {
                            for (n = this.s & this.DM, i = s; i < e.t; ++i)
                                r.data[i] = t(n, e.data[i])
                            r.t = e.t
                        }
                        ; (r.s = t(this.s, e.s)), r.clamp()
                    }),
                    (s.prototype.changeBit = function (e, t) {
                        var r = s.ONE.shiftLeft(e)
                        return this.bitwiseTo(r, t, r), r
                    }),
                    (s.prototype.addTo = function (e, t) {
                        for (var r = 0, i = 0, n = Math.min(e.t, this.t); r < n;)
                            (i += this.data[r] + e.data[r]),
                                (t.data[r++] = i & this.DM),
                                (i >>= this.DB)
                        if (e.t < this.t) {
                            for (i += e.s; r < this.t;)
                                (i += this.data[r]), (t.data[r++] = i & this.DM), (i >>= this.DB)
                            i += this.s
                        } else {
                            for (i += this.s; r < e.t;)
                                (i += e.data[r]), (t.data[r++] = i & this.DM), (i >>= this.DB)
                            i += e.s
                        }
                        ; (t.s = i < 0 ? -1 : 0),
                            i > 0 ? (t.data[r++] = i) : i < -1 && (t.data[r++] = this.DV + i),
                            (t.t = r),
                            t.clamp()
                    }),
                    (s.prototype.dMultiply = function (e) {
                        ; (this.data[this.t] = this.am(0, e - 1, this, 0, 0, this.t)),
                            ++this.t,
                            this.clamp()
                    }),
                    (s.prototype.dAddOffset = function (e, t) {
                        if (0 != e) {
                            for (; this.t <= t;) this.data[this.t++] = 0
                            for (this.data[t] += e; this.data[t] >= this.DV;)
                                (this.data[t] -= this.DV),
                                    ++t >= this.t && (this.data[this.t++] = 0),
                                    ++this.data[t]
                        }
                    }),
                    (s.prototype.multiplyLowerTo = function (e, t, r) {
                        var i,
                            n = Math.min(this.t + e.t, t)
                        for (r.s = 0, r.t = n; n > 0;) r.data[--n] = 0
                        for (i = r.t - this.t; n < i; ++n)
                            r.data[n + this.t] = this.am(0, e.data[n], r, n, 0, this.t)
                        for (i = Math.min(e.t, t); n < i; ++n)
                            this.am(0, e.data[n], r, n, 0, t - n)
                        r.clamp()
                    }),
                    (s.prototype.multiplyUpperTo = function (e, t, r) {
                        --t
                        var i = (r.t = this.t + e.t - t)
                        for (r.s = 0; --i >= 0;) r.data[i] = 0
                        for (i = Math.max(t - this.t, 0); i < e.t; ++i)
                            r.data[this.t + i - t] = this.am(
                                t - i,
                                e.data[i],
                                r,
                                0,
                                0,
                                this.t + i - t
                            )
                        r.clamp(), r.drShiftTo(1, r)
                    }),
                    (s.prototype.modInt = function (e) {
                        if (e <= 0) return 0
                        var t = this.DV % e,
                            r = this.s < 0 ? e - 1 : 0
                        if (this.t > 0)
                            if (0 == t) r = this.data[0] % e
                            else
                                for (var i = this.t - 1; i >= 0; --i)
                                    r = (t * r + this.data[i]) % e
                        return r
                    }),
                    (s.prototype.millerRabin = function (e) {
                        var t = this.subtract(s.ONE),
                            r = t.getLowestSetBit()
                        if (r <= 0) return !1
                        for (
                            var i,
                            n = t.shiftRight(r),
                            o = {
                                nextBytes: function (e) {
                                    for (var t = 0; t < e.length; ++t)
                                        e[t] = Math.floor(256 * Math.random())
                                },
                            },
                            a = 0;
                            a < e;
                            ++a
                        ) {
                            do {
                                i = new s(this.bitLength(), o)
                            } while (i.compareTo(s.ONE) <= 0 || i.compareTo(t) >= 0)
                            var u = i.modPow(n, this)
                            if (0 != u.compareTo(s.ONE) && 0 != u.compareTo(t)) {
                                for (var c = 1; c++ < r && 0 != u.compareTo(t);)
                                    if (0 == (u = u.modPowInt(2, this)).compareTo(s.ONE)) return !1
                                if (0 != u.compareTo(t)) return !1
                            }
                        }
                        return !0
                    }),
                    (s.prototype.clone = function () {
                        var e = o()
                        return this.copyTo(e), e
                    }),
                    (s.prototype.intValue = function () {
                        if (this.s < 0) {
                            if (1 == this.t) return this.data[0] - this.DV
                            if (0 == this.t) return -1
                        } else {
                            if (1 == this.t) return this.data[0]
                            if (0 == this.t) return 0
                        }
                        return (
                            ((this.data[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) |
                            this.data[0]
                        )
                    }),
                    (s.prototype.byteValue = function () {
                        return 0 == this.t ? this.s : (this.data[0] << 24) >> 24
                    }),
                    (s.prototype.shortValue = function () {
                        return 0 == this.t ? this.s : (this.data[0] << 16) >> 16
                    }),
                    (s.prototype.signum = function () {
                        return this.s < 0
                            ? -1
                            : this.t <= 0 || (1 == this.t && this.data[0] <= 0)
                                ? 0
                                : 1
                    }),
                    (s.prototype.toByteArray = function () {
                        var e = this.t,
                            t = new Array()
                        t[0] = this.s
                        var r,
                            i = this.DB - ((e * this.DB) % 8),
                            n = 0
                        if (e-- > 0)
                            for (
                                i < this.DB &&
                                (r = this.data[e] >> i) != (this.s & this.DM) >> i &&
                                (t[n++] = r | (this.s << (this.DB - i)));
                                e >= 0;

                            )
                                i < 8
                                    ? ((r = (this.data[e] & ((1 << i) - 1)) << (8 - i)),
                                        (r |= this.data[--e] >> (i += this.DB - 8)))
                                    : ((r = (this.data[e] >> (i -= 8)) & 255),
                                        i <= 0 && ((i += this.DB), --e)),
                                    0 != (128 & r) && (r |= -256),
                                    0 == n && (128 & this.s) != (128 & r) && ++n,
                                    (n > 0 || r != this.s) && (t[n++] = r)
                        return t
                    }),
                    (s.prototype.equals = function (e) {
                        return 0 == this.compareTo(e)
                    }),
                    (s.prototype.min = function (e) {
                        return this.compareTo(e) < 0 ? this : e
                    }),
                    (s.prototype.max = function (e) {
                        return this.compareTo(e) > 0 ? this : e
                    }),
                    (s.prototype.and = function (e) {
                        var t = o()
                        return this.bitwiseTo(e, v, t), t
                    }),
                    (s.prototype.or = function (e) {
                        var t = o()
                        return this.bitwiseTo(e, b, t), t
                    }),
                    (s.prototype.xor = function (e) {
                        var t = o()
                        return this.bitwiseTo(e, w, t), t
                    }),
                    (s.prototype.andNot = function (e) {
                        var t = o()
                        return this.bitwiseTo(e, E, t), t
                    }),
                    (s.prototype.not = function () {
                        for (var e = o(), t = 0; t < this.t; ++t)
                            e.data[t] = this.DM & ~this.data[t]
                        return (e.t = this.t), (e.s = ~this.s), e
                    }),
                    (s.prototype.shiftLeft = function (e) {
                        var t = o()
                        return e < 0 ? this.rShiftTo(-e, t) : this.lShiftTo(e, t), t
                    }),
                    (s.prototype.shiftRight = function (e) {
                        var t = o()
                        return e < 0 ? this.lShiftTo(-e, t) : this.rShiftTo(e, t), t
                    }),
                    (s.prototype.getLowestSetBit = function () {
                        for (var e = 0; e < this.t; ++e)
                            if (0 != this.data[e]) return e * this.DB + I(this.data[e])
                        return this.s < 0 ? this.t * this.DB : -1
                    }),
                    (s.prototype.bitCount = function () {
                        for (var e = 0, t = this.s & this.DM, r = 0; r < this.t; ++r)
                            e += C(this.data[r] ^ t)
                        return e
                    }),
                    (s.prototype.testBit = function (e) {
                        var t = Math.floor(e / this.DB)
                        return t >= this.t
                            ? 0 != this.s
                            : 0 != (this.data[t] & (1 << e % this.DB))
                    }),
                    (s.prototype.setBit = function (e) {
                        return this.changeBit(e, b)
                    }),
                    (s.prototype.clearBit = function (e) {
                        return this.changeBit(e, E)
                    }),
                    (s.prototype.flipBit = function (e) {
                        return this.changeBit(e, w)
                    }),
                    (s.prototype.add = function (e) {
                        var t = o()
                        return this.addTo(e, t), t
                    }),
                    (s.prototype.subtract = function (e) {
                        var t = o()
                        return this.subTo(e, t), t
                    }),
                    (s.prototype.multiply = function (e) {
                        var t = o()
                        return this.multiplyTo(e, t), t
                    }),
                    (s.prototype.divide = function (e) {
                        var t = o()
                        return this.divRemTo(e, t, null), t
                    }),
                    (s.prototype.remainder = function (e) {
                        var t = o()
                        return this.divRemTo(e, null, t), t
                    }),
                    (s.prototype.divideAndRemainder = function (e) {
                        var t = o(),
                            r = o()
                        return this.divRemTo(e, t, r), new Array(t, r)
                    }),
                    (s.prototype.modPow = function (e, t) {
                        var r,
                            i,
                            n = e.bitLength(),
                            s = h(1)
                        if (n <= 0) return s
                            ; (r = n < 18 ? 1 : n < 48 ? 3 : n < 144 ? 4 : n < 768 ? 5 : 6),
                                (i = n < 8 ? new y(t) : t.isEven() ? new T(t) : new m(t))
                        var a = new Array(),
                            u = 3,
                            c = r - 1,
                            d = (1 << r) - 1
                        if (((a[1] = i.convert(this)), r > 1)) {
                            var p = o()
                            for (i.sqrTo(a[1], p); u <= d;)
                                (a[u] = o()), i.mulTo(p, a[u - 2], a[u]), (u += 2)
                        }
                        var f,
                            l,
                            v = e.t - 1,
                            b = !0,
                            w = o()
                        for (n = g(e.data[v]) - 1; v >= 0;) {
                            for (
                                n >= c
                                    ? (f = (e.data[v] >> (n - c)) & d)
                                    : ((f = (e.data[v] & ((1 << (n + 1)) - 1)) << (c - n)),
                                        v > 0 && (f |= e.data[v - 1] >> (this.DB + n - c))),
                                u = r;
                                0 == (1 & f);

                            )
                                (f >>= 1), --u
                            if (((n -= u) < 0 && ((n += this.DB), --v), b))
                                a[f].copyTo(s), (b = !1)
                            else {
                                for (; u > 1;) i.sqrTo(s, w), i.sqrTo(w, s), (u -= 2)
                                u > 0 ? i.sqrTo(s, w) : ((l = s), (s = w), (w = l)),
                                    i.mulTo(w, a[f], s)
                            }
                            for (; v >= 0 && 0 == (e.data[v] & (1 << n));)
                                i.sqrTo(s, w),
                                    (l = s),
                                    (s = w),
                                    (w = l),
                                    --n < 0 && ((n = this.DB - 1), --v)
                        }
                        return i.revert(s)
                    }),
                    (s.prototype.modInverse = function (e) {
                        var t = e.isEven()
                        if ((this.isEven() && t) || 0 == e.signum()) return s.ZERO
                        for (
                            var r = e.clone(),
                            i = this.clone(),
                            n = h(1),
                            o = h(0),
                            a = h(0),
                            u = h(1);
                            0 != r.signum();

                        ) {
                            for (; r.isEven();)
                                r.rShiftTo(1, r),
                                    t
                                        ? ((n.isEven() && o.isEven()) ||
                                            (n.addTo(this, n), o.subTo(e, o)),
                                            n.rShiftTo(1, n))
                                        : o.isEven() || o.subTo(e, o),
                                    o.rShiftTo(1, o)
                            for (; i.isEven();)
                                i.rShiftTo(1, i),
                                    t
                                        ? ((a.isEven() && u.isEven()) ||
                                            (a.addTo(this, a), u.subTo(e, u)),
                                            a.rShiftTo(1, a))
                                        : u.isEven() || u.subTo(e, u),
                                    u.rShiftTo(1, u)
                            r.compareTo(i) >= 0
                                ? (r.subTo(i, r), t && n.subTo(a, n), o.subTo(u, o))
                                : (i.subTo(r, i), t && a.subTo(n, a), u.subTo(o, u))
                        }
                        return 0 != i.compareTo(s.ONE)
                            ? s.ZERO
                            : u.compareTo(e) >= 0
                                ? u.subtract(e)
                                : u.signum() < 0
                                    ? (u.addTo(e, u), u.signum() < 0 ? u.add(e) : u)
                                    : u
                    }),
                    (s.prototype.pow = function (e) {
                        return this.exp(e, new S())
                    }),
                    (s.prototype.gcd = function (e) {
                        var t = this.s < 0 ? this.negate() : this.clone(),
                            r = e.s < 0 ? e.negate() : e.clone()
                        if (t.compareTo(r) < 0) {
                            var i = t
                                ; (t = r), (r = i)
                        }
                        var n = t.getLowestSetBit(),
                            s = r.getLowestSetBit()
                        if (s < 0) return t
                        for (
                            n < s && (s = n), s > 0 && (t.rShiftTo(s, t), r.rShiftTo(s, r));
                            t.signum() > 0;

                        )
                            (n = t.getLowestSetBit()) > 0 && t.rShiftTo(n, t),
                                (n = r.getLowestSetBit()) > 0 && r.rShiftTo(n, r),
                                t.compareTo(r) >= 0
                                    ? (t.subTo(r, t), t.rShiftTo(1, t))
                                    : (r.subTo(t, r), r.rShiftTo(1, r))
                        return s > 0 && r.lShiftTo(s, r), r
                    }),
                    (s.prototype.isProbablePrime = function (e) {
                        var t,
                            r = this.abs()
                        if (1 == r.t && r.data[0] <= N[N.length - 1]) {
                            for (t = 0; t < N.length; ++t) if (r.data[0] == N[t]) return !0
                            return !1
                        }
                        if (r.isEven()) return !1
                        for (t = 1; t < N.length;) {
                            for (var i = N[t], n = t + 1; n < N.length && i < _;) i *= N[n++]
                            for (i = r.modInt(i); t < n;) if (i % N[t++] == 0) return !1
                        }
                        return r.millerRabin(e)
                    })
        },
        96366: (e, t, r) => {
            var i = r(3832)
            r(97116), r(49563), r(15764), (e.exports = i.kem = i.kem || {})
            var n = i.jsbn.BigInteger
            function s(e, t, r, n) {
                e.generate = function (e, s) {
                    for (
                        var o = new i.util.ByteBuffer(),
                        a = Math.ceil(s / n) + r,
                        u = new i.util.ByteBuffer(),
                        c = r;
                        c < a;
                        ++c
                    ) {
                        u.putInt32(c), t.start(), t.update(e + u.getBytes())
                        var d = t.digest()
                        o.putBytes(d.getBytes(n))
                    }
                    return o.truncate(o.length() - s), o.getBytes()
                }
            }
            ; (i.kem.rsa = {}),
                (i.kem.rsa.create = function (e, t) {
                    var r = (t = t || {}).prng || i.random,
                        s = {
                            encrypt: function (t, s) {
                                var o,
                                    a = Math.ceil(t.n.bitLength() / 8)
                                do {
                                    o = new n(i.util.bytesToHex(r.getBytesSync(a)), 16).mod(t.n)
                                } while (o.compareTo(n.ONE) <= 0)
                                var u = a - (o = i.util.hexToBytes(o.toString(16))).length
                                return (
                                    u > 0 &&
                                    (o = i.util.fillString(String.fromCharCode(0), u) + o),
                                    { encapsulation: t.encrypt(o, 'NONE'), key: e.generate(o, s) }
                                )
                            },
                            decrypt: function (t, r, i) {
                                var n = t.decrypt(r, 'NONE')
                                return e.generate(n, i)
                            },
                        }
                    return s
                }),
                (i.kem.kdf1 = function (e, t) {
                    s(this, e, 0, t || e.digestLength)
                }),
                (i.kem.kdf2 = function (e, t) {
                    s(this, e, 1, t || e.digestLength)
                })
        },
        84145: (e, t, r) => {
            var i = r(3832)
            r(97116),
                (e.exports = i.log = i.log || {}),
                (i.log.levels = [
                    'none',
                    'error',
                    'warning',
                    'info',
                    'debug',
                    'verbose',
                    'max',
                ])
            var n = {},
                s = [],
                o = null
                ; (i.log.LEVEL_LOCKED = 2),
                    (i.log.NO_LEVEL_CHECK = 4),
                    (i.log.INTERPOLATE = 8)
            for (var a = 0; a < i.log.levels.length; ++a) {
                var u = i.log.levels[a]
                n[u] = { index: a, name: u.toUpperCase() }
            }
            ; (i.log.logMessage = function (e) {
                for (var t = n[e.level].index, r = 0; r < s.length; ++r) {
                    var o = s[r]
                    if (o.flags & i.log.NO_LEVEL_CHECK) o.f(e)
                    else t <= n[o.level].index && o.f(o, e)
                }
            }),
                (i.log.prepareStandard = function (e) {
                    'standard' in e ||
                        (e.standard =
                            n[e.level].name + ' [' + e.category + '] ' + e.message)
                }),
                (i.log.prepareFull = function (e) {
                    if (!('full' in e)) {
                        var t = [e.message]
                            ; (t = t.concat([] || 0)), (e.full = i.util.format.apply(this, t))
                    }
                }),
                (i.log.prepareStandardFull = function (e) {
                    'standardFull' in e ||
                        (i.log.prepareStandard(e), (e.standardFull = e.standard))
                })
            var c = ['error', 'warning', 'info', 'debug', 'verbose']
            for (a = 0; a < c.length; ++a)
                !(function (e) {
                    i.log[e] = function (t, r) {
                        var n = Array.prototype.slice.call(arguments).slice(2),
                            s = {
                                timestamp: new Date(),
                                level: e,
                                category: t,
                                message: r,
                                arguments: n,
                            }
                        i.log.logMessage(s)
                    }
                })(c[a])
            if (
                ((i.log.makeLogger = function (e) {
                    var t = { flags: 0, f: e }
                    return i.log.setLevel(t, 'none'), t
                }),
                    (i.log.setLevel = function (e, t) {
                        var r = !1
                        if (e && !(e.flags & i.log.LEVEL_LOCKED))
                            for (var n = 0; n < i.log.levels.length; ++n) {
                                if (t == i.log.levels[n]) {
                                    ; (e.level = t), (r = !0)
                                    break
                                }
                            }
                        return r
                    }),
                    (i.log.lock = function (e, t) {
                        void 0 === t || t
                            ? (e.flags |= i.log.LEVEL_LOCKED)
                            : (e.flags &= ~i.log.LEVEL_LOCKED)
                    }),
                    (i.log.addLogger = function (e) {
                        s.push(e)
                    }),
                    'undefined' != typeof console && 'log' in console)
            ) {
                var d
                if (console.error && console.warn && console.info && console.debug) {
                    var p = {
                        error: console.error,
                        warning: console.warn,
                        info: console.info,
                        debug: console.debug,
                        verbose: console.debug,
                    },
                        f = function (e, t) {
                            i.log.prepareStandard(t)
                            var r = p[t.level],
                                n = [t.standard]
                                ; (n = n.concat(t.arguments.slice())), r.apply(console, n)
                        }
                    d = i.log.makeLogger(f)
                } else {
                    f = function (e, t) {
                        i.log.prepareStandardFull(t)
                    }
                    d = i.log.makeLogger(f)
                }
                i.log.setLevel(d, 'debug'), i.log.addLogger(d), (o = d)
            } else console = { log: function () { } }
            if (null !== o && 'undefined' != typeof window && window.location) {
                var l = new URL(window.location.href).searchParams
                if (
                    (l.has('console.level') &&
                        i.log.setLevel(o, l.get('console.level').slice(-1)[0]),
                        l.has('console.lock'))
                )
                    'true' == l.get('console.lock').slice(-1)[0] && i.log.lock(o)
            }
            i.log.consoleLogger = o
        },
        43389: (e, t, r) => {
            ; (e.exports = r(28991)), r(25063), r(137), r(41668), r(63219)
        },
        28991: (e, t, r) => {
            var i = r(3832)
                ; (e.exports = i.md = i.md || {}),
                    (i.md.algorithms = i.md.algorithms || {})
        },
        25063: (e, t, r) => {
            var i = r(3832)
            r(28991), r(97116)
            var n = (e.exports = i.md5 = i.md5 || {})
                ; (i.md.md5 = i.md.algorithms.md5 = n),
                    (n.create = function () {
                        c ||
                            (function () {
                                ; (s = String.fromCharCode(128)),
                                    (s += i.util.fillString(String.fromCharCode(0), 64)),
                                    (o = [
                                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 6,
                                        11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 5, 8, 11, 14,
                                        1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2, 0, 7, 14, 5, 12, 3,
                                        10, 1, 8, 15, 6, 13, 4, 11, 2, 9,
                                    ]),
                                    (a = [
                                        7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5,
                                        9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11,
                                        16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10,
                                        15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21,
                                    ]),
                                    (u = new Array(64))
                                for (var e = 0; e < 64; ++e)
                                    u[e] = Math.floor(4294967296 * Math.abs(Math.sin(e + 1)))
                                c = !0
                            })()
                        var e = null,
                            t = i.util.createBuffer(),
                            r = new Array(16),
                            n = {
                                algorithm: 'md5',
                                blockLength: 64,
                                digestLength: 16,
                                messageLength: 0,
                                fullMessageLength: null,
                                messageLengthSize: 8,
                                start: function () {
                                    ; (n.messageLength = 0),
                                        (n.fullMessageLength = n.messageLength64 = [])
                                    for (var r = n.messageLengthSize / 4, s = 0; s < r; ++s)
                                        n.fullMessageLength.push(0)
                                    return (
                                        (t = i.util.createBuffer()),
                                        (e = {
                                            h0: 1732584193,
                                            h1: 4023233417,
                                            h2: 2562383102,
                                            h3: 271733878,
                                        }),
                                        n
                                    )
                                },
                            }
                        return (
                            n.start(),
                            (n.update = function (s, o) {
                                'utf8' === o && (s = i.util.encodeUtf8(s))
                                var a = s.length
                                    ; (n.messageLength += a), (a = [(a / 4294967296) >>> 0, a >>> 0])
                                for (var u = n.fullMessageLength.length - 1; u >= 0; --u)
                                    (n.fullMessageLength[u] += a[1]),
                                        (a[1] = a[0] + ((n.fullMessageLength[u] / 4294967296) >>> 0)),
                                        (n.fullMessageLength[u] = n.fullMessageLength[u] >>> 0),
                                        (a[0] = (a[1] / 4294967296) >>> 0)
                                return (
                                    t.putBytes(s),
                                    d(e, r, t),
                                    (t.read > 2048 || 0 === t.length()) && t.compact(),
                                    n
                                )
                            }),
                            (n.digest = function () {
                                var o = i.util.createBuffer()
                                o.putBytes(t.bytes())
                                var a =
                                    (n.fullMessageLength[n.fullMessageLength.length - 1] +
                                        n.messageLengthSize) &
                                    (n.blockLength - 1)
                                o.putBytes(s.substr(0, n.blockLength - a))
                                for (
                                    var u, c = 0, p = n.fullMessageLength.length - 1;
                                    p >= 0;
                                    --p
                                )
                                    (c = ((u = 8 * n.fullMessageLength[p] + c) / 4294967296) >>> 0),
                                        o.putInt32Le(u >>> 0)
                                var f = { h0: e.h0, h1: e.h1, h2: e.h2, h3: e.h3 }
                                d(f, r, o)
                                var l = i.util.createBuffer()
                                return (
                                    l.putInt32Le(f.h0),
                                    l.putInt32Le(f.h1),
                                    l.putInt32Le(f.h2),
                                    l.putInt32Le(f.h3),
                                    l
                                )
                            }),
                            n
                        )
                    })
            var s = null,
                o = null,
                a = null,
                u = null,
                c = !1
            function d(e, t, r) {
                for (var i, n, s, c, d, p, f, l = r.length(); l >= 64;) {
                    for (n = e.h0, s = e.h1, c = e.h2, d = e.h3, f = 0; f < 16; ++f)
                        (t[f] = r.getInt32Le()),
                            (i = n + (d ^ (s & (c ^ d))) + u[f] + t[f]),
                            (n = d),
                            (d = c),
                            (c = s),
                            (s += (i << (p = a[f])) | (i >>> (32 - p)))
                    for (; f < 32; ++f)
                        (i = n + (c ^ (d & (s ^ c))) + u[f] + t[o[f]]),
                            (n = d),
                            (d = c),
                            (c = s),
                            (s += (i << (p = a[f])) | (i >>> (32 - p)))
                    for (; f < 48; ++f)
                        (i = n + (s ^ c ^ d) + u[f] + t[o[f]]),
                            (n = d),
                            (d = c),
                            (c = s),
                            (s += (i << (p = a[f])) | (i >>> (32 - p)))
                    for (; f < 64; ++f)
                        (i = n + (c ^ (s | ~d)) + u[f] + t[o[f]]),
                            (n = d),
                            (d = c),
                            (c = s),
                            (s += (i << (p = a[f])) | (i >>> (32 - p)))
                            ; (e.h0 = (e.h0 + n) | 0),
                                (e.h1 = (e.h1 + s) | 0),
                                (e.h2 = (e.h2 + c) | 0),
                                (e.h3 = (e.h3 + d) | 0),
                                (l -= 64)
                }
            }
        },
        86971: (e, t, r) => {
            var i = r(3832)
            r(83453), (e.exports = i.mgf = i.mgf || {}), (i.mgf.mgf1 = i.mgf1)
        },
        83453: (e, t, r) => {
            var i = r(3832)
            r(97116),
                (i.mgf = i.mgf || {}),
                ((e.exports = i.mgf.mgf1 = i.mgf1 = i.mgf1 || {}).create = function (
                    e
                ) {
                    return {
                        generate: function (t, r) {
                            for (
                                var n = new i.util.ByteBuffer(),
                                s = Math.ceil(r / e.digestLength),
                                o = 0;
                                o < s;
                                o++
                            ) {
                                var a = new i.util.ByteBuffer()
                                a.putInt32(o),
                                    e.start(),
                                    e.update(t + a.getBytes()),
                                    n.putBuffer(e.digest())
                            }
                            return n.truncate(n.length() - r), n.getBytes()
                        },
                    }
                })
        },
        66270: (e, t, r) => {
            var i = r(3832)
            i.pki = i.pki || {}
            var n = (e.exports = i.pki.oids = i.oids = i.oids || {})
            function s(e, t) {
                ; (n[e] = t), (n[t] = e)
            }
            function o(e, t) {
                n[e] = t
            }
            s('1.2.840.113549.1.1.1', 'rsaEncryption'),
                s('1.2.840.113549.1.1.4', 'md5WithRSAEncryption'),
                s('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption'),
                s('1.2.840.113549.1.1.7', 'RSAES-OAEP'),
                s('1.2.840.113549.1.1.8', 'mgf1'),
                s('1.2.840.113549.1.1.9', 'pSpecified'),
                s('1.2.840.113549.1.1.10', 'RSASSA-PSS'),
                s('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption'),
                s('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption'),
                s('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption'),
                s('1.3.101.112', 'EdDSA25519'),
                s('1.2.840.10040.4.3', 'dsa-with-sha1'),
                s('1.3.14.3.2.7', 'desCBC'),
                s('1.3.14.3.2.26', 'sha1'),
                s('1.3.14.3.2.29', 'sha1WithRSASignature'),
                s('2.16.840.1.101.3.4.2.1', 'sha256'),
                s('2.16.840.1.101.3.4.2.2', 'sha384'),
                s('2.16.840.1.101.3.4.2.3', 'sha512'),
                s('2.16.840.1.101.3.4.2.4', 'sha224'),
                s('2.16.840.1.101.3.4.2.5', 'sha512-224'),
                s('2.16.840.1.101.3.4.2.6', 'sha512-256'),
                s('1.2.840.113549.2.2', 'md2'),
                s('1.2.840.113549.2.5', 'md5'),
                s('1.2.840.113549.1.7.1', 'data'),
                s('1.2.840.113549.1.7.2', 'signedData'),
                s('1.2.840.113549.1.7.3', 'envelopedData'),
                s('1.2.840.113549.1.7.4', 'signedAndEnvelopedData'),
                s('1.2.840.113549.1.7.5', 'digestedData'),
                s('1.2.840.113549.1.7.6', 'encryptedData'),
                s('1.2.840.113549.1.9.1', 'emailAddress'),
                s('1.2.840.113549.1.9.2', 'unstructuredName'),
                s('1.2.840.113549.1.9.3', 'contentType'),
                s('1.2.840.113549.1.9.4', 'messageDigest'),
                s('1.2.840.113549.1.9.5', 'signingTime'),
                s('1.2.840.113549.1.9.6', 'counterSignature'),
                s('1.2.840.113549.1.9.7', 'challengePassword'),
                s('1.2.840.113549.1.9.8', 'unstructuredAddress'),
                s('1.2.840.113549.1.9.14', 'extensionRequest'),
                s('1.2.840.113549.1.9.20', 'friendlyName'),
                s('1.2.840.113549.1.9.21', 'localKeyId'),
                s('1.2.840.113549.1.9.22.1', 'x509Certificate'),
                s('1.2.840.113549.1.12.10.1.1', 'keyBag'),
                s('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag'),
                s('1.2.840.113549.1.12.10.1.3', 'certBag'),
                s('1.2.840.113549.1.12.10.1.4', 'crlBag'),
                s('1.2.840.113549.1.12.10.1.5', 'secretBag'),
                s('1.2.840.113549.1.12.10.1.6', 'safeContentsBag'),
                s('1.2.840.113549.1.5.13', 'pkcs5PBES2'),
                s('1.2.840.113549.1.5.12', 'pkcs5PBKDF2'),
                s('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4'),
                s('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4'),
                s('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC'),
                s('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC'),
                s('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC'),
                s('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC'),
                s('1.2.840.113549.2.7', 'hmacWithSHA1'),
                s('1.2.840.113549.2.8', 'hmacWithSHA224'),
                s('1.2.840.113549.2.9', 'hmacWithSHA256'),
                s('1.2.840.113549.2.10', 'hmacWithSHA384'),
                s('1.2.840.113549.2.11', 'hmacWithSHA512'),
                s('1.2.840.113549.3.7', 'des-EDE3-CBC'),
                s('2.16.840.1.101.3.4.1.2', 'aes128-CBC'),
                s('2.16.840.1.101.3.4.1.22', 'aes192-CBC'),
                s('2.16.840.1.101.3.4.1.42', 'aes256-CBC'),
                s('2.5.4.3', 'commonName'),
                s('2.5.4.4', 'surname'),
                s('2.5.4.5', 'serialNumber'),
                s('2.5.4.6', 'countryName'),
                s('2.5.4.7', 'localityName'),
                s('2.5.4.8', 'stateOrProvinceName'),
                s('2.5.4.9', 'streetAddress'),
                s('2.5.4.10', 'organizationName'),
                s('2.5.4.11', 'organizationalUnitName'),
                s('2.5.4.12', 'title'),
                s('2.5.4.13', 'description'),
                s('2.5.4.15', 'businessCategory'),
                s('2.5.4.17', 'postalCode'),
                s('2.5.4.42', 'givenName'),
                s(
                    '1.3.6.1.4.1.311.60.2.1.2',
                    'jurisdictionOfIncorporationStateOrProvinceName'
                ),
                s('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName'),
                s('2.16.840.1.113730.1.1', 'nsCertType'),
                s('2.16.840.1.113730.1.13', 'nsComment'),
                o('2.5.29.1', 'authorityKeyIdentifier'),
                o('2.5.29.2', 'keyAttributes'),
                o('2.5.29.3', 'certificatePolicies'),
                o('2.5.29.4', 'keyUsageRestriction'),
                o('2.5.29.5', 'policyMapping'),
                o('2.5.29.6', 'subtreesConstraint'),
                o('2.5.29.7', 'subjectAltName'),
                o('2.5.29.8', 'issuerAltName'),
                o('2.5.29.9', 'subjectDirectoryAttributes'),
                o('2.5.29.10', 'basicConstraints'),
                o('2.5.29.11', 'nameConstraints'),
                o('2.5.29.12', 'policyConstraints'),
                o('2.5.29.13', 'basicConstraints'),
                s('2.5.29.14', 'subjectKeyIdentifier'),
                s('2.5.29.15', 'keyUsage'),
                o('2.5.29.16', 'privateKeyUsagePeriod'),
                s('2.5.29.17', 'subjectAltName'),
                s('2.5.29.18', 'issuerAltName'),
                s('2.5.29.19', 'basicConstraints'),
                o('2.5.29.20', 'cRLNumber'),
                o('2.5.29.21', 'cRLReason'),
                o('2.5.29.22', 'expirationDate'),
                o('2.5.29.23', 'instructionCode'),
                o('2.5.29.24', 'invalidityDate'),
                o('2.5.29.25', 'cRLDistributionPoints'),
                o('2.5.29.26', 'issuingDistributionPoint'),
                o('2.5.29.27', 'deltaCRLIndicator'),
                o('2.5.29.28', 'issuingDistributionPoint'),
                o('2.5.29.29', 'certificateIssuer'),
                o('2.5.29.30', 'nameConstraints'),
                s('2.5.29.31', 'cRLDistributionPoints'),
                s('2.5.29.32', 'certificatePolicies'),
                o('2.5.29.33', 'policyMappings'),
                o('2.5.29.34', 'policyConstraints'),
                s('2.5.29.35', 'authorityKeyIdentifier'),
                o('2.5.29.36', 'policyConstraints'),
                s('2.5.29.37', 'extKeyUsage'),
                o('2.5.29.46', 'freshestCRL'),
                o('2.5.29.54', 'inhibitAnyPolicy'),
                s('1.3.6.1.4.1.11129.2.4.2', 'timestampList'),
                s('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess'),
                s('1.3.6.1.5.5.7.3.1', 'serverAuth'),
                s('1.3.6.1.5.5.7.3.2', 'clientAuth'),
                s('1.3.6.1.5.5.7.3.3', 'codeSigning'),
                s('1.3.6.1.5.5.7.3.4', 'emailProtection'),
                s('1.3.6.1.5.5.7.3.8', 'timeStamping')
        },
        97450: (e, t, r) => {
            var i = r(3832)
            if (
                (r(8925),
                    r(3068),
                    r(33480),
                    r(28991),
                    r(66270),
                    r(98960),
                    r(26953),
                    r(49563),
                    r(69372),
                    r(28095),
                    r(97116),
                    void 0 === n)
            )
                var n = i.jsbn.BigInteger
            var s = i.asn1,
                o = (i.pki = i.pki || {})
            e.exports = o.pbe = i.pbe = i.pbe || {}
            var a = o.oids,
                u = {
                    name: 'EncryptedPrivateKeyInfo',
                    tagClass: s.Class.UNIVERSAL,
                    type: s.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'AlgorithmIdentifier.algorithm',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.OID,
                                    constructed: !1,
                                    capture: 'encryptionOid',
                                },
                                {
                                    name: 'AlgorithmIdentifier.parameters',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.SEQUENCE,
                                    constructed: !0,
                                    captureAsn1: 'encryptionParams',
                                },
                            ],
                        },
                        {
                            name: 'EncryptedPrivateKeyInfo.encryptedData',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.OCTETSTRING,
                            constructed: !1,
                            capture: 'encryptedData',
                        },
                    ],
                },
                c = {
                    name: 'PBES2Algorithms',
                    tagClass: s.Class.UNIVERSAL,
                    type: s.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'PBES2Algorithms.keyDerivationFunc',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'PBES2Algorithms.keyDerivationFunc.oid',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.OID,
                                    constructed: !1,
                                    capture: 'kdfOid',
                                },
                                {
                                    name: 'PBES2Algorithms.params',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.SEQUENCE,
                                    constructed: !0,
                                    value: [
                                        {
                                            name: 'PBES2Algorithms.params.salt',
                                            tagClass: s.Class.UNIVERSAL,
                                            type: s.Type.OCTETSTRING,
                                            constructed: !1,
                                            capture: 'kdfSalt',
                                        },
                                        {
                                            name: 'PBES2Algorithms.params.iterationCount',
                                            tagClass: s.Class.UNIVERSAL,
                                            type: s.Type.INTEGER,
                                            constructed: !1,
                                            capture: 'kdfIterationCount',
                                        },
                                        {
                                            name: 'PBES2Algorithms.params.keyLength',
                                            tagClass: s.Class.UNIVERSAL,
                                            type: s.Type.INTEGER,
                                            constructed: !1,
                                            optional: !0,
                                            capture: 'keyLength',
                                        },
                                        {
                                            name: 'PBES2Algorithms.params.prf',
                                            tagClass: s.Class.UNIVERSAL,
                                            type: s.Type.SEQUENCE,
                                            constructed: !0,
                                            optional: !0,
                                            value: [
                                                {
                                                    name: 'PBES2Algorithms.params.prf.algorithm',
                                                    tagClass: s.Class.UNIVERSAL,
                                                    type: s.Type.OID,
                                                    constructed: !1,
                                                    capture: 'prfOid',
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            name: 'PBES2Algorithms.encryptionScheme',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'PBES2Algorithms.encryptionScheme.oid',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.OID,
                                    constructed: !1,
                                    capture: 'encOid',
                                },
                                {
                                    name: 'PBES2Algorithms.encryptionScheme.iv',
                                    tagClass: s.Class.UNIVERSAL,
                                    type: s.Type.OCTETSTRING,
                                    constructed: !1,
                                    capture: 'encIv',
                                },
                            ],
                        },
                    ],
                },
                d = {
                    name: 'pkcs-12PbeParams',
                    tagClass: s.Class.UNIVERSAL,
                    type: s.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'pkcs-12PbeParams.salt',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.OCTETSTRING,
                            constructed: !1,
                            capture: 'salt',
                        },
                        {
                            name: 'pkcs-12PbeParams.iterations',
                            tagClass: s.Class.UNIVERSAL,
                            type: s.Type.INTEGER,
                            constructed: !1,
                            capture: 'iterations',
                        },
                    ],
                }
            function p(e, t) {
                return e.start().update(t).digest().getBytes()
            }
            function f(e) {
                var t
                if (e) {
                    if (!(t = o.oids[s.derToOid(e)])) {
                        var r = new Error('Unsupported PRF OID.')
                        throw (
                            ((r.oid = e),
                                (r.supported = [
                                    'hmacWithSHA1',
                                    'hmacWithSHA224',
                                    'hmacWithSHA256',
                                    'hmacWithSHA384',
                                    'hmacWithSHA512',
                                ]),
                                r)
                        )
                    }
                } else t = 'hmacWithSHA1'
                return l(t)
            }
            function l(e) {
                var t = i.md
                switch (e) {
                    case 'hmacWithSHA224':
                        t = i.md.sha512
                    case 'hmacWithSHA1':
                    case 'hmacWithSHA256':
                    case 'hmacWithSHA384':
                    case 'hmacWithSHA512':
                        e = e.substr(8).toLowerCase()
                        break
                    default:
                        var r = new Error('Unsupported PRF algorithm.')
                        throw (
                            ((r.algorithm = e),
                                (r.supported = [
                                    'hmacWithSHA1',
                                    'hmacWithSHA224',
                                    'hmacWithSHA256',
                                    'hmacWithSHA384',
                                    'hmacWithSHA512',
                                ]),
                                r)
                        )
                }
                if (!t || !(e in t)) throw new Error('Unknown hash algorithm: ' + e)
                return t[e].create()
            }
            ; (o.encryptPrivateKeyInfo = function (e, t, r) {
                ; ((r = r || {}).saltSize = r.saltSize || 8),
                    (r.count = r.count || 2048),
                    (r.algorithm = r.algorithm || 'aes128'),
                    (r.prfAlgorithm = r.prfAlgorithm || 'sha1')
                var n,
                    u,
                    c,
                    d = i.random.getBytesSync(r.saltSize),
                    p = r.count,
                    f = s.integerToDer(p)
                if (0 === r.algorithm.indexOf('aes') || 'des' === r.algorithm) {
                    var h, g, y
                    switch (r.algorithm) {
                        case 'aes128':
                            ; (n = 16),
                                (h = 16),
                                (g = a['aes128-CBC']),
                                (y = i.aes.createEncryptionCipher)
                            break
                        case 'aes192':
                            ; (n = 24),
                                (h = 16),
                                (g = a['aes192-CBC']),
                                (y = i.aes.createEncryptionCipher)
                            break
                        case 'aes256':
                            ; (n = 32),
                                (h = 16),
                                (g = a['aes256-CBC']),
                                (y = i.aes.createEncryptionCipher)
                            break
                        case 'des':
                            ; (n = 8),
                                (h = 8),
                                (g = a.desCBC),
                                (y = i.des.createEncryptionCipher)
                            break
                        default:
                            throw (
                                (((I = new Error(
                                    'Cannot encrypt private key. Unknown encryption algorithm.'
                                )).algorithm = r.algorithm),
                                    I)
                            )
                    }
                    var m = 'hmacWith' + r.prfAlgorithm.toUpperCase(),
                        v = l(m),
                        b = i.pkcs5.pbkdf2(t, d, p, n, v),
                        w = i.random.getBytesSync(h)
                        ; (C = y(b)).start(w),
                            C.update(s.toDer(e)),
                            C.finish(),
                            (c = C.output.getBytes())
                    var E = (function (e, t, r, n) {
                        var a = s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                            s.create(s.Class.UNIVERSAL, s.Type.OCTETSTRING, !1, e),
                            s.create(s.Class.UNIVERSAL, s.Type.INTEGER, !1, t.getBytes()),
                        ])
                        'hmacWithSHA1' !== n &&
                            a.value.push(
                                s.create(
                                    s.Class.UNIVERSAL,
                                    s.Type.INTEGER,
                                    !1,
                                    i.util.hexToBytes(r.toString(16))
                                ),
                                s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                                    s.create(
                                        s.Class.UNIVERSAL,
                                        s.Type.OID,
                                        !1,
                                        s.oidToDer(o.oids[n]).getBytes()
                                    ),
                                    s.create(s.Class.UNIVERSAL, s.Type.NULL, !1, ''),
                                ])
                            )
                        return a
                    })(d, f, n, m)
                    u = s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                        s.create(
                            s.Class.UNIVERSAL,
                            s.Type.OID,
                            !1,
                            s.oidToDer(a.pkcs5PBES2).getBytes()
                        ),
                        s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                            s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                                s.create(
                                    s.Class.UNIVERSAL,
                                    s.Type.OID,
                                    !1,
                                    s.oidToDer(a.pkcs5PBKDF2).getBytes()
                                ),
                                E,
                            ]),
                            s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                                s.create(
                                    s.Class.UNIVERSAL,
                                    s.Type.OID,
                                    !1,
                                    s.oidToDer(g).getBytes()
                                ),
                                s.create(s.Class.UNIVERSAL, s.Type.OCTETSTRING, !1, w),
                            ]),
                        ]),
                    ])
                } else {
                    var I
                    if ('3des' !== r.algorithm)
                        throw (
                            (((I = new Error(
                                'Cannot encrypt private key. Unknown encryption algorithm.'
                            )).algorithm = r.algorithm),
                                I)
                        )
                    n = 24
                    var C,
                        S = new i.util.ByteBuffer(d)
                        ; (b = o.pbe.generatePkcs12Key(t, S, 1, p, n)),
                            (w = o.pbe.generatePkcs12Key(t, S, 2, p, n))
                        ; (C = i.des.createEncryptionCipher(b)).start(w),
                            C.update(s.toDer(e)),
                            C.finish(),
                            (c = C.output.getBytes()),
                            (u = s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                                s.create(
                                    s.Class.UNIVERSAL,
                                    s.Type.OID,
                                    !1,
                                    s.oidToDer(a['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()
                                ),
                                s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                                    s.create(s.Class.UNIVERSAL, s.Type.OCTETSTRING, !1, d),
                                    s.create(s.Class.UNIVERSAL, s.Type.INTEGER, !1, f.getBytes()),
                                ]),
                            ]))
                }
                return s.create(s.Class.UNIVERSAL, s.Type.SEQUENCE, !0, [
                    u,
                    s.create(s.Class.UNIVERSAL, s.Type.OCTETSTRING, !1, c),
                ])
            }),
                (o.decryptPrivateKeyInfo = function (e, t) {
                    var r = null,
                        n = {},
                        a = []
                    if (!s.validate(e, u, n, a)) {
                        var c = new Error(
                            'Cannot read encrypted private key. ASN.1 object is not a supported EncryptedPrivateKeyInfo.'
                        )
                        throw ((c.errors = a), c)
                    }
                    var d = s.derToOid(n.encryptionOid),
                        p = o.pbe.getCipher(d, n.encryptionParams, t),
                        f = i.util.createBuffer(n.encryptedData)
                    return p.update(f), p.finish() && (r = s.fromDer(p.output)), r
                }),
                (o.encryptedPrivateKeyToPem = function (e, t) {
                    var r = { type: 'ENCRYPTED PRIVATE KEY', body: s.toDer(e).getBytes() }
                    return i.pem.encode(r, { maxline: t })
                }),
                (o.encryptedPrivateKeyFromPem = function (e) {
                    var t = i.pem.decode(e)[0]
                    if ('ENCRYPTED PRIVATE KEY' !== t.type) {
                        var r = new Error(
                            'Could not convert encrypted private key from PEM; PEM header type is "ENCRYPTED PRIVATE KEY".'
                        )
                        throw ((r.headerType = t.type), r)
                    }
                    if (t.procType && 'ENCRYPTED' === t.procType.type)
                        throw new Error(
                            'Could not convert encrypted private key from PEM; PEM is encrypted.'
                        )
                    return s.fromDer(t.body)
                }),
                (o.encryptRsaPrivateKey = function (e, t, r) {
                    if (!(r = r || {}).legacy) {
                        var n = o.wrapRsaPrivateKey(o.privateKeyToAsn1(e))
                        return (
                            (n = o.encryptPrivateKeyInfo(n, t, r)),
                            o.encryptedPrivateKeyToPem(n)
                        )
                    }
                    var a, u, c, d
                    switch (r.algorithm) {
                        case 'aes128':
                            ; (a = 'AES-128-CBC'),
                                (c = 16),
                                (u = i.random.getBytesSync(16)),
                                (d = i.aes.createEncryptionCipher)
                            break
                        case 'aes192':
                            ; (a = 'AES-192-CBC'),
                                (c = 24),
                                (u = i.random.getBytesSync(16)),
                                (d = i.aes.createEncryptionCipher)
                            break
                        case 'aes256':
                            ; (a = 'AES-256-CBC'),
                                (c = 32),
                                (u = i.random.getBytesSync(16)),
                                (d = i.aes.createEncryptionCipher)
                            break
                        case '3des':
                            ; (a = 'DES-EDE3-CBC'),
                                (c = 24),
                                (u = i.random.getBytesSync(8)),
                                (d = i.des.createEncryptionCipher)
                            break
                        case 'des':
                            ; (a = 'DES-CBC'),
                                (c = 8),
                                (u = i.random.getBytesSync(8)),
                                (d = i.des.createEncryptionCipher)
                            break
                        default:
                            var p = new Error(
                                'Could not encrypt RSA private key; unsupported encryption algorithm "' +
                                r.algorithm +
                                '".'
                            )
                            throw ((p.algorithm = r.algorithm), p)
                    }
                    var f = d(i.pbe.opensslDeriveBytes(t, u.substr(0, 8), c))
                    f.start(u), f.update(s.toDer(o.privateKeyToAsn1(e))), f.finish()
                    var l = {
                        type: 'RSA PRIVATE KEY',
                        procType: { version: '4', type: 'ENCRYPTED' },
                        dekInfo: {
                            algorithm: a,
                            parameters: i.util.bytesToHex(u).toUpperCase(),
                        },
                        body: f.output.getBytes(),
                    }
                    return i.pem.encode(l)
                }),
                (o.decryptRsaPrivateKey = function (e, t) {
                    var r = null,
                        n = i.pem.decode(e)[0]
                    if (
                        'ENCRYPTED PRIVATE KEY' !== n.type &&
                        'PRIVATE KEY' !== n.type &&
                        'RSA PRIVATE KEY' !== n.type
                    )
                        throw (
                            (((c = new Error(
                                'Could not convert private key from PEM; PEM header type is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".'
                            )).headerType = c),
                                c)
                        )
                    if (n.procType && 'ENCRYPTED' === n.procType.type) {
                        var a, u
                        switch (n.dekInfo.algorithm) {
                            case 'DES-CBC':
                                ; (a = 8), (u = i.des.createDecryptionCipher)
                                break
                            case 'DES-EDE3-CBC':
                                ; (a = 24), (u = i.des.createDecryptionCipher)
                                break
                            case 'AES-128-CBC':
                                ; (a = 16), (u = i.aes.createDecryptionCipher)
                                break
                            case 'AES-192-CBC':
                                ; (a = 24), (u = i.aes.createDecryptionCipher)
                                break
                            case 'AES-256-CBC':
                                ; (a = 32), (u = i.aes.createDecryptionCipher)
                                break
                            case 'RC2-40-CBC':
                                ; (a = 5),
                                    (u = function (e) {
                                        return i.rc2.createDecryptionCipher(e, 40)
                                    })
                                break
                            case 'RC2-64-CBC':
                                ; (a = 8),
                                    (u = function (e) {
                                        return i.rc2.createDecryptionCipher(e, 64)
                                    })
                                break
                            case 'RC2-128-CBC':
                                ; (a = 16),
                                    (u = function (e) {
                                        return i.rc2.createDecryptionCipher(e, 128)
                                    })
                                break
                            default:
                                var c
                                throw (
                                    (((c = new Error(
                                        'Could not decrypt private key; unsupported encryption algorithm "' +
                                        n.dekInfo.algorithm +
                                        '".'
                                    )).algorithm = n.dekInfo.algorithm),
                                        c)
                                )
                        }
                        var d = i.util.hexToBytes(n.dekInfo.parameters),
                            p = u(i.pbe.opensslDeriveBytes(t, d.substr(0, 8), a))
                        if (
                            (p.start(d), p.update(i.util.createBuffer(n.body)), !p.finish())
                        )
                            return r
                        r = p.output.getBytes()
                    } else r = n.body
                    return (
                        null !==
                        (r =
                            'ENCRYPTED PRIVATE KEY' === n.type
                                ? o.decryptPrivateKeyInfo(s.fromDer(r), t)
                                : s.fromDer(r)) && (r = o.privateKeyFromAsn1(r)),
                        r
                    )
                }),
                (o.pbe.generatePkcs12Key = function (e, t, r, n, s, o) {
                    var a, u
                    if (null == o) {
                        if (!('sha1' in i.md))
                            throw new Error('"sha1" hash algorithm unavailable.')
                        o = i.md.sha1.create()
                    }
                    var c = o.digestLength,
                        d = o.blockLength,
                        p = new i.util.ByteBuffer(),
                        f = new i.util.ByteBuffer()
                    if (null != e) {
                        for (u = 0; u < e.length; u++) f.putInt16(e.charCodeAt(u))
                        f.putInt16(0)
                    }
                    var l = f.length(),
                        h = t.length(),
                        g = new i.util.ByteBuffer()
                    g.fillWithByte(r, d)
                    var y = d * Math.ceil(h / d),
                        m = new i.util.ByteBuffer()
                    for (u = 0; u < y; u++) m.putByte(t.at(u % h))
                    var v = d * Math.ceil(l / d),
                        b = new i.util.ByteBuffer()
                    for (u = 0; u < v; u++) b.putByte(f.at(u % l))
                    var w = m
                    w.putBuffer(b)
                    for (var E = Math.ceil(s / c), I = 1; I <= E; I++) {
                        var C = new i.util.ByteBuffer()
                        C.putBytes(g.bytes()), C.putBytes(w.bytes())
                        for (var S = 0; S < n; S++)
                            o.start(), o.update(C.getBytes()), (C = o.digest())
                        var A = new i.util.ByteBuffer()
                        for (u = 0; u < d; u++) A.putByte(C.at(u % c))
                        var T = Math.ceil(h / d) + Math.ceil(l / d),
                            N = new i.util.ByteBuffer()
                        for (a = 0; a < T; a++) {
                            var _ = new i.util.ByteBuffer(w.getBytes(d)),
                                B = 511
                            for (u = A.length() - 1; u >= 0; u--)
                                (B >>= 8), (B += A.at(u) + _.at(u)), _.setAt(u, 255 & B)
                            N.putBuffer(_)
                        }
                        ; (w = N), p.putBuffer(C)
                    }
                    return p.truncate(p.length() - s), p
                }),
                (o.pbe.getCipher = function (e, t, r) {
                    switch (e) {
                        case o.oids.pkcs5PBES2:
                            return o.pbe.getCipherForPBES2(e, t, r)
                        case o.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
                        case o.oids['pbewithSHAAnd40BitRC2-CBC']:
                            return o.pbe.getCipherForPKCS12PBE(e, t, r)
                        default:
                            var i = new Error(
                                'Cannot read encrypted PBE data block. Unsupported OID.'
                            )
                            throw (
                                ((i.oid = e),
                                    (i.supportedOids = [
                                        'pkcs5PBES2',
                                        'pbeWithSHAAnd3-KeyTripleDES-CBC',
                                        'pbewithSHAAnd40BitRC2-CBC',
                                    ]),
                                    i)
                            )
                    }
                }),
                (o.pbe.getCipherForPBES2 = function (e, t, r) {
                    var n,
                        a = {},
                        u = []
                    if (!s.validate(t, c, a, u))
                        throw (
                            (((n = new Error(
                                'Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.'
                            )).errors = u),
                                n)
                        )
                    if ((e = s.derToOid(a.kdfOid)) !== o.oids.pkcs5PBKDF2)
                        throw (
                            (((n = new Error(
                                'Cannot read encrypted private key. Unsupported key derivation function OID.'
                            )).oid = e),
                                (n.supportedOids = ['pkcs5PBKDF2']),
                                n)
                        )
                    if (
                        (e = s.derToOid(a.encOid)) !== o.oids['aes128-CBC'] &&
                        e !== o.oids['aes192-CBC'] &&
                        e !== o.oids['aes256-CBC'] &&
                        e !== o.oids['des-EDE3-CBC'] &&
                        e !== o.oids.desCBC
                    )
                        throw (
                            (((n = new Error(
                                'Cannot read encrypted private key. Unsupported encryption scheme OID.'
                            )).oid = e),
                                (n.supportedOids = [
                                    'aes128-CBC',
                                    'aes192-CBC',
                                    'aes256-CBC',
                                    'des-EDE3-CBC',
                                    'desCBC',
                                ]),
                                n)
                        )
                    var d,
                        p,
                        l = a.kdfSalt,
                        h = i.util.createBuffer(a.kdfIterationCount)
                    switch (((h = h.getInt(h.length() << 3)), o.oids[e])) {
                        case 'aes128-CBC':
                            ; (d = 16), (p = i.aes.createDecryptionCipher)
                            break
                        case 'aes192-CBC':
                            ; (d = 24), (p = i.aes.createDecryptionCipher)
                            break
                        case 'aes256-CBC':
                            ; (d = 32), (p = i.aes.createDecryptionCipher)
                            break
                        case 'des-EDE3-CBC':
                            ; (d = 24), (p = i.des.createDecryptionCipher)
                            break
                        case 'desCBC':
                            ; (d = 8), (p = i.des.createDecryptionCipher)
                    }
                    var g = f(a.prfOid),
                        y = i.pkcs5.pbkdf2(r, l, h, d, g),
                        m = a.encIv,
                        v = p(y)
                    return v.start(m), v
                }),
                (o.pbe.getCipherForPKCS12PBE = function (e, t, r) {
                    var n = {},
                        a = []
                    if (!s.validate(t, d, n, a))
                        throw (
                            (((g = new Error(
                                'Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.'
                            )).errors = a),
                                g)
                        )
                    var u,
                        c,
                        p,
                        l = i.util.createBuffer(n.salt),
                        h = i.util.createBuffer(n.iterations)
                    switch (((h = h.getInt(h.length() << 3)), e)) {
                        case o.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
                            ; (u = 24), (c = 8), (p = i.des.startDecrypting)
                            break
                        case o.oids['pbewithSHAAnd40BitRC2-CBC']:
                            ; (u = 5),
                                (c = 8),
                                (p = function (e, t) {
                                    var r = i.rc2.createDecryptionCipher(e, 40)
                                    return r.start(t, null), r
                                })
                            break
                        default:
                            var g
                            throw (
                                (((g = new Error(
                                    'Cannot read PKCS #12 PBE data block. Unsupported OID.'
                                )).oid = e),
                                    g)
                            )
                    }
                    var y = f(n.prfOid),
                        m = o.pbe.generatePkcs12Key(r, l, 1, h, u, y)
                    return y.start(), p(m, o.pbe.generatePkcs12Key(r, l, 2, h, c, y))
                }),
                (o.pbe.opensslDeriveBytes = function (e, t, r, n) {
                    if (null == n) {
                        if (!('md5' in i.md))
                            throw new Error('"md5" hash algorithm unavailable.')
                        n = i.md.md5.create()
                    }
                    null === t && (t = '')
                    for (var s = [p(n, e + t)], o = 16, a = 1; o < r; ++a, o += 16)
                        s.push(p(n, s[a - 1] + e + t))
                    return s.join('').substr(0, r)
                })
        },
        98960: (e, t, r) => {
            var i = r(3832)
            r(36607), r(28991), r(97116)
            var n,
                s = (i.pkcs5 = i.pkcs5 || {})
            i.util.isNodejs && !i.options.usePureJavaScript && (n = r(25819)),
                (e.exports =
                    i.pbkdf2 =
                    s.pbkdf2 =
                    function (e, t, r, s, o, a) {
                        if (
                            ('function' == typeof o && ((a = o), (o = null)),
                                i.util.isNodejs &&
                                !i.options.usePureJavaScript &&
                                n.pbkdf2 &&
                                (null === o || 'object' != typeof o) &&
                                (n.pbkdf2Sync.length > 4 || !o || 'sha1' === o))
                        )
                            return (
                                'string' != typeof o && (o = 'sha1'),
                                (e = Buffer.from(e, 'binary')),
                                (t = Buffer.from(t, 'binary')),
                                a
                                    ? 4 === n.pbkdf2Sync.length
                                        ? n.pbkdf2(e, t, r, s, function (e, t) {
                                            if (e) return a(e)
                                            a(null, t.toString('binary'))
                                        })
                                        : n.pbkdf2(e, t, r, s, o, function (e, t) {
                                            if (e) return a(e)
                                            a(null, t.toString('binary'))
                                        })
                                    : 4 === n.pbkdf2Sync.length
                                        ? n.pbkdf2Sync(e, t, r, s).toString('binary')
                                        : n.pbkdf2Sync(e, t, r, s, o).toString('binary')
                            )
                        if ((null == o && (o = 'sha1'), 'string' == typeof o)) {
                            if (!(o in i.md.algorithms))
                                throw new Error('Unknown hash algorithm: ' + o)
                            o = i.md[o].create()
                        }
                        var u = o.digestLength
                        if (s > 4294967295 * u) {
                            var c = new Error('Derived key is too long.')
                            if (a) return a(c)
                            throw c
                        }
                        var d = Math.ceil(s / u),
                            p = s - (d - 1) * u,
                            f = i.hmac.create()
                        f.start(o, e)
                        var l,
                            h,
                            g,
                            y = ''
                        if (!a) {
                            for (var m = 1; m <= d; ++m) {
                                f.start(null, null),
                                    f.update(t),
                                    f.update(i.util.int32ToBytes(m)),
                                    (l = g = f.digest().getBytes())
                                for (var v = 2; v <= r; ++v)
                                    f.start(null, null),
                                        f.update(g),
                                        (h = f.digest().getBytes()),
                                        (l = i.util.xorBytes(l, h, u)),
                                        (g = h)
                                y += m < d ? l : l.substr(0, p)
                            }
                            return y
                        }
                        m = 1
                        function b() {
                            if (m > d) return a(null, y)
                            f.start(null, null),
                                f.update(t),
                                f.update(i.util.int32ToBytes(m)),
                                (l = g = f.digest().getBytes()),
                                (v = 2),
                                w()
                        }
                        function w() {
                            if (v <= r)
                                return (
                                    f.start(null, null),
                                    f.update(g),
                                    (h = f.digest().getBytes()),
                                    (l = i.util.xorBytes(l, h, u)),
                                    (g = h),
                                    ++v,
                                    i.util.setImmediate(w)
                                )
                                    ; (y += m < d ? l : l.substr(0, p)), ++m, b()
                        }
                        b()
                    })
        },
        26953: (e, t, r) => {
            var i = r(3832)
            r(97116)
            var n = (e.exports = i.pem = i.pem || {})
            function s(e) {
                for (
                    var t = e.name + ': ',
                    r = [],
                    i = function (e, t) {
                        return ' ' + t
                    },
                    n = 0;
                    n < e.values.length;
                    ++n
                )
                    r.push(e.values[n].replace(/^(\S+\r\n)/, i))
                t += r.join(',') + '\r\n'
                var s = 0,
                    o = -1
                for (n = 0; n < t.length; ++n, ++s)
                    if (s > 65 && -1 !== o) {
                        var a = t[o]
                        ',' === a
                            ? (++o, (t = t.substr(0, o) + '\r\n ' + t.substr(o)))
                            : (t = t.substr(0, o) + '\r\n' + a + t.substr(o + 1)),
                            (s = n - o - 1),
                            (o = -1),
                            ++n
                    } else (' ' !== t[n] && '\t' !== t[n] && ',' !== t[n]) || (o = n)
                return t
            }
            function o(e) {
                return e.replace(/^\s+/, '')
            }
            ; (n.encode = function (e, t) {
                t = t || {}
                var r,
                    n = '-----BEGIN ' + e.type + '-----\r\n'
                if (
                    (e.procType &&
                        (n += s(
                            (r = {
                                name: 'Proc-Type',
                                values: [String(e.procType.version), e.procType.type],
                            })
                        )),
                        e.contentDomain &&
                        (n += s(
                            (r = { name: 'Content-Domain', values: [e.contentDomain] })
                        )),
                        e.dekInfo &&
                        ((r = { name: 'DEK-Info', values: [e.dekInfo.algorithm] }),
                            e.dekInfo.parameters && r.values.push(e.dekInfo.parameters),
                            (n += s(r))),
                        e.headers)
                )
                    for (var o = 0; o < e.headers.length; ++o) n += s(e.headers[o])
                return (
                    e.procType && (n += '\r\n'),
                    (n += i.util.encode64(e.body, t.maxline || 64) + '\r\n'),
                    (n += '-----END ' + e.type + '-----\r\n')
                )
            }),
                (n.decode = function (e) {
                    for (
                        var t,
                        r = [],
                        n =
                            /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g,
                        s = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/,
                        a = /\r?\n/;
                        (t = n.exec(e));

                    ) {
                        var u = t[1]
                        'NEW CERTIFICATE REQUEST' === u && (u = 'CERTIFICATE REQUEST')
                        var c = {
                            type: u,
                            procType: null,
                            contentDomain: null,
                            dekInfo: null,
                            headers: [],
                            body: i.util.decode64(t[3]),
                        }
                        if ((r.push(c), t[2])) {
                            for (var d = t[2].split(a), p = 0; t && p < d.length;) {
                                for (
                                    var f = d[p].replace(/\s+$/, ''), l = p + 1;
                                    l < d.length;
                                    ++l
                                ) {
                                    var h = d[l]
                                    if (!/\s/.test(h[0])) break
                                        ; (f += h), (p = l)
                                }
                                if ((t = f.match(s))) {
                                    for (
                                        var g = { name: t[1], values: [] },
                                        y = t[2].split(','),
                                        m = 0;
                                        m < y.length;
                                        ++m
                                    )
                                        g.values.push(o(y[m]))
                                    if (c.procType)
                                        if (c.contentDomain || 'Content-Domain' !== g.name)
                                            if (c.dekInfo || 'DEK-Info' !== g.name) c.headers.push(g)
                                            else {
                                                if (0 === g.values.length)
                                                    throw new Error(
                                                        'Invalid PEM formatted message. The "DEK-Info" header must have at least one subfield.'
                                                    )
                                                c.dekInfo = {
                                                    algorithm: y[0],
                                                    parameters: y[1] || null,
                                                }
                                            }
                                        else c.contentDomain = y[0] || ''
                                    else {
                                        if ('Proc-Type' !== g.name)
                                            throw new Error(
                                                'Invalid PEM formatted message. The first encapsulated header must be "Proc-Type".'
                                            )
                                        if (2 !== g.values.length)
                                            throw new Error(
                                                'Invalid PEM formatted message. The "Proc-Type" header must have two subfields.'
                                            )
                                        c.procType = { version: y[0], type: y[1] }
                                    }
                                }
                                ++p
                            }
                            if ('ENCRYPTED' === c.procType && !c.dekInfo)
                                throw new Error(
                                    'Invalid PEM formatted message. The "DEK-Info" header must be present if "Proc-Type" is "ENCRYPTED".'
                                )
                        }
                    }
                    if (0 === r.length) throw new Error('Invalid PEM formatted message.')
                    return r
                })
        },
        18936: (e, t, r) => {
            var i = r(3832)
            r(97116), r(49563), r(137)
            var n = (e.exports = i.pkcs1 = i.pkcs1 || {})
            function s(e, t, r) {
                r || (r = i.md.sha1.create())
                for (var n = '', s = Math.ceil(t / r.digestLength), o = 0; o < s; ++o) {
                    var a = String.fromCharCode(
                        (o >> 24) & 255,
                        (o >> 16) & 255,
                        (o >> 8) & 255,
                        255 & o
                    )
                    r.start(), r.update(e + a), (n += r.digest().getBytes())
                }
                return n.substring(0, t)
            }
            ; (n.encode_rsa_oaep = function (e, t, r) {
                var n, o, a, u
                'string' == typeof r
                    ? ((n = r),
                        (o = arguments[3] || void 0),
                        (a = arguments[4] || void 0))
                    : r &&
                    ((n = r.label || void 0),
                        (o = r.seed || void 0),
                        (a = r.md || void 0),
                        r.mgf1 && r.mgf1.md && (u = r.mgf1.md)),
                    a ? a.start() : (a = i.md.sha1.create()),
                    u || (u = a)
                var c = Math.ceil(e.n.bitLength() / 8),
                    d = c - 2 * a.digestLength - 2
                if (t.length > d)
                    throw (
                        (((y = new Error(
                            'RSAES-OAEP input message length is too long.'
                        )).length = t.length),
                            (y.maxLength = d),
                            y)
                    )
                n || (n = ''), a.update(n, 'raw')
                for (var p = a.digest(), f = '', l = d - t.length, h = 0; h < l; h++)
                    f += '\0'
                var g = p.getBytes() + f + '' + t
                if (o) {
                    if (o.length !== a.digestLength) {
                        var y
                        throw (
                            (((y = new Error(
                                'Invalid RSAES-OAEP seed. The seed length must match the digest length.'
                            )).seedLength = o.length),
                                (y.digestLength = a.digestLength),
                                y)
                        )
                    }
                } else o = i.random.getBytes(a.digestLength)
                var m = s(o, c - a.digestLength - 1, u),
                    v = i.util.xorBytes(g, m, g.length),
                    b = s(v, a.digestLength, u)
                return '\0' + i.util.xorBytes(o, b, o.length) + v
            }),
                (n.decode_rsa_oaep = function (e, t, r) {
                    var n, o, a
                    'string' == typeof r
                        ? ((n = r), (o = arguments[3] || void 0))
                        : r &&
                        ((n = r.label || void 0),
                            (o = r.md || void 0),
                            r.mgf1 && r.mgf1.md && (a = r.mgf1.md))
                    var u = Math.ceil(e.n.bitLength() / 8)
                    if (t.length !== u)
                        throw (
                            (((m = new Error(
                                'RSAES-OAEP encoded message length is invalid.'
                            )).length = t.length),
                                (m.expectedLength = u),
                                m)
                        )
                    if (
                        (void 0 === o ? (o = i.md.sha1.create()) : o.start(),
                            a || (a = o),
                            u < 2 * o.digestLength + 2)
                    )
                        throw new Error(
                            'RSAES-OAEP key is too short for the hash function.'
                        )
                    n || (n = ''), o.update(n, 'raw')
                    for (
                        var c = o.digest().getBytes(),
                        d = t.charAt(0),
                        p = t.substring(1, o.digestLength + 1),
                        f = t.substring(1 + o.digestLength),
                        l = s(f, o.digestLength, a),
                        h = s(i.util.xorBytes(p, l, p.length), u - o.digestLength - 1, a),
                        g = i.util.xorBytes(f, h, f.length),
                        y = g.substring(0, o.digestLength),
                        m = '\0' !== d,
                        v = 0;
                        v < o.digestLength;
                        ++v
                    )
                        m |= c.charAt(v) !== y.charAt(v)
                    for (
                        var b = 1, w = o.digestLength, E = o.digestLength;
                        E < g.length;
                        E++
                    ) {
                        var I = g.charCodeAt(E)
                            ; (m |= I & (b ? 65534 : 0)), (w += b &= (1 & I) ^ 1)
                    }
                    if (m || 1 !== g.charCodeAt(w))
                        throw new Error('Invalid RSAES-OAEP padding.')
                    return g.substring(w + 1)
                })
        },
        55147: (e, t, r) => {
            var i = r(3832)
            r(3068),
                r(36607),
                r(66270),
                r(95496),
                r(97450),
                r(49563),
                r(28095),
                r(137),
                r(97116),
                r(25414)
            var n = i.asn1,
                s = i.pki,
                o = (e.exports = i.pkcs12 = i.pkcs12 || {}),
                a = {
                    name: 'ContentInfo',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'ContentInfo.contentType',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.OID,
                            constructed: !1,
                            capture: 'contentType',
                        },
                        {
                            name: 'ContentInfo.content',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            constructed: !0,
                            captureAsn1: 'content',
                        },
                    ],
                },
                u = {
                    name: 'PFX',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'PFX.version',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.INTEGER,
                            constructed: !1,
                            capture: 'version',
                        },
                        a,
                        {
                            name: 'PFX.macData',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            optional: !0,
                            captureAsn1: 'mac',
                            value: [
                                {
                                    name: 'PFX.macData.mac',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    value: [
                                        {
                                            name: 'PFX.macData.mac.digestAlgorithm',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.SEQUENCE,
                                            constructed: !0,
                                            value: [
                                                {
                                                    name: 'PFX.macData.mac.digestAlgorithm.algorithm',
                                                    tagClass: n.Class.UNIVERSAL,
                                                    type: n.Type.OID,
                                                    constructed: !1,
                                                    capture: 'macAlgorithm',
                                                },
                                                {
                                                    name: 'PFX.macData.mac.digestAlgorithm.parameters',
                                                    tagClass: n.Class.UNIVERSAL,
                                                    captureAsn1: 'macAlgorithmParameters',
                                                },
                                            ],
                                        },
                                        {
                                            name: 'PFX.macData.mac.digest',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.OCTETSTRING,
                                            constructed: !1,
                                            capture: 'macDigest',
                                        },
                                    ],
                                },
                                {
                                    name: 'PFX.macData.macSalt',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.OCTETSTRING,
                                    constructed: !1,
                                    capture: 'macSalt',
                                },
                                {
                                    name: 'PFX.macData.iterations',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.INTEGER,
                                    constructed: !1,
                                    optional: !0,
                                    capture: 'macIterations',
                                },
                            ],
                        },
                    ],
                },
                c = {
                    name: 'SafeBag',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'SafeBag.bagId',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.OID,
                            constructed: !1,
                            capture: 'bagId',
                        },
                        {
                            name: 'SafeBag.bagValue',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            constructed: !0,
                            captureAsn1: 'bagValue',
                        },
                        {
                            name: 'SafeBag.bagAttributes',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SET,
                            constructed: !0,
                            optional: !0,
                            capture: 'bagAttributes',
                        },
                    ],
                },
                d = {
                    name: 'Attribute',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'Attribute.attrId',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.OID,
                            constructed: !1,
                            capture: 'oid',
                        },
                        {
                            name: 'Attribute.attrValues',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SET,
                            constructed: !0,
                            capture: 'values',
                        },
                    ],
                },
                p = {
                    name: 'CertBag',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'CertBag.certId',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.OID,
                            constructed: !1,
                            capture: 'certId',
                        },
                        {
                            name: 'CertBag.certValue',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            constructed: !0,
                            value: [
                                {
                                    name: 'CertBag.certValue[0]',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Class.OCTETSTRING,
                                    constructed: !1,
                                    capture: 'cert',
                                },
                            ],
                        },
                    ],
                }
            function f(e, t, r, i) {
                for (var n = [], s = 0; s < e.length; s++)
                    for (var o = 0; o < e[s].safeBags.length; o++) {
                        var a = e[s].safeBags[o]
                            ; (void 0 !== i && a.type !== i) ||
                                (null !== t
                                    ? void 0 !== a.attributes[t] &&
                                    a.attributes[t].indexOf(r) >= 0 &&
                                    n.push(a)
                                    : n.push(a))
                    }
                return n
            }
            function l(e) {
                if (e.composed || e.constructed) {
                    for (var t = i.util.createBuffer(), r = 0; r < e.value.length; ++r)
                        t.putBytes(e.value[r].value)
                            ; (e.composed = e.constructed = !1), (e.value = t.getBytes())
                }
                return e
            }
            function h(e, t) {
                var r = {},
                    o = []
                if (!n.validate(e, i.pkcs7.asn1.encryptedDataValidator, r, o))
                    throw (
                        (((a = new Error('Cannot read EncryptedContentInfo.')).errors = o),
                            a)
                    )
                var a,
                    u = n.derToOid(r.contentType)
                if (u !== s.oids.data)
                    throw (
                        (((a = new Error(
                            'PKCS#12 EncryptedContentInfo ContentType is not Data.'
                        )).oid = u),
                            a)
                    )
                u = n.derToOid(r.encAlgorithm)
                var c = s.pbe.getCipher(u, r.encParameter, t),
                    d = l(r.encryptedContentAsn1),
                    p = i.util.createBuffer(d.value)
                if ((c.update(p), !c.finish()))
                    throw new Error('Failed to decrypt PKCS#12 SafeContents.')
                return c.output.getBytes()
            }
            function g(e, t, r) {
                if (!t && 0 === e.length) return []
                if (
                    (e = n.fromDer(e, t)).tagClass !== n.Class.UNIVERSAL ||
                    e.type !== n.Type.SEQUENCE ||
                    !0 !== e.constructed
                )
                    throw new Error(
                        'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.'
                    )
                for (var i = [], o = 0; o < e.value.length; o++) {
                    var a = e.value[o],
                        u = {},
                        d = []
                    if (!n.validate(a, c, u, d))
                        throw (((m = new Error('Cannot read SafeBag.')).errors = d), m)
                    var f,
                        l,
                        h = { type: n.derToOid(u.bagId), attributes: y(u.bagAttributes) }
                    i.push(h)
                    var g = u.bagValue.value[0]
                    switch (h.type) {
                        case s.oids.pkcs8ShroudedKeyBag:
                            if (null === (g = s.decryptPrivateKeyInfo(g, r)))
                                throw new Error(
                                    'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?'
                                )
                        case s.oids.keyBag:
                            try {
                                h.key = s.privateKeyFromAsn1(g)
                            } catch (v) {
                                ; (h.key = null), (h.asn1 = g)
                            }
                            continue
                        case s.oids.certBag:
                            ; (f = p),
                                (l = function () {
                                    if (n.derToOid(u.certId) !== s.oids.x509Certificate) {
                                        var e = new Error(
                                            'Unsupported certificate type, only X.509 supported.'
                                        )
                                        throw ((e.oid = n.derToOid(u.certId)), e)
                                    }
                                    var r = n.fromDer(u.cert, t)
                                    try {
                                        h.cert = s.certificateFromAsn1(r, !0)
                                    } catch (v) {
                                        ; (h.cert = null), (h.asn1 = r)
                                    }
                                })
                            break
                        default:
                            var m
                            throw (
                                (((m = new Error('Unsupported PKCS#12 SafeBag type.')).oid =
                                    h.type),
                                    m)
                            )
                    }
                    if (void 0 !== f && !n.validate(g, f, u, d))
                        throw (
                            (((m = new Error('Cannot read PKCS#12 ' + f.name)).errors = d), m)
                        )
                    l()
                }
                return i
            }
            function y(e) {
                var t = {}
                if (void 0 !== e)
                    for (var r = 0; r < e.length; ++r) {
                        var i = {},
                            o = []
                        if (!n.validate(e[r], d, i, o)) {
                            var a = new Error('Cannot read PKCS#12 BagAttribute.')
                            throw ((a.errors = o), a)
                        }
                        var u = n.derToOid(i.oid)
                        if (void 0 !== s.oids[u]) {
                            t[s.oids[u]] = []
                            for (var c = 0; c < i.values.length; ++c)
                                t[s.oids[u]].push(i.values[c].value)
                        }
                    }
                return t
            }
            ; (o.pkcs12FromAsn1 = function (e, t, r) {
                'string' == typeof t ? ((r = t), (t = !0)) : void 0 === t && (t = !0)
                var c = {}
                if (!n.validate(e, u, c, []))
                    throw (
                        (((d = new Error(
                            'Cannot read PKCS#12 PFX. ASN.1 object is not an PKCS#12 PFX.'
                        )).errors = d),
                            d)
                    )
                var d,
                    p = {
                        version: c.version.charCodeAt(0),
                        safeContents: [],
                        getBags: function (e) {
                            var t,
                                r = {}
                            return (
                                'localKeyId' in e
                                    ? (t = e.localKeyId)
                                    : 'localKeyIdHex' in e &&
                                    (t = i.util.hexToBytes(e.localKeyIdHex)),
                                void 0 === t &&
                                !('friendlyName' in e) &&
                                'bagType' in e &&
                                (r[e.bagType] = f(p.safeContents, null, null, e.bagType)),
                                void 0 !== t &&
                                (r.localKeyId = f(
                                    p.safeContents,
                                    'localKeyId',
                                    t,
                                    e.bagType
                                )),
                                'friendlyName' in e &&
                                (r.friendlyName = f(
                                    p.safeContents,
                                    'friendlyName',
                                    e.friendlyName,
                                    e.bagType
                                )),
                                r
                            )
                        },
                        getBagsByFriendlyName: function (e, t) {
                            return f(p.safeContents, 'friendlyName', e, t)
                        },
                        getBagsByLocalKeyId: function (e, t) {
                            return f(p.safeContents, 'localKeyId', e, t)
                        },
                    }
                if (3 !== c.version.charCodeAt(0))
                    throw (
                        (((d = new Error(
                            'PKCS#12 PFX of version other than 3 not supported.'
                        )).version = c.version.charCodeAt(0)),
                            d)
                    )
                if (n.derToOid(c.contentType) !== s.oids.data)
                    throw (
                        (((d = new Error(
                            'Only PKCS#12 PFX in password integrity mode supported.'
                        )).oid = n.derToOid(c.contentType)),
                            d)
                    )
                var y = c.content.value[0]
                if (y.tagClass !== n.Class.UNIVERSAL || y.type !== n.Type.OCTETSTRING)
                    throw new Error(
                        'PKCS#12 authSafe content data is not an OCTET STRING.'
                    )
                if (((y = l(y)), c.mac)) {
                    var m = null,
                        v = 0,
                        b = n.derToOid(c.macAlgorithm)
                    switch (b) {
                        case s.oids.sha1:
                            ; (m = i.md.sha1.create()), (v = 20)
                            break
                        case s.oids.sha256:
                            ; (m = i.md.sha256.create()), (v = 32)
                            break
                        case s.oids.sha384:
                            ; (m = i.md.sha384.create()), (v = 48)
                            break
                        case s.oids.sha512:
                            ; (m = i.md.sha512.create()), (v = 64)
                            break
                        case s.oids.md5:
                            ; (m = i.md.md5.create()), (v = 16)
                    }
                    if (null === m)
                        throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + b)
                    var w = new i.util.ByteBuffer(c.macSalt),
                        E =
                            'macIterations' in c
                                ? parseInt(i.util.bytesToHex(c.macIterations), 16)
                                : 1,
                        I = o.generateKey(r, w, 3, E, v, m),
                        C = i.hmac.create()
                    if (
                        (C.start(m, I),
                            C.update(y.value),
                            C.getMac().getBytes() !== c.macDigest)
                    )
                        throw new Error(
                            'PKCS#12 MAC could not be verified. Invalid password?'
                        )
                }
                return (
                    (function (e, t, r, i) {
                        if (
                            ((t = n.fromDer(t, r)),
                                t.tagClass !== n.Class.UNIVERSAL ||
                                t.type !== n.Type.SEQUENCE ||
                                !0 !== t.constructed)
                        )
                            throw new Error(
                                'PKCS#12 AuthenticatedSafe expected to be a SEQUENCE OF ContentInfo'
                            )
                        for (var o = 0; o < t.value.length; o++) {
                            var u = t.value[o],
                                c = {},
                                d = []
                            if (!n.validate(u, a, c, d))
                                throw (
                                    (((m = new Error('Cannot read ContentInfo.')).errors = d), m)
                                )
                            var p = { encrypted: !1 },
                                f = null,
                                y = c.content.value[0]
                            switch (n.derToOid(c.contentType)) {
                                case s.oids.data:
                                    if (
                                        y.tagClass !== n.Class.UNIVERSAL ||
                                        y.type !== n.Type.OCTETSTRING
                                    )
                                        throw new Error(
                                            'PKCS#12 SafeContents Data is not an OCTET STRING.'
                                        )
                                    f = l(y).value
                                    break
                                case s.oids.encryptedData:
                                    ; (f = h(y, i)), (p.encrypted = !0)
                                    break
                                default:
                                    var m
                                    throw (
                                        (((m = new Error(
                                            'Unsupported PKCS#12 contentType.'
                                        )).contentType = n.derToOid(c.contentType)),
                                            m)
                                    )
                            }
                            ; (p.safeBags = g(f, r, i)), e.safeContents.push(p)
                        }
                    })(p, y.value, t, r),
                    p
                )
            }),
                (o.toPkcs12Asn1 = function (e, t, r, a) {
                    ; ((a = a || {}).saltSize = a.saltSize || 8),
                        (a.count = a.count || 2048),
                        (a.algorithm = a.algorithm || a.encAlgorithm || 'aes128'),
                        'useMac' in a || (a.useMac = !0),
                        'localKeyId' in a || (a.localKeyId = null),
                        'generateLocalKeyId' in a || (a.generateLocalKeyId = !0)
                    var u,
                        c = a.localKeyId
                    if (null !== c) c = i.util.hexToBytes(c)
                    else if (a.generateLocalKeyId)
                        if (t) {
                            var d = i.util.isArray(t) ? t[0] : t
                            'string' == typeof d && (d = s.certificateFromPem(d)),
                                (N = i.md.sha1.create()).update(
                                    n.toDer(s.certificateToAsn1(d)).getBytes()
                                ),
                                (c = N.digest().getBytes())
                        } else c = i.random.getBytes(20)
                    var p = []
                    null !== c &&
                        p.push(
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(s.oids.localKeyId).getBytes()
                                ),
                                n.create(n.Class.UNIVERSAL, n.Type.SET, !0, [
                                    n.create(n.Class.UNIVERSAL, n.Type.OCTETSTRING, !1, c),
                                ]),
                            ])
                        ),
                        'friendlyName' in a &&
                        p.push(
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(s.oids.friendlyName).getBytes()
                                ),
                                n.create(n.Class.UNIVERSAL, n.Type.SET, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.BMPSTRING,
                                        !1,
                                        a.friendlyName
                                    ),
                                ]),
                            ])
                        ),
                        p.length > 0 && (u = n.create(n.Class.UNIVERSAL, n.Type.SET, !0, p))
                    var f = [],
                        l = []
                    null !== t && (l = i.util.isArray(t) ? t : [t])
                    for (var h = [], g = 0; g < l.length; ++g) {
                        'string' == typeof (t = l[g]) && (t = s.certificateFromPem(t))
                        var y = 0 === g ? u : void 0,
                            m = s.certificateToAsn1(t),
                            v = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(s.oids.certBag).getBytes()
                                ),
                                n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.OID,
                                            !1,
                                            n.oidToDer(s.oids.x509Certificate).getBytes()
                                        ),
                                        n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                            n.create(
                                                n.Class.UNIVERSAL,
                                                n.Type.OCTETSTRING,
                                                !1,
                                                n.toDer(m).getBytes()
                                            ),
                                        ]),
                                    ]),
                                ]),
                                y,
                            ])
                        h.push(v)
                    }
                    if (h.length > 0) {
                        var b = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, h),
                            w = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(s.oids.data).getBytes()
                                ),
                                n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OCTETSTRING,
                                        !1,
                                        n.toDer(b).getBytes()
                                    ),
                                ]),
                            ])
                        f.push(w)
                    }
                    var E = null
                    if (null !== e) {
                        var I = s.wrapRsaPrivateKey(s.privateKeyToAsn1(e))
                        E =
                            null === r
                                ? n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(s.oids.keyBag).getBytes()
                                    ),
                                    n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [I]),
                                    u,
                                ])
                                : n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(s.oids.pkcs8ShroudedKeyBag).getBytes()
                                    ),
                                    n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                        s.encryptPrivateKeyInfo(I, r, a),
                                    ]),
                                    u,
                                ])
                        var C = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [E]),
                            S = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(s.oids.data).getBytes()
                                ),
                                n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OCTETSTRING,
                                        !1,
                                        n.toDer(C).getBytes()
                                    ),
                                ]),
                            ])
                        f.push(S)
                    }
                    var A,
                        T = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, f)
                    if (a.useMac) {
                        var N = i.md.sha1.create(),
                            _ = new i.util.ByteBuffer(i.random.getBytes(a.saltSize)),
                            B = a.count,
                            k = ((e = o.generateKey(r, _, 3, B, 20)), i.hmac.create())
                        k.start(N, e), k.update(n.toDer(T).getBytes())
                        var R = k.getMac()
                        A = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(s.oids.sha1).getBytes()
                                    ),
                                    n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                                ]),
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OCTETSTRING,
                                    !1,
                                    R.getBytes()
                                ),
                            ]),
                            n.create(n.Class.UNIVERSAL, n.Type.OCTETSTRING, !1, _.getBytes()),
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.INTEGER,
                                !1,
                                n.integerToDer(B).getBytes()
                            ),
                        ])
                    }
                    return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.INTEGER,
                            !1,
                            n.integerToDer(3).getBytes()
                        ),
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.OID,
                                !1,
                                n.oidToDer(s.oids.data).getBytes()
                            ),
                            n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OCTETSTRING,
                                    !1,
                                    n.toDer(T).getBytes()
                                ),
                            ]),
                        ]),
                        A,
                    ])
                }),
                (o.generateKey = i.pbe.generatePkcs12Key)
        },
        79437: (e, t, r) => {
            var i = r(3832)
            r(8925),
                r(3068),
                r(33480),
                r(66270),
                r(26953),
                r(95496),
                r(49563),
                r(97116),
                r(25414)
            var n = i.asn1,
                s = (e.exports = i.pkcs7 = i.pkcs7 || {})
            function o(e) {
                var t = {},
                    r = []
                if (!n.validate(e, s.asn1.recipientInfoValidator, t, r)) {
                    var o = new Error(
                        'Cannot read PKCS#7 RecipientInfo. ASN.1 object is not an PKCS#7 RecipientInfo.'
                    )
                    throw ((o.errors = r), o)
                }
                return {
                    version: t.version.charCodeAt(0),
                    issuer: i.pki.RDNAttributesAsArray(t.issuer),
                    serialNumber: i.util.createBuffer(t.serial).toHex(),
                    encryptedContent: {
                        algorithm: n.derToOid(t.encAlgorithm),
                        parameter: t.encParameter ? t.encParameter.value : void 0,
                        content: t.encKey,
                    },
                }
            }
            function a(e) {
                for (var t, r = [], s = 0; s < e.length; ++s)
                    r.push(
                        ((t = e[s]),
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.INTEGER,
                                    !1,
                                    n.integerToDer(t.version).getBytes()
                                ),
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    i.pki.distinguishedNameToAsn1({ attributes: t.issuer }),
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.INTEGER,
                                        !1,
                                        i.util.hexToBytes(t.serialNumber)
                                    ),
                                ]),
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(t.encryptedContent.algorithm).getBytes()
                                    ),
                                    n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                                ]),
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OCTETSTRING,
                                    !1,
                                    t.encryptedContent.content
                                ),
                            ]))
                    )
                return r
            }
            function u(e) {
                var t = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                    n.create(
                        n.Class.UNIVERSAL,
                        n.Type.INTEGER,
                        !1,
                        n.integerToDer(e.version).getBytes()
                    ),
                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        i.pki.distinguishedNameToAsn1({ attributes: e.issuer }),
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.INTEGER,
                            !1,
                            i.util.hexToBytes(e.serialNumber)
                        ),
                    ]),
                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.OID,
                            !1,
                            n.oidToDer(e.digestAlgorithm).getBytes()
                        ),
                        n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                    ]),
                ])
                if (
                    (e.authenticatedAttributesAsn1 &&
                        t.value.push(e.authenticatedAttributesAsn1),
                        t.value.push(
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(e.signatureAlgorithm).getBytes()
                                ),
                                n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                            ])
                        ),
                        t.value.push(
                            n.create(n.Class.UNIVERSAL, n.Type.OCTETSTRING, !1, e.signature)
                        ),
                        e.unauthenticatedAttributes.length > 0)
                ) {
                    for (
                        var r = n.create(n.Class.CONTEXT_SPECIFIC, 1, !0, []), s = 0;
                        s < e.unauthenticatedAttributes.length;
                        ++s
                    ) {
                        var o = e.unauthenticatedAttributes[s]
                        r.values.push(c(o))
                    }
                    t.value.push(r)
                }
                return t
            }
            function c(e) {
                var t
                if (e.type === i.pki.oids.contentType)
                    t = n.create(
                        n.Class.UNIVERSAL,
                        n.Type.OID,
                        !1,
                        n.oidToDer(e.value).getBytes()
                    )
                else if (e.type === i.pki.oids.messageDigest)
                    t = n.create(
                        n.Class.UNIVERSAL,
                        n.Type.OCTETSTRING,
                        !1,
                        e.value.bytes()
                    )
                else if (e.type === i.pki.oids.signingTime) {
                    var r = new Date('1950-01-01T00:00:00Z'),
                        s = new Date('2050-01-01T00:00:00Z'),
                        o = e.value
                    if ('string' == typeof o) {
                        var a = Date.parse(o)
                        o = isNaN(a)
                            ? 13 === o.length
                                ? n.utcTimeToDate(o)
                                : n.generalizedTimeToDate(o)
                            : new Date(a)
                    }
                    t =
                        o >= r && o < s
                            ? n.create(
                                n.Class.UNIVERSAL,
                                n.Type.UTCTIME,
                                !1,
                                n.dateToUtcTime(o)
                            )
                            : n.create(
                                n.Class.UNIVERSAL,
                                n.Type.GENERALIZEDTIME,
                                !1,
                                n.dateToGeneralizedTime(o)
                            )
                }
                return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                    n.create(
                        n.Class.UNIVERSAL,
                        n.Type.OID,
                        !1,
                        n.oidToDer(e.type).getBytes()
                    ),
                    n.create(n.Class.UNIVERSAL, n.Type.SET, !0, [t]),
                ])
            }
            function d(e, t, r) {
                var s = {}
                if (!n.validate(t, r, s, [])) {
                    var o = new Error(
                        'Cannot read PKCS#7 message. ASN.1 object is not a supported PKCS#7 message.'
                    )
                    throw ((o.errors = o), o)
                }
                if (n.derToOid(s.contentType) !== i.pki.oids.data)
                    throw new Error(
                        'Unsupported PKCS#7 message. Only wrapped ContentType Data supported.'
                    )
                if (s.encryptedContent) {
                    var a = ''
                    if (i.util.isArray(s.encryptedContent))
                        for (var u = 0; u < s.encryptedContent.length; ++u) {
                            if (s.encryptedContent[u].type !== n.Type.OCTETSTRING)
                                throw new Error(
                                    'Malformed PKCS#7 message, expecting encrypted content constructed of only OCTET STRING objects.'
                                )
                            a += s.encryptedContent[u].value
                        }
                    else a = s.encryptedContent
                    e.encryptedContent = {
                        algorithm: n.derToOid(s.encAlgorithm),
                        parameter: i.util.createBuffer(s.encParameter.value),
                        content: i.util.createBuffer(a),
                    }
                }
                if (s.content) {
                    a = ''
                    if (i.util.isArray(s.content))
                        for (u = 0; u < s.content.length; ++u) {
                            if (s.content[u].type !== n.Type.OCTETSTRING)
                                throw new Error(
                                    'Malformed PKCS#7 message, expecting content constructed of only OCTET STRING objects.'
                                )
                            a += s.content[u].value
                        }
                    else a = s.content
                    e.content = i.util.createBuffer(a)
                }
                return (e.version = s.version.charCodeAt(0)), (e.rawCapture = s), s
            }
            function p(e) {
                if (void 0 === e.encryptedContent.key)
                    throw new Error('Symmetric key not available.')
                if (void 0 === e.content) {
                    var t
                    switch (e.encryptedContent.algorithm) {
                        case i.pki.oids['aes128-CBC']:
                        case i.pki.oids['aes192-CBC']:
                        case i.pki.oids['aes256-CBC']:
                            t = i.aes.createDecryptionCipher(e.encryptedContent.key)
                            break
                        case i.pki.oids.desCBC:
                        case i.pki.oids['des-EDE3-CBC']:
                            t = i.des.createDecryptionCipher(e.encryptedContent.key)
                            break
                        default:
                            throw new Error(
                                'Unsupported symmetric cipher, OID ' +
                                e.encryptedContent.algorithm
                            )
                    }
                    if (
                        (t.start(e.encryptedContent.parameter),
                            t.update(e.encryptedContent.content),
                            !t.finish())
                    )
                        throw new Error('Symmetric decryption failed.')
                    e.content = t.output
                }
            }
            ; (s.messageFromPem = function (e) {
                var t = i.pem.decode(e)[0]
                if ('PKCS7' !== t.type) {
                    var r = new Error(
                        'Could not convert PKCS#7 message from PEM; PEM header type is not "PKCS#7".'
                    )
                    throw ((r.headerType = t.type), r)
                }
                if (t.procType && 'ENCRYPTED' === t.procType.type)
                    throw new Error(
                        'Could not convert PKCS#7 message from PEM; PEM is encrypted.'
                    )
                var o = n.fromDer(t.body)
                return s.messageFromAsn1(o)
            }),
                (s.messageToPem = function (e, t) {
                    var r = { type: 'PKCS7', body: n.toDer(e.toAsn1()).getBytes() }
                    return i.pem.encode(r, { maxline: t })
                }),
                (s.messageFromAsn1 = function (e) {
                    var t = {},
                        r = []
                    if (!n.validate(e, s.asn1.contentInfoValidator, t, r)) {
                        var o = new Error(
                            'Cannot read PKCS#7 message. ASN.1 object is not an PKCS#7 ContentInfo.'
                        )
                        throw ((o.errors = r), o)
                    }
                    var a,
                        u = n.derToOid(t.contentType)
                    switch (u) {
                        case i.pki.oids.envelopedData:
                            a = s.createEnvelopedData()
                            break
                        case i.pki.oids.encryptedData:
                            a = s.createEncryptedData()
                            break
                        case i.pki.oids.signedData:
                            a = s.createSignedData()
                            break
                        default:
                            throw new Error(
                                'Cannot read PKCS#7 message. ContentType with OID ' +
                                u +
                                ' is not (yet) supported.'
                            )
                    }
                    return a.fromAsn1(t.content.value[0]), a
                }),
                (s.createSignedData = function () {
                    var e = null
                    return (e = {
                        type: i.pki.oids.signedData,
                        version: 1,
                        certificates: [],
                        crls: [],
                        signers: [],
                        digestAlgorithmIdentifiers: [],
                        contentInfo: null,
                        signerInfos: [],
                        fromAsn1: function (t) {
                            if (
                                (d(e, t, s.asn1.signedDataValidator),
                                    (e.certificates = []),
                                    (e.crls = []),
                                    (e.digestAlgorithmIdentifiers = []),
                                    (e.contentInfo = null),
                                    (e.signerInfos = []),
                                    e.rawCapture.certificates)
                            )
                                for (
                                    var r = e.rawCapture.certificates.value, n = 0;
                                    n < r.length;
                                    ++n
                                )
                                    e.certificates.push(i.pki.certificateFromAsn1(r[n]))
                        },
                        toAsn1: function () {
                            e.contentInfo || e.sign()
                            for (var t = [], r = 0; r < e.certificates.length; ++r)
                                t.push(i.pki.certificateToAsn1(e.certificates[r]))
                            var s = [],
                                o = n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.INTEGER,
                                            !1,
                                            n.integerToDer(e.version).getBytes()
                                        ),
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.SET,
                                            !0,
                                            e.digestAlgorithmIdentifiers
                                        ),
                                        e.contentInfo,
                                    ]),
                                ])
                            return (
                                t.length > 0 &&
                                o.value[0].value.push(
                                    n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, t)
                                ),
                                s.length > 0 &&
                                o.value[0].value.push(
                                    n.create(n.Class.CONTEXT_SPECIFIC, 1, !0, s)
                                ),
                                o.value[0].value.push(
                                    n.create(n.Class.UNIVERSAL, n.Type.SET, !0, e.signerInfos)
                                ),
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(e.type).getBytes()
                                    ),
                                    o,
                                ])
                            )
                        },
                        addSigner: function (t) {
                            var r = t.issuer,
                                n = t.serialNumber
                            if (t.certificate) {
                                var s = t.certificate
                                'string' == typeof s && (s = i.pki.certificateFromPem(s)),
                                    (r = s.issuer.attributes),
                                    (n = s.serialNumber)
                            }
                            var o = t.key
                            if (!o)
                                throw new Error(
                                    'Could not add PKCS#7 signer; no private key specified.'
                                )
                            'string' == typeof o && (o = i.pki.privateKeyFromPem(o))
                            var a = t.digestAlgorithm || i.pki.oids.sha1
                            switch (a) {
                                case i.pki.oids.sha1:
                                case i.pki.oids.sha256:
                                case i.pki.oids.sha384:
                                case i.pki.oids.sha512:
                                case i.pki.oids.md5:
                                    break
                                default:
                                    throw new Error(
                                        'Could not add PKCS#7 signer; unknown message digest algorithm: ' +
                                        a
                                    )
                            }
                            var u = t.authenticatedAttributes || []
                            if (u.length > 0) {
                                for (var c = !1, d = !1, p = 0; p < u.length; ++p) {
                                    var f = u[p]
                                    if (c || f.type !== i.pki.oids.contentType) {
                                        if (d || f.type !== i.pki.oids.messageDigest);
                                        else if (((d = !0), c)) break
                                    } else if (((c = !0), d)) break
                                }
                                if (!c || !d)
                                    throw new Error(
                                        'Invalid signer.authenticatedAttributes. If signer.authenticatedAttributes is specified, then it must contain at least two attributes, PKCS #9 content-type and PKCS #9 message-digest.'
                                    )
                            }
                            e.signers.push({
                                key: o,
                                version: 1,
                                issuer: r,
                                serialNumber: n,
                                digestAlgorithm: a,
                                signatureAlgorithm: i.pki.oids.rsaEncryption,
                                signature: null,
                                authenticatedAttributes: u,
                                unauthenticatedAttributes: [],
                            })
                        },
                        sign: function (t) {
                            var r
                                ; ((t = t || {}),
                                    'object' != typeof e.content || null === e.contentInfo) &&
                                    ((e.contentInfo = n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.SEQUENCE,
                                        !0,
                                        [
                                            n.create(
                                                n.Class.UNIVERSAL,
                                                n.Type.OID,
                                                !1,
                                                n.oidToDer(i.pki.oids.data).getBytes()
                                            ),
                                        ]
                                    )),
                                        'content' in e &&
                                        (e.content instanceof i.util.ByteBuffer
                                            ? (r = e.content.bytes())
                                            : 'string' == typeof e.content &&
                                            (r = i.util.encodeUtf8(e.content)),
                                            t.detached
                                                ? (e.detachedContent = n.create(
                                                    n.Class.UNIVERSAL,
                                                    n.Type.OCTETSTRING,
                                                    !1,
                                                    r
                                                ))
                                                : e.contentInfo.value.push(
                                                    n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                                        n.create(
                                                            n.Class.UNIVERSAL,
                                                            n.Type.OCTETSTRING,
                                                            !1,
                                                            r
                                                        ),
                                                    ])
                                                )))
                            0 !== e.signers.length &&
                                (function (t) {
                                    var r
                                    r = e.detachedContent
                                        ? e.detachedContent
                                        : (r = e.contentInfo.value[1]).value[0]
                                    if (!r)
                                        throw new Error(
                                            'Could not sign PKCS#7 message; there is no content to sign.'
                                        )
                                    var s = n.derToOid(e.contentInfo.value[0].value),
                                        o = n.toDer(r)
                                    for (var a in (o.getByte(),
                                        n.getBerValueLength(o),
                                        (o = o.getBytes()),
                                        t))
                                        t[a].start().update(o)
                                    for (var d = new Date(), p = 0; p < e.signers.length; ++p) {
                                        var f = e.signers[p]
                                        if (0 === f.authenticatedAttributes.length) {
                                            if (s !== i.pki.oids.data)
                                                throw new Error(
                                                    'Invalid signer; authenticatedAttributes must be present when the ContentInfo content type is not PKCS#7 Data.'
                                                )
                                        } else {
                                            f.authenticatedAttributesAsn1 = n.create(
                                                n.Class.CONTEXT_SPECIFIC,
                                                0,
                                                !0,
                                                []
                                            )
                                            for (
                                                var l = n.create(n.Class.UNIVERSAL, n.Type.SET, !0, []),
                                                h = 0;
                                                h < f.authenticatedAttributes.length;
                                                ++h
                                            ) {
                                                var g = f.authenticatedAttributes[h]
                                                g.type === i.pki.oids.messageDigest
                                                    ? (g.value = t[f.digestAlgorithm].digest())
                                                    : g.type === i.pki.oids.signingTime &&
                                                    (g.value || (g.value = d)),
                                                    l.value.push(c(g)),
                                                    f.authenticatedAttributesAsn1.value.push(c(g))
                                            }
                                            ; (o = n.toDer(l).getBytes()), f.md.start().update(o)
                                        }
                                        f.signature = f.key.sign(f.md, 'RSASSA-PKCS1-V1_5')
                                    }
                                    e.signerInfos = (function (e) {
                                        for (var t = [], r = 0; r < e.length; ++r) t.push(u(e[r]))
                                        return t
                                    })(e.signers)
                                })(
                                    (function () {
                                        for (var t = {}, r = 0; r < e.signers.length; ++r) {
                                            var s = e.signers[r]
                                                ; (o = s.digestAlgorithm) in t ||
                                                    (t[o] = i.md[i.pki.oids[o]].create()),
                                                    0 === s.authenticatedAttributes.length
                                                        ? (s.md = t[o])
                                                        : (s.md = i.md[i.pki.oids[o]].create())
                                        }
                                        for (var o in ((e.digestAlgorithmIdentifiers = []), t))
                                            e.digestAlgorithmIdentifiers.push(
                                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                                    n.create(
                                                        n.Class.UNIVERSAL,
                                                        n.Type.OID,
                                                        !1,
                                                        n.oidToDer(o).getBytes()
                                                    ),
                                                    n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                                                ])
                                            )
                                        return t
                                    })()
                                )
                        },
                        verify: function () {
                            throw new Error(
                                'PKCS#7 signature verification not yet implemented.'
                            )
                        },
                        addCertificate: function (t) {
                            'string' == typeof t && (t = i.pki.certificateFromPem(t)),
                                e.certificates.push(t)
                        },
                        addCertificateRevokationList: function (e) {
                            throw new Error('PKCS#7 CRL support not yet implemented.')
                        },
                    })
                }),
                (s.createEncryptedData = function () {
                    var e = null
                    return (e = {
                        type: i.pki.oids.encryptedData,
                        version: 0,
                        encryptedContent: { algorithm: i.pki.oids['aes256-CBC'] },
                        fromAsn1: function (t) {
                            d(e, t, s.asn1.encryptedDataValidator)
                        },
                        decrypt: function (t) {
                            void 0 !== t && (e.encryptedContent.key = t), p(e)
                        },
                    })
                }),
                (s.createEnvelopedData = function () {
                    var e = null
                    return (e = {
                        type: i.pki.oids.envelopedData,
                        version: 0,
                        recipients: [],
                        encryptedContent: { algorithm: i.pki.oids['aes256-CBC'] },
                        fromAsn1: function (t) {
                            var r = d(e, t, s.asn1.envelopedDataValidator)
                            e.recipients = (function (e) {
                                for (var t = [], r = 0; r < e.length; ++r) t.push(o(e[r]))
                                return t
                            })(r.recipientInfos.value)
                        },
                        toAsn1: function () {
                            return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(e.type).getBytes()
                                ),
                                n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.INTEGER,
                                            !1,
                                            n.integerToDer(e.version).getBytes()
                                        ),
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.SET,
                                            !0,
                                            a(e.recipients)
                                        ),
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.SEQUENCE,
                                            !0,
                                            ((t = e.encryptedContent),
                                                [
                                                    n.create(
                                                        n.Class.UNIVERSAL,
                                                        n.Type.OID,
                                                        !1,
                                                        n.oidToDer(i.pki.oids.data).getBytes()
                                                    ),
                                                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                                        n.create(
                                                            n.Class.UNIVERSAL,
                                                            n.Type.OID,
                                                            !1,
                                                            n.oidToDer(t.algorithm).getBytes()
                                                        ),
                                                        t.parameter
                                                            ? n.create(
                                                                n.Class.UNIVERSAL,
                                                                n.Type.OCTETSTRING,
                                                                !1,
                                                                t.parameter.getBytes()
                                                            )
                                                            : void 0,
                                                    ]),
                                                    n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                                        n.create(
                                                            n.Class.UNIVERSAL,
                                                            n.Type.OCTETSTRING,
                                                            !1,
                                                            t.content.getBytes()
                                                        ),
                                                    ]),
                                                ])
                                        ),
                                    ]),
                                ]),
                            ])
                            var t
                        },
                        findRecipient: function (t) {
                            for (
                                var r = t.issuer.attributes, i = 0;
                                i < e.recipients.length;
                                ++i
                            ) {
                                var n = e.recipients[i],
                                    s = n.issuer
                                if (
                                    n.serialNumber === t.serialNumber &&
                                    s.length === r.length
                                ) {
                                    for (var o = !0, a = 0; a < r.length; ++a)
                                        if (s[a].type !== r[a].type || s[a].value !== r[a].value) {
                                            o = !1
                                            break
                                        }
                                    if (o) return n
                                }
                            }
                            return null
                        },
                        decrypt: function (t, r) {
                            if (
                                void 0 === e.encryptedContent.key &&
                                void 0 !== t &&
                                void 0 !== r
                            )
                                switch (t.encryptedContent.algorithm) {
                                    case i.pki.oids.rsaEncryption:
                                    case i.pki.oids.desCBC:
                                        var n = r.decrypt(t.encryptedContent.content)
                                        e.encryptedContent.key = i.util.createBuffer(n)
                                        break
                                    default:
                                        throw new Error(
                                            'Unsupported asymmetric cipher, OID ' +
                                            t.encryptedContent.algorithm
                                        )
                                }
                            p(e)
                        },
                        addRecipient: function (t) {
                            e.recipients.push({
                                version: 0,
                                issuer: t.issuer.attributes,
                                serialNumber: t.serialNumber,
                                encryptedContent: {
                                    algorithm: i.pki.oids.rsaEncryption,
                                    key: t.publicKey,
                                },
                            })
                        },
                        encrypt: function (t, r) {
                            if (void 0 === e.encryptedContent.content) {
                                var n, s, o
                                switch (
                                ((r = r || e.encryptedContent.algorithm),
                                    (t = t || e.encryptedContent.key),
                                    r)
                                ) {
                                    case i.pki.oids['aes128-CBC']:
                                        ; (n = 16), (s = 16), (o = i.aes.createEncryptionCipher)
                                        break
                                    case i.pki.oids['aes192-CBC']:
                                        ; (n = 24), (s = 16), (o = i.aes.createEncryptionCipher)
                                        break
                                    case i.pki.oids['aes256-CBC']:
                                        ; (n = 32), (s = 16), (o = i.aes.createEncryptionCipher)
                                        break
                                    case i.pki.oids['des-EDE3-CBC']:
                                        ; (n = 24), (s = 8), (o = i.des.createEncryptionCipher)
                                        break
                                    default:
                                        throw new Error('Unsupported symmetric cipher, OID ' + r)
                                }
                                if (void 0 === t) t = i.util.createBuffer(i.random.getBytes(n))
                                else if (t.length() != n)
                                    throw new Error(
                                        'Symmetric key has wrong length; got ' +
                                        t.length() +
                                        ' bytes, expected ' +
                                        n +
                                        '.'
                                    )
                                    ; (e.encryptedContent.algorithm = r),
                                        (e.encryptedContent.key = t),
                                        (e.encryptedContent.parameter = i.util.createBuffer(
                                            i.random.getBytes(s)
                                        ))
                                var a = o(t)
                                if (
                                    (a.start(e.encryptedContent.parameter.copy()),
                                        a.update(e.content),
                                        !a.finish())
                                )
                                    throw new Error('Symmetric encryption failed.')
                                e.encryptedContent.content = a.output
                            }
                            for (var u = 0; u < e.recipients.length; ++u) {
                                var c = e.recipients[u]
                                if (void 0 === c.encryptedContent.content) {
                                    if (c.encryptedContent.algorithm !== i.pki.oids.rsaEncryption)
                                        throw new Error(
                                            'Unsupported asymmetric cipher, OID ' +
                                            c.encryptedContent.algorithm
                                        )
                                    c.encryptedContent.content = c.encryptedContent.key.encrypt(
                                        e.encryptedContent.key.data
                                    )
                                }
                            }
                        },
                    })
                })
        },
        95496: (e, t, r) => {
            var i = r(3832)
            r(3068), r(97116)
            var n = i.asn1,
                s = (e.exports = i.pkcs7asn1 = i.pkcs7asn1 || {})
                ; (i.pkcs7 = i.pkcs7 || {}), (i.pkcs7.asn1 = s)
            var o = {
                name: 'ContentInfo',
                tagClass: n.Class.UNIVERSAL,
                type: n.Type.SEQUENCE,
                constructed: !0,
                value: [
                    {
                        name: 'ContentInfo.ContentType',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.OID,
                        constructed: !1,
                        capture: 'contentType',
                    },
                    {
                        name: 'ContentInfo.content',
                        tagClass: n.Class.CONTEXT_SPECIFIC,
                        type: 0,
                        constructed: !0,
                        optional: !0,
                        captureAsn1: 'content',
                    },
                ],
            }
            s.contentInfoValidator = o
            var a = {
                name: 'EncryptedContentInfo',
                tagClass: n.Class.UNIVERSAL,
                type: n.Type.SEQUENCE,
                constructed: !0,
                value: [
                    {
                        name: 'EncryptedContentInfo.contentType',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.OID,
                        constructed: !1,
                        capture: 'contentType',
                    },
                    {
                        name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        value: [
                            {
                                name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.OID,
                                constructed: !1,
                                capture: 'encAlgorithm',
                            },
                            {
                                name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
                                tagClass: n.Class.UNIVERSAL,
                                captureAsn1: 'encParameter',
                            },
                        ],
                    },
                    {
                        name: 'EncryptedContentInfo.encryptedContent',
                        tagClass: n.Class.CONTEXT_SPECIFIC,
                        type: 0,
                        capture: 'encryptedContent',
                        captureAsn1: 'encryptedContentAsn1',
                    },
                ],
            }
                ; (s.envelopedDataValidator = {
                    name: 'EnvelopedData',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'EnvelopedData.Version',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.INTEGER,
                            constructed: !1,
                            capture: 'version',
                        },
                        {
                            name: 'EnvelopedData.RecipientInfos',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SET,
                            constructed: !0,
                            captureAsn1: 'recipientInfos',
                        },
                    ].concat(a),
                }),
                    (s.encryptedDataValidator = {
                        name: 'EncryptedData',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        value: [
                            {
                                name: 'EncryptedData.Version',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.INTEGER,
                                constructed: !1,
                                capture: 'version',
                            },
                        ].concat(a),
                    })
            var u = {
                name: 'SignerInfo',
                tagClass: n.Class.UNIVERSAL,
                type: n.Type.SEQUENCE,
                constructed: !0,
                value: [
                    {
                        name: 'SignerInfo.version',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.INTEGER,
                        constructed: !1,
                    },
                    {
                        name: 'SignerInfo.issuerAndSerialNumber',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        value: [
                            {
                                name: 'SignerInfo.issuerAndSerialNumber.issuer',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.SEQUENCE,
                                constructed: !0,
                                captureAsn1: 'issuer',
                            },
                            {
                                name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.INTEGER,
                                constructed: !1,
                                capture: 'serial',
                            },
                        ],
                    },
                    {
                        name: 'SignerInfo.digestAlgorithm',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        value: [
                            {
                                name: 'SignerInfo.digestAlgorithm.algorithm',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.OID,
                                constructed: !1,
                                capture: 'digestAlgorithm',
                            },
                            {
                                name: 'SignerInfo.digestAlgorithm.parameter',
                                tagClass: n.Class.UNIVERSAL,
                                constructed: !1,
                                captureAsn1: 'digestParameter',
                                optional: !0,
                            },
                        ],
                    },
                    {
                        name: 'SignerInfo.authenticatedAttributes',
                        tagClass: n.Class.CONTEXT_SPECIFIC,
                        type: 0,
                        constructed: !0,
                        optional: !0,
                        capture: 'authenticatedAttributes',
                    },
                    {
                        name: 'SignerInfo.digestEncryptionAlgorithm',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        capture: 'signatureAlgorithm',
                    },
                    {
                        name: 'SignerInfo.encryptedDigest',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.OCTETSTRING,
                        constructed: !1,
                        capture: 'signature',
                    },
                    {
                        name: 'SignerInfo.unauthenticatedAttributes',
                        tagClass: n.Class.CONTEXT_SPECIFIC,
                        type: 1,
                        constructed: !0,
                        optional: !0,
                        capture: 'unauthenticatedAttributes',
                    },
                ],
            }
                ; (s.signedDataValidator = {
                    name: 'SignedData',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'SignedData.Version',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.INTEGER,
                            constructed: !1,
                            capture: 'version',
                        },
                        {
                            name: 'SignedData.DigestAlgorithms',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SET,
                            constructed: !0,
                            captureAsn1: 'digestAlgorithms',
                        },
                        o,
                        {
                            name: 'SignedData.Certificates',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 0,
                            optional: !0,
                            captureAsn1: 'certificates',
                        },
                        {
                            name: 'SignedData.CertificateRevocationLists',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 1,
                            optional: !0,
                            captureAsn1: 'crls',
                        },
                        {
                            name: 'SignedData.SignerInfos',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SET,
                            capture: 'signerInfos',
                            optional: !0,
                            value: [u],
                        },
                    ],
                }),
                    (s.recipientInfoValidator = {
                        name: 'RecipientInfo',
                        tagClass: n.Class.UNIVERSAL,
                        type: n.Type.SEQUENCE,
                        constructed: !0,
                        value: [
                            {
                                name: 'RecipientInfo.version',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.INTEGER,
                                constructed: !1,
                                capture: 'version',
                            },
                            {
                                name: 'RecipientInfo.issuerAndSerial',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.SEQUENCE,
                                constructed: !0,
                                value: [
                                    {
                                        name: 'RecipientInfo.issuerAndSerial.issuer',
                                        tagClass: n.Class.UNIVERSAL,
                                        type: n.Type.SEQUENCE,
                                        constructed: !0,
                                        captureAsn1: 'issuer',
                                    },
                                    {
                                        name: 'RecipientInfo.issuerAndSerial.serialNumber',
                                        tagClass: n.Class.UNIVERSAL,
                                        type: n.Type.INTEGER,
                                        constructed: !1,
                                        capture: 'serial',
                                    },
                                ],
                            },
                            {
                                name: 'RecipientInfo.keyEncryptionAlgorithm',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.SEQUENCE,
                                constructed: !0,
                                value: [
                                    {
                                        name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
                                        tagClass: n.Class.UNIVERSAL,
                                        type: n.Type.OID,
                                        constructed: !1,
                                        capture: 'encAlgorithm',
                                    },
                                    {
                                        name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
                                        tagClass: n.Class.UNIVERSAL,
                                        constructed: !1,
                                        captureAsn1: 'encParameter',
                                        optional: !0,
                                    },
                                ],
                            },
                            {
                                name: 'RecipientInfo.encryptedKey',
                                tagClass: n.Class.UNIVERSAL,
                                type: n.Type.OCTETSTRING,
                                constructed: !1,
                                capture: 'encKey',
                            },
                        ],
                    })
        },
        4742: (e, t, r) => {
            var i = r(3832)
            r(3068),
                r(66270),
                r(97450),
                r(26953),
                r(98960),
                r(55147),
                r(47629),
                r(28095),
                r(97116),
                r(25414)
            var n = i.asn1,
                s = (e.exports = i.pki = i.pki || {})
                ; (s.pemToDer = function (e) {
                    var t = i.pem.decode(e)[0]
                    if (t.procType && 'ENCRYPTED' === t.procType.type)
                        throw new Error('Could not convert PEM to DER; PEM is encrypted.')
                    return i.util.createBuffer(t.body)
                }),
                    (s.privateKeyFromPem = function (e) {
                        var t = i.pem.decode(e)[0]
                        if ('PRIVATE KEY' !== t.type && 'RSA PRIVATE KEY' !== t.type) {
                            var r = new Error(
                                'Could not convert private key from PEM; PEM header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".'
                            )
                            throw ((r.headerType = t.type), r)
                        }
                        if (t.procType && 'ENCRYPTED' === t.procType.type)
                            throw new Error(
                                'Could not convert private key from PEM; PEM is encrypted.'
                            )
                        var o = n.fromDer(t.body)
                        return s.privateKeyFromAsn1(o)
                    }),
                    (s.privateKeyToPem = function (e, t) {
                        var r = {
                            type: 'RSA PRIVATE KEY',
                            body: n.toDer(s.privateKeyToAsn1(e)).getBytes(),
                        }
                        return i.pem.encode(r, { maxline: t })
                    }),
                    (s.privateKeyInfoToPem = function (e, t) {
                        var r = { type: 'PRIVATE KEY', body: n.toDer(e).getBytes() }
                        return i.pem.encode(r, { maxline: t })
                    })
        },
        29654: (e, t, r) => {
            var i = r(3832)
            r(97116),
                r(15764),
                r(49563),
                (function () {
                    if (i.prime) e.exports = i.prime
                    else {
                        var t = (e.exports = i.prime = i.prime || {}),
                            r = i.jsbn.BigInteger,
                            n = [6, 4, 2, 4, 2, 4, 6, 2],
                            s = new r(null)
                        s.fromInt(30)
                        var o = function (e, t) {
                            return e | t
                        }
                        t.generateProbablePrime = function (e, t, n) {
                            'function' == typeof t && ((n = t), (t = {}))
                            var s = (t = t || {}).algorithm || 'PRIMEINC'
                            'string' == typeof s && (s = { name: s }),
                                (s.options = s.options || {})
                            var o = t.prng || i.random,
                                u = {
                                    nextBytes: function (e) {
                                        for (
                                            var t = o.getBytesSync(e.length), r = 0;
                                            r < e.length;
                                            ++r
                                        )
                                            e[r] = t.charCodeAt(r)
                                    },
                                }
                            if ('PRIMEINC' === s.name)
                                return (function (e, t, n, s) {
                                    if ('workers' in n)
                                        return (function (e, t, n, s) {
                                            if ('undefined' == typeof Worker) return a(e, t, n, s)
                                            var o = c(e, t),
                                                u = n.workers,
                                                d = n.workLoad || 100,
                                                p = (30 * d) / 8,
                                                f = n.workerScript || 'forge/prime.worker.js'
                                            if (-1 === u)
                                                return i.util.estimateCores(function (e, t) {
                                                    e && (t = 2), (u = t - 1), l()
                                                })
                                            function l() {
                                                u = Math.max(1, u)
                                                for (var i = [], n = 0; n < u; ++n) i[n] = new Worker(f)
                                                for (n = 0; n < u; ++n)
                                                    i[n].addEventListener('message', l)
                                                var a = !1
                                                function l(n) {
                                                    if (!a) {
                                                        0
                                                        var u = n.data
                                                        if (u.found) {
                                                            for (var f = 0; f < i.length; ++f)
                                                                i[f].terminate()
                                                            return (a = !0), s(null, new r(u.prime, 16))
                                                        }
                                                        o.bitLength() > e && (o = c(e, t))
                                                        var l = o.toString(16)
                                                        n.target.postMessage({ hex: l, workLoad: d }),
                                                            o.dAddOffset(p, 0)
                                                    }
                                                }
                                            }
                                            l()
                                        })(e, t, n, s)
                                    return a(e, t, n, s)
                                })(e, u, s.options, n)
                            throw new Error('Invalid prime generation algorithm: ' + s.name)
                        }
                    }
                    function a(e, t, r, i) {
                        var n = c(e, t),
                            s = (function (e) {
                                return e <= 100
                                    ? 27
                                    : e <= 150
                                        ? 18
                                        : e <= 200
                                            ? 15
                                            : e <= 250
                                                ? 12
                                                : e <= 300
                                                    ? 9
                                                    : e <= 350
                                                        ? 8
                                                        : e <= 400
                                                            ? 7
                                                            : e <= 500
                                                                ? 6
                                                                : e <= 600
                                                                    ? 5
                                                                    : e <= 800
                                                                        ? 4
                                                                        : e <= 1250
                                                                            ? 3
                                                                            : 2
                            })(n.bitLength())
                        'millerRabinTests' in r && (s = r.millerRabinTests)
                        var o = 10
                        'maxBlockTime' in r && (o = r.maxBlockTime), u(n, e, t, 0, s, o, i)
                    }
                    function u(e, t, r, s, o, a, d) {
                        var p = +new Date()
                        do {
                            if ((e.bitLength() > t && (e = c(t, r)), e.isProbablePrime(o)))
                                return d(null, e)
                            e.dAddOffset(n[s++ % 8], 0)
                        } while (a < 0 || +new Date() - p < a)
                        i.util.setImmediate(function () {
                            u(e, t, r, s, o, a, d)
                        })
                    }
                    function c(e, t) {
                        var i = new r(e, t),
                            n = e - 1
                        return (
                            i.testBit(n) || i.bitwiseTo(r.ONE.shiftLeft(n), o, i),
                            i.dAddOffset(31 - i.mod(s).byteValue(), 0),
                            i
                        )
                    }
                })()
        },
        74933: (e, t, r) => {
            var i = r(3832)
            r(97116)
            var n = null
            !i.util.isNodejs ||
                i.options.usePureJavaScript ||
                process.versions['node-webkit'] ||
                (n = r(25819)),
                ((e.exports = i.prng = i.prng || {}).create = function (e) {
                    for (
                        var t = {
                            plugin: e,
                            key: null,
                            seed: null,
                            time: null,
                            reseeds: 0,
                            generated: 0,
                            keyBytes: '',
                        },
                        r = e.md,
                        s = new Array(32),
                        o = 0;
                        o < 32;
                        ++o
                    )
                        s[o] = r.create()
                    function a() {
                        if (t.pools[0].messageLength >= 32) return u()
                        var e = (32 - t.pools[0].messageLength) << 5
                        t.collect(t.seedFileSync(e)), u()
                    }
                    function u() {
                        t.reseeds = 4294967295 === t.reseeds ? 0 : t.reseeds + 1
                        var e = t.plugin.md.create()
                        e.update(t.keyBytes)
                        for (var r = 1, i = 0; i < 32; ++i)
                            t.reseeds % r == 0 &&
                                (e.update(t.pools[i].digest().getBytes()), t.pools[i].start()),
                                (r <<= 1)
                                ; (t.keyBytes = e.digest().getBytes()),
                                    e.start(),
                                    e.update(t.keyBytes)
                        var n = e.digest().getBytes()
                            ; (t.key = t.plugin.formatKey(t.keyBytes)),
                                (t.seed = t.plugin.formatSeed(n)),
                                (t.generated = 0)
                    }
                    function c(e) {
                        var t = null,
                            r = i.util.globalScope,
                            n = r.crypto || r.msCrypto
                        n &&
                            n.getRandomValues &&
                            (t = function (e) {
                                return n.getRandomValues(e)
                            })
                        var s = i.util.createBuffer()
                        if (t)
                            for (; s.length() < e;) {
                                var o = Math.max(1, Math.min(e - s.length(), 65536) / 4),
                                    a = new Uint32Array(Math.floor(o))
                                try {
                                    t(a)
                                    for (var u = 0; u < a.length; ++u) s.putInt32(a[u])
                                } catch (l) {
                                    if (
                                        !(
                                            'undefined' != typeof QuotaExceededError &&
                                            l instanceof QuotaExceededError
                                        )
                                    )
                                        throw l
                                }
                            }
                        if (s.length() < e)
                            for (
                                var c, d, p, f = Math.floor(65536 * Math.random());
                                s.length() < e;

                            ) {
                                ; (d = 16807 * (65535 & f)),
                                    (d += (32767 & (c = 16807 * (f >> 16))) << 16),
                                    (f =
                                        4294967295 &
                                        (d = (2147483647 & (d += c >> 15)) + (d >> 31)))
                                for (u = 0; u < 3; ++u)
                                    (p = f >>> (u << 3)),
                                        (p ^= Math.floor(256 * Math.random())),
                                        s.putByte(255 & p)
                            }
                        return s.getBytes(e)
                    }
                    return (
                        (t.pools = s),
                        (t.pool = 0),
                        (t.generate = function (e, r) {
                            if (!r) return t.generateSync(e)
                            var n = t.plugin.cipher,
                                s = t.plugin.increment,
                                o = t.plugin.formatKey,
                                a = t.plugin.formatSeed,
                                c = i.util.createBuffer()
                                ; (t.key = null),
                                    (function d(p) {
                                        if (p) return r(p)
                                        if (c.length() >= e) return r(null, c.getBytes(e))
                                        t.generated > 1048575 && (t.key = null)
                                        if (null === t.key)
                                            return i.util.nextTick(function () {
                                                !(function (e) {
                                                    if (t.pools[0].messageLength >= 32) return u(), e()
                                                    var r = (32 - t.pools[0].messageLength) << 5
                                                    t.seedFile(r, function (r, i) {
                                                        if (r) return e(r)
                                                        t.collect(i), u(), e()
                                                    })
                                                })(d)
                                            })
                                        var f = n(t.key, t.seed)
                                            ; (t.generated += f.length),
                                                c.putBytes(f),
                                                (t.key = o(n(t.key, s(t.seed)))),
                                                (t.seed = a(n(t.key, t.seed))),
                                                i.util.setImmediate(d)
                                    })()
                        }),
                        (t.generateSync = function (e) {
                            var r = t.plugin.cipher,
                                n = t.plugin.increment,
                                s = t.plugin.formatKey,
                                o = t.plugin.formatSeed
                            t.key = null
                            for (var u = i.util.createBuffer(); u.length() < e;) {
                                t.generated > 1048575 && (t.key = null), null === t.key && a()
                                var c = r(t.key, t.seed)
                                    ; (t.generated += c.length),
                                        u.putBytes(c),
                                        (t.key = s(r(t.key, n(t.seed)))),
                                        (t.seed = o(r(t.key, t.seed)))
                            }
                            return u.getBytes(e)
                        }),
                        n
                            ? ((t.seedFile = function (e, t) {
                                n.randomBytes(e, function (e, r) {
                                    if (e) return t(e)
                                    t(null, r.toString())
                                })
                            }),
                                (t.seedFileSync = function (e) {
                                    return n.randomBytes(e).toString()
                                }))
                            : ((t.seedFile = function (e, t) {
                                try {
                                    t(null, c(e))
                                } catch (r) {
                                    t(r)
                                }
                            }),
                                (t.seedFileSync = c)),
                        (t.collect = function (e) {
                            for (var r = e.length, i = 0; i < r; ++i)
                                t.pools[t.pool].update(e.substr(i, 1)),
                                    (t.pool = 31 === t.pool ? 0 : t.pool + 1)
                        }),
                        (t.collectInt = function (e, r) {
                            for (var i = '', n = 0; n < r; n += 8)
                                i += String.fromCharCode((e >> n) & 255)
                            t.collect(i)
                        }),
                        (t.registerWorker = function (e) {
                            if (e === self)
                                t.seedFile = function (e, t) {
                                    self.addEventListener('message', function e(r) {
                                        var i = r.data
                                        i.forge &&
                                            i.forge.prng &&
                                            (self.removeEventListener('message', e),
                                                t(i.forge.prng.err, i.forge.prng.bytes))
                                    }),
                                        self.postMessage({ forge: { prng: { needed: e } } })
                                }
                            else {
                                e.addEventListener('message', function (r) {
                                    var i = r.data
                                    i.forge &&
                                        i.forge.prng &&
                                        t.seedFile(i.forge.prng.needed, function (t, r) {
                                            e.postMessage({ forge: { prng: { err: t, bytes: r } } })
                                        })
                                })
                            }
                        }),
                        t
                    )
                })
        },
        47629: (e, t, r) => {
            var i = r(3832)
            r(49563),
                r(97116),
                ((e.exports = i.pss = i.pss || {}).create = function (e) {
                    3 === arguments.length &&
                        (e = {
                            md: arguments[0],
                            mgf: arguments[1],
                            saltLength: arguments[2],
                        })
                    var t,
                        r = e.md,
                        n = e.mgf,
                        s = r.digestLength,
                        o = e.salt || null
                    if (
                        ('string' == typeof o && (o = i.util.createBuffer(o)),
                            'saltLength' in e)
                    )
                        t = e.saltLength
                    else {
                        if (null === o)
                            throw new Error(
                                'Salt length not specified or specific salt not given.'
                            )
                        t = o.length()
                    }
                    if (null !== o && o.length() !== t)
                        throw new Error(
                            'Given salt length does not match length of given salt.'
                        )
                    var a = e.prng || i.random,
                        u = {
                            encode: function (e, u) {
                                var c,
                                    d,
                                    p = u - 1,
                                    f = Math.ceil(p / 8),
                                    l = e.digest().getBytes()
                                if (f < s + t + 2)
                                    throw new Error('Message is too long to encrypt.')
                                d = null === o ? a.getBytesSync(t) : o.bytes()
                                var h = new i.util.ByteBuffer()
                                h.fillWithByte(0, 8),
                                    h.putBytes(l),
                                    h.putBytes(d),
                                    r.start(),
                                    r.update(h.getBytes())
                                var g = r.digest().getBytes(),
                                    y = new i.util.ByteBuffer()
                                y.fillWithByte(0, f - t - s - 2), y.putByte(1), y.putBytes(d)
                                var m = y.getBytes(),
                                    v = f - s - 1,
                                    b = n.generate(g, v),
                                    w = ''
                                for (c = 0; c < v; c++)
                                    w += String.fromCharCode(m.charCodeAt(c) ^ b.charCodeAt(c))
                                var E = (65280 >> (8 * f - p)) & 255
                                return (
                                    (w =
                                        String.fromCharCode(w.charCodeAt(0) & ~E) + w.substr(1)) +
                                    g +
                                    String.fromCharCode(188)
                                )
                            },
                            verify: function (e, o, a) {
                                var u,
                                    c = a - 1,
                                    d = Math.ceil(c / 8)
                                if (((o = o.substr(-d)), d < s + t + 2))
                                    throw new Error(
                                        'Inconsistent parameters to PSS signature verification.'
                                    )
                                if (188 !== o.charCodeAt(d - 1))
                                    throw new Error('Encoded message does not end in 0xBC.')
                                var p = d - s - 1,
                                    f = o.substr(0, p),
                                    l = o.substr(p, s),
                                    h = (65280 >> (8 * d - c)) & 255
                                if (0 != (f.charCodeAt(0) & h))
                                    throw new Error('Bits beyond keysize not zero as expected.')
                                var g = n.generate(l, p),
                                    y = ''
                                for (u = 0; u < p; u++)
                                    y += String.fromCharCode(f.charCodeAt(u) ^ g.charCodeAt(u))
                                y = String.fromCharCode(y.charCodeAt(0) & ~h) + y.substr(1)
                                var m = d - s - t - 2
                                for (u = 0; u < m; u++)
                                    if (0 !== y.charCodeAt(u))
                                        throw new Error('Leftmost octets not zero as expected')
                                if (1 !== y.charCodeAt(m))
                                    throw new Error(
                                        'Inconsistent PSS signature, 0x01 marker not found'
                                    )
                                var v = y.substr(-t),
                                    b = new i.util.ByteBuffer()
                                return (
                                    b.fillWithByte(0, 8),
                                    b.putBytes(e),
                                    b.putBytes(v),
                                    r.start(),
                                    r.update(b.getBytes()),
                                    l === r.digest().getBytes()
                                )
                            },
                        }
                    return u
                })
        },
        49563: (e, t, r) => {
            var i = r(3832)
            r(8925),
                r(41668),
                r(74933),
                r(97116),
                i.random && i.random.getBytes
                    ? (e.exports = i.random)
                    : (function (t) {
                        var r = {},
                            n = new Array(4),
                            s = i.util.createBuffer()
                        function o() {
                            var e = i.prng.create(r)
                            return (
                                (e.getBytes = function (t, r) {
                                    return e.generate(t, r)
                                }),
                                (e.getBytesSync = function (t) {
                                    return e.generate(t)
                                }),
                                e
                            )
                        }
                        ; (r.formatKey = function (e) {
                            var t = i.util.createBuffer(e)
                            return (
                                ((e = new Array(4))[0] = t.getInt32()),
                                (e[1] = t.getInt32()),
                                (e[2] = t.getInt32()),
                                (e[3] = t.getInt32()),
                                i.aes._expandKey(e, !1)
                            )
                        }),
                            (r.formatSeed = function (e) {
                                var t = i.util.createBuffer(e)
                                return (
                                    ((e = new Array(4))[0] = t.getInt32()),
                                    (e[1] = t.getInt32()),
                                    (e[2] = t.getInt32()),
                                    (e[3] = t.getInt32()),
                                    e
                                )
                            }),
                            (r.cipher = function (e, t) {
                                return (
                                    i.aes._updateBlock(e, t, n, !1),
                                    s.putInt32(n[0]),
                                    s.putInt32(n[1]),
                                    s.putInt32(n[2]),
                                    s.putInt32(n[3]),
                                    s.getBytes()
                                )
                            }),
                            (r.increment = function (e) {
                                return ++e[3], e
                            }),
                            (r.md = i.md.sha256)
                        var a = o(),
                            u = null,
                            c = i.util.globalScope,
                            d = c.crypto || c.msCrypto
                        if (
                            (d &&
                                d.getRandomValues &&
                                (u = function (e) {
                                    return d.getRandomValues(e)
                                }),
                                i.options.usePureJavaScript || (!i.util.isNodejs && !u))
                        ) {
                            if (
                                ('undefined' == typeof window || window.document,
                                    a.collectInt(+new Date(), 32),
                                    'undefined' != typeof navigator)
                            ) {
                                var p = ''
                                for (var f in navigator)
                                    try {
                                        'string' == typeof navigator[f] && (p += navigator[f])
                                    } catch (l) { }
                                a.collect(p), (p = null)
                            }
                            t &&
                                (t().mousemove(function (e) {
                                    a.collectInt(e.clientX, 16), a.collectInt(e.clientY, 16)
                                }),
                                    t().keypress(function (e) {
                                        a.collectInt(e.charCode, 8)
                                    }))
                        }
                        if (i.random) for (var f in a) i.random[f] = a[f]
                        else i.random = a
                            ; (i.random.createInstance = o), (e.exports = i.random)
                    })('undefined' != typeof jQuery ? jQuery : null)
        },
        69372: (e, t, r) => {
            var i = r(3832)
            r(97116)
            var n = [
                217, 120, 249, 196, 25, 221, 181, 237, 40, 233, 253, 121, 74, 160,
                216, 157, 198, 126, 55, 131, 43, 118, 83, 142, 98, 76, 100, 136, 68,
                139, 251, 162, 23, 154, 89, 245, 135, 179, 79, 19, 97, 69, 109, 141,
                9, 129, 125, 50, 189, 143, 64, 235, 134, 183, 123, 11, 240, 149, 33,
                34, 92, 107, 78, 130, 84, 214, 101, 147, 206, 96, 178, 28, 115, 86,
                192, 20, 167, 140, 241, 220, 18, 117, 202, 31, 59, 190, 228, 209, 66,
                61, 212, 48, 163, 60, 182, 38, 111, 191, 14, 218, 70, 105, 7, 87, 39,
                242, 29, 155, 188, 148, 67, 3, 248, 17, 199, 246, 144, 239, 62, 231,
                6, 195, 213, 47, 200, 102, 30, 215, 8, 232, 234, 222, 128, 82, 238,
                247, 132, 170, 114, 172, 53, 77, 106, 42, 150, 26, 210, 113, 90, 21,
                73, 116, 75, 159, 208, 94, 4, 24, 164, 236, 194, 224, 65, 110, 15, 81,
                203, 204, 36, 145, 175, 80, 161, 244, 112, 57, 153, 124, 58, 133, 35,
                184, 180, 122, 252, 2, 54, 91, 37, 85, 151, 49, 45, 93, 250, 152, 227,
                138, 146, 174, 5, 223, 41, 16, 103, 108, 186, 201, 211, 0, 230, 207,
                225, 158, 168, 44, 99, 22, 1, 63, 88, 226, 137, 169, 13, 56, 52, 27,
                171, 51, 255, 176, 187, 72, 12, 95, 185, 177, 205, 46, 197, 243, 219,
                71, 229, 165, 156, 119, 10, 166, 32, 104, 254, 127, 193, 173,
            ],
                s = [1, 2, 3, 5],
                o = function (e, t) {
                    return ((e << t) & 65535) | ((65535 & e) >> (16 - t))
                },
                a = function (e, t) {
                    return ((65535 & e) >> t) | ((e << (16 - t)) & 65535)
                }
                ; (e.exports = i.rc2 = i.rc2 || {}),
                    (i.rc2.expandKey = function (e, t) {
                        'string' == typeof e && (e = i.util.createBuffer(e)), (t = t || 128)
                        var r,
                            s = e,
                            o = e.length(),
                            a = t,
                            u = Math.ceil(a / 8),
                            c = 255 >> (7 & a)
                        for (r = o; r < 128; r++)
                            s.putByte(n[(s.at(r - 1) + s.at(r - o)) & 255])
                        for (s.setAt(128 - u, n[s.at(128 - u) & c]), r = 127 - u; r >= 0; r--)
                            s.setAt(r, n[s.at(r + 1) ^ s.at(r + u)])
                        return s
                    })
            var u = function (e, t, r) {
                var n,
                    u,
                    c,
                    d,
                    p = !1,
                    f = null,
                    l = null,
                    h = null,
                    g = []
                for (e = i.rc2.expandKey(e, t), c = 0; c < 64; c++)
                    g.push(e.getInt16Le())
                r
                    ? ((n = function (e) {
                        for (c = 0; c < 4; c++)
                            (e[c] +=
                                g[d] +
                                (e[(c + 3) % 4] & e[(c + 2) % 4]) +
                                (~e[(c + 3) % 4] & e[(c + 1) % 4])),
                                (e[c] = o(e[c], s[c])),
                                d++
                    }),
                        (u = function (e) {
                            for (c = 0; c < 4; c++) e[c] += g[63 & e[(c + 3) % 4]]
                        }))
                    : ((n = function (e) {
                        for (c = 3; c >= 0; c--)
                            (e[c] = a(e[c], s[c])),
                                (e[c] -=
                                    g[d] +
                                    (e[(c + 3) % 4] & e[(c + 2) % 4]) +
                                    (~e[(c + 3) % 4] & e[(c + 1) % 4])),
                                d--
                    }),
                        (u = function (e) {
                            for (c = 3; c >= 0; c--) e[c] -= g[63 & e[(c + 3) % 4]]
                        }))
                var y = function (e) {
                    var t = []
                    for (c = 0; c < 4; c++) {
                        var i = f.getInt16Le()
                        null !== h && (r ? (i ^= h.getInt16Le()) : h.putInt16Le(i)),
                            t.push(65535 & i)
                    }
                    d = r ? 0 : 63
                    for (var n = 0; n < e.length; n++)
                        for (var s = 0; s < e[n][0]; s++) e[n][1](t)
                    for (c = 0; c < 4; c++)
                        null !== h && (r ? h.putInt16Le(t[c]) : (t[c] ^= h.getInt16Le())),
                            l.putInt16Le(t[c])
                },
                    m = null
                return (m = {
                    start: function (e, t) {
                        e && 'string' == typeof e && (e = i.util.createBuffer(e)),
                            (p = !1),
                            (f = i.util.createBuffer()),
                            (l = t || new i.util.createBuffer()),
                            (h = e),
                            (m.output = l)
                    },
                    update: function (e) {
                        for (p || f.putBuffer(e); f.length() >= 8;)
                            y([
                                [5, n],
                                [1, u],
                                [6, n],
                                [1, u],
                                [5, n],
                            ])
                    },
                    finish: function (e) {
                        var t = !0
                        if (r)
                            if (e) t = e(8, f, !r)
                            else {
                                var i = 8 === f.length() ? 8 : 8 - f.length()
                                f.fillWithByte(i, i)
                            }
                        if ((t && ((p = !0), m.update()), !r && (t = 0 === f.length())))
                            if (e) t = e(8, l, !r)
                            else {
                                var n = l.length(),
                                    s = l.at(n - 1)
                                s > n ? (t = !1) : l.truncate(s)
                            }
                        return t
                    },
                })
            }
                ; (i.rc2.startEncrypting = function (e, t, r) {
                    var n = i.rc2.createEncryptionCipher(e, 128)
                    return n.start(t, r), n
                }),
                    (i.rc2.createEncryptionCipher = function (e, t) {
                        return u(e, t, !0)
                    }),
                    (i.rc2.startDecrypting = function (e, t, r) {
                        var n = i.rc2.createDecryptionCipher(e, 128)
                        return n.start(t, r), n
                    }),
                    (i.rc2.createDecryptionCipher = function (e, t) {
                        return u(e, t, !1)
                    })
        },
        28095: (e, t, r) => {
            var i = r(3832)
            if (
                (r(3068),
                    r(15764),
                    r(66270),
                    r(18936),
                    r(29654),
                    r(49563),
                    r(97116),
                    void 0 === n)
            )
                var n = i.jsbn.BigInteger
            var s = i.util.isNodejs ? r(25819) : null,
                o = i.asn1,
                a = i.util
                ; (i.pki = i.pki || {}), (e.exports = i.pki.rsa = i.rsa = i.rsa || {})
            var u = i.pki,
                c = [6, 4, 2, 4, 2, 4, 6, 2],
                d = {
                    name: 'PrivateKeyInfo',
                    tagClass: o.Class.UNIVERSAL,
                    type: o.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'PrivateKeyInfo.version',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyVersion',
                        },
                        {
                            name: 'PrivateKeyInfo.privateKeyAlgorithm',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'AlgorithmIdentifier.algorithm',
                                    tagClass: o.Class.UNIVERSAL,
                                    type: o.Type.OID,
                                    constructed: !1,
                                    capture: 'privateKeyOid',
                                },
                            ],
                        },
                        {
                            name: 'PrivateKeyInfo',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.OCTETSTRING,
                            constructed: !1,
                            capture: 'privateKey',
                        },
                    ],
                },
                p = {
                    name: 'RSAPrivateKey',
                    tagClass: o.Class.UNIVERSAL,
                    type: o.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'RSAPrivateKey.version',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyVersion',
                        },
                        {
                            name: 'RSAPrivateKey.modulus',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyModulus',
                        },
                        {
                            name: 'RSAPrivateKey.publicExponent',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyPublicExponent',
                        },
                        {
                            name: 'RSAPrivateKey.privateExponent',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyPrivateExponent',
                        },
                        {
                            name: 'RSAPrivateKey.prime1',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyPrime1',
                        },
                        {
                            name: 'RSAPrivateKey.prime2',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyPrime2',
                        },
                        {
                            name: 'RSAPrivateKey.exponent1',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyExponent1',
                        },
                        {
                            name: 'RSAPrivateKey.exponent2',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyExponent2',
                        },
                        {
                            name: 'RSAPrivateKey.coefficient',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'privateKeyCoefficient',
                        },
                    ],
                },
                f = {
                    name: 'RSAPublicKey',
                    tagClass: o.Class.UNIVERSAL,
                    type: o.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'RSAPublicKey.modulus',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'publicKeyModulus',
                        },
                        {
                            name: 'RSAPublicKey.exponent',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.INTEGER,
                            constructed: !1,
                            capture: 'publicKeyExponent',
                        },
                    ],
                },
                l = (i.pki.rsa.publicKeyValidator = {
                    name: 'SubjectPublicKeyInfo',
                    tagClass: o.Class.UNIVERSAL,
                    type: o.Type.SEQUENCE,
                    constructed: !0,
                    captureAsn1: 'subjectPublicKeyInfo',
                    value: [
                        {
                            name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'AlgorithmIdentifier.algorithm',
                                    tagClass: o.Class.UNIVERSAL,
                                    type: o.Type.OID,
                                    constructed: !1,
                                    capture: 'publicKeyOid',
                                },
                            ],
                        },
                        {
                            name: 'SubjectPublicKeyInfo.subjectPublicKey',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.BITSTRING,
                            constructed: !1,
                            value: [
                                {
                                    name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
                                    tagClass: o.Class.UNIVERSAL,
                                    type: o.Type.SEQUENCE,
                                    constructed: !0,
                                    optional: !0,
                                    captureAsn1: 'rsaPublicKey',
                                },
                            ],
                        },
                    ],
                }),
                h = {
                    name: 'DigestInfo',
                    tagClass: o.Class.UNIVERSAL,
                    type: o.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'DigestInfo.DigestAlgorithm',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'DigestInfo.DigestAlgorithm.algorithmIdentifier',
                                    tagClass: o.Class.UNIVERSAL,
                                    type: o.Type.OID,
                                    constructed: !1,
                                    capture: 'algorithmIdentifier',
                                },
                                {
                                    name: 'DigestInfo.DigestAlgorithm.parameters',
                                    tagClass: o.Class.UNIVERSAL,
                                    type: o.Type.NULL,
                                    capture: 'parameters',
                                    optional: !0,
                                    constructed: !1,
                                },
                            ],
                        },
                        {
                            name: 'DigestInfo.digest',
                            tagClass: o.Class.UNIVERSAL,
                            type: o.Type.OCTETSTRING,
                            constructed: !1,
                            capture: 'digest',
                        },
                    ],
                },
                g = function (e) {
                    var t
                    if (!(e.algorithm in u.oids)) {
                        var r = new Error('Unknown message digest algorithm.')
                        throw ((r.algorithm = e.algorithm), r)
                    }
                    t = u.oids[e.algorithm]
                    var i = o.oidToDer(t).getBytes(),
                        n = o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, []),
                        s = o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [])
                    s.value.push(o.create(o.Class.UNIVERSAL, o.Type.OID, !1, i)),
                        s.value.push(o.create(o.Class.UNIVERSAL, o.Type.NULL, !1, ''))
                    var a = o.create(
                        o.Class.UNIVERSAL,
                        o.Type.OCTETSTRING,
                        !1,
                        e.digest().getBytes()
                    )
                    return n.value.push(s), n.value.push(a), o.toDer(n).getBytes()
                },
                y = function (e, t, r) {
                    if (r) return e.modPow(t.e, t.n)
                    if (!t.p || !t.q) return e.modPow(t.d, t.n)
                    var s
                    t.dP || (t.dP = t.d.mod(t.p.subtract(n.ONE))),
                        t.dQ || (t.dQ = t.d.mod(t.q.subtract(n.ONE))),
                        t.qInv || (t.qInv = t.q.modInverse(t.p))
                    do {
                        s = new n(
                            i.util.bytesToHex(i.random.getBytes(t.n.bitLength() / 8)),
                            16
                        )
                    } while (s.compareTo(t.n) >= 0 || !s.gcd(t.n).equals(n.ONE))
                    for (
                        var o = (e = e.multiply(s.modPow(t.e, t.n)).mod(t.n))
                            .mod(t.p)
                            .modPow(t.dP, t.p),
                        a = e.mod(t.q).modPow(t.dQ, t.q);
                        o.compareTo(a) < 0;

                    )
                        o = o.add(t.p)
                    var u = o.subtract(a).multiply(t.qInv).mod(t.p).multiply(t.q).add(a)
                    return (u = u.multiply(s.modInverse(t.n)).mod(t.n))
                }
            function m(e, t, r) {
                var n = i.util.createBuffer(),
                    s = Math.ceil(t.n.bitLength() / 8)
                if (e.length > s - 11) {
                    var o = new Error('Message is too long for PKCS#1 v1.5 padding.')
                    throw ((o.length = e.length), (o.max = s - 11), o)
                }
                n.putByte(0), n.putByte(r)
                var a,
                    u = s - 3 - e.length
                if (0 === r || 1 === r) {
                    a = 0 === r ? 0 : 255
                    for (var c = 0; c < u; ++c) n.putByte(a)
                } else
                    for (; u > 0;) {
                        var d = 0,
                            p = i.random.getBytes(u)
                        for (c = 0; c < u; ++c)
                            0 === (a = p.charCodeAt(c)) ? ++d : n.putByte(a)
                        u = d
                    }
                return n.putByte(0), n.putBytes(e), n
            }
            function v(e, t, r, n) {
                var s = Math.ceil(t.n.bitLength() / 8),
                    o = i.util.createBuffer(e),
                    a = o.getByte(),
                    u = o.getByte()
                if (
                    0 !== a ||
                    (r && 0 !== u && 1 !== u) ||
                    (!r && 2 != u) ||
                    (r && 0 === u && void 0 === n)
                )
                    throw new Error('Encryption block is invalid.')
                var c = 0
                if (0 === u) {
                    c = s - 3 - n
                    for (var d = 0; d < c; ++d)
                        if (0 !== o.getByte())
                            throw new Error('Encryption block is invalid.')
                } else if (1 === u)
                    for (c = 0; o.length() > 1;) {
                        if (255 !== o.getByte()) {
                            --o.read
                            break
                        }
                        ++c
                    }
                else if (2 === u)
                    for (c = 0; o.length() > 1;) {
                        if (0 === o.getByte()) {
                            --o.read
                            break
                        }
                        ++c
                    }
                if (0 !== o.getByte() || c !== s - 3 - o.length())
                    throw new Error('Encryption block is invalid.')
                return o.getBytes()
            }
            function b(e) {
                var t = e.toString(16)
                t[0] >= '8' && (t = '00' + t)
                var r = i.util.hexToBytes(t)
                return r.length > 1 &&
                    ((0 === r.charCodeAt(0) && 0 == (128 & r.charCodeAt(1))) ||
                        (255 === r.charCodeAt(0) && 128 == (128 & r.charCodeAt(1))))
                    ? r.substr(1)
                    : r
            }
            function w(e) {
                return e <= 100
                    ? 27
                    : e <= 150
                        ? 18
                        : e <= 200
                            ? 15
                            : e <= 250
                                ? 12
                                : e <= 300
                                    ? 9
                                    : e <= 350
                                        ? 8
                                        : e <= 400
                                            ? 7
                                            : e <= 500
                                                ? 6
                                                : e <= 600
                                                    ? 5
                                                    : e <= 800
                                                        ? 4
                                                        : e <= 1250
                                                            ? 3
                                                            : 2
            }
            function E(e) {
                return i.util.isNodejs && 'function' == typeof s[e]
            }
            function I(e) {
                return (
                    void 0 !== a.globalScope &&
                    'object' == typeof a.globalScope.crypto &&
                    'object' == typeof a.globalScope.crypto.subtle &&
                    'function' == typeof a.globalScope.crypto.subtle[e]
                )
            }
            function C(e) {
                return (
                    void 0 !== a.globalScope &&
                    'object' == typeof a.globalScope.msCrypto &&
                    'object' == typeof a.globalScope.msCrypto.subtle &&
                    'function' == typeof a.globalScope.msCrypto.subtle[e]
                )
            }
            function S(e) {
                for (
                    var t = i.util.hexToBytes(e.toString(16)),
                    r = new Uint8Array(t.length),
                    n = 0;
                    n < t.length;
                    ++n
                )
                    r[n] = t.charCodeAt(n)
                return r
            }
            ; (u.rsa.encrypt = function (e, t, r) {
                var s,
                    o = r,
                    a = Math.ceil(t.n.bitLength() / 8)
                !1 !== r && !0 !== r
                    ? ((o = 2 === r), (s = m(e, t, r)))
                    : (s = i.util.createBuffer()).putBytes(e)
                for (
                    var u = new n(s.toHex(), 16),
                    c = y(u, t, o).toString(16),
                    d = i.util.createBuffer(),
                    p = a - Math.ceil(c.length / 2);
                    p > 0;

                )
                    d.putByte(0), --p
                return d.putBytes(i.util.hexToBytes(c)), d.getBytes()
            }),
                (u.rsa.decrypt = function (e, t, r, s) {
                    var o = Math.ceil(t.n.bitLength() / 8)
                    if (e.length !== o) {
                        var a = new Error('Encrypted message length is invalid.')
                        throw ((a.length = e.length), (a.expected = o), a)
                    }
                    var u = new n(i.util.createBuffer(e).toHex(), 16)
                    if (u.compareTo(t.n) >= 0)
                        throw new Error('Encrypted message is invalid.')
                    for (
                        var c = y(u, t, r).toString(16),
                        d = i.util.createBuffer(),
                        p = o - Math.ceil(c.length / 2);
                        p > 0;

                    )
                        d.putByte(0), --p
                    return (
                        d.putBytes(i.util.hexToBytes(c)),
                        !1 !== s ? v(d.getBytes(), t, r) : d.getBytes()
                    )
                }),
                (u.rsa.createKeyPairGenerationState = function (e, t, r) {
                    'string' == typeof e && (e = parseInt(e, 10)), (e = e || 2048)
                    var s,
                        o = (r = r || {}).prng || i.random,
                        a = {
                            nextBytes: function (e) {
                                for (var t = o.getBytesSync(e.length), r = 0; r < e.length; ++r)
                                    e[r] = t.charCodeAt(r)
                            },
                        },
                        u = r.algorithm || 'PRIMEINC'
                    if ('PRIMEINC' !== u)
                        throw new Error('Invalid key generation algorithm: ' + u)
                    return (
                        (s = {
                            algorithm: u,
                            state: 0,
                            bits: e,
                            rng: a,
                            eInt: t || 65537,
                            e: new n(null),
                            p: null,
                            q: null,
                            qBits: e >> 1,
                            pBits: e - (e >> 1),
                            pqState: 0,
                            num: null,
                            keys: null,
                        }).e.fromInt(s.eInt),
                        s
                    )
                }),
                (u.rsa.stepKeyPairGenerationState = function (e, t) {
                    'algorithm' in e || (e.algorithm = 'PRIMEINC')
                    var r = new n(null)
                    r.fromInt(30)
                    for (
                        var i,
                        s = 0,
                        o = function (e, t) {
                            return e | t
                        },
                        a = +new Date(),
                        d = 0;
                        null === e.keys && (t <= 0 || d < t);

                    ) {
                        if (0 === e.state) {
                            var p = null === e.p ? e.pBits : e.qBits,
                                f = p - 1
                            0 === e.pqState
                                ? ((e.num = new n(p, e.rng)),
                                    e.num.testBit(f) ||
                                    e.num.bitwiseTo(n.ONE.shiftLeft(f), o, e.num),
                                    e.num.dAddOffset(31 - e.num.mod(r).byteValue(), 0),
                                    (s = 0),
                                    ++e.pqState)
                                : 1 === e.pqState
                                    ? e.num.bitLength() > p
                                        ? (e.pqState = 0)
                                        : e.num.isProbablePrime(w(e.num.bitLength()))
                                            ? ++e.pqState
                                            : e.num.dAddOffset(c[s++ % 8], 0)
                                    : 2 === e.pqState
                                        ? (e.pqState =
                                            0 === e.num.subtract(n.ONE).gcd(e.e).compareTo(n.ONE)
                                                ? 3
                                                : 0)
                                        : 3 === e.pqState &&
                                        ((e.pqState = 0),
                                            null === e.p ? (e.p = e.num) : (e.q = e.num),
                                            null !== e.p && null !== e.q && ++e.state,
                                            (e.num = null))
                        } else if (1 === e.state)
                            e.p.compareTo(e.q) < 0 &&
                                ((e.num = e.p), (e.p = e.q), (e.q = e.num)),
                                ++e.state
                        else if (2 === e.state)
                            (e.p1 = e.p.subtract(n.ONE)),
                                (e.q1 = e.q.subtract(n.ONE)),
                                (e.phi = e.p1.multiply(e.q1)),
                                ++e.state
                        else if (3 === e.state)
                            0 === e.phi.gcd(e.e).compareTo(n.ONE)
                                ? ++e.state
                                : ((e.p = null), (e.q = null), (e.state = 0))
                        else if (4 === e.state)
                            (e.n = e.p.multiply(e.q)),
                                e.n.bitLength() === e.bits
                                    ? ++e.state
                                    : ((e.q = null), (e.state = 0))
                        else if (5 === e.state) {
                            var l = e.e.modInverse(e.phi)
                            e.keys = {
                                privateKey: u.rsa.setPrivateKey(
                                    e.n,
                                    e.e,
                                    l,
                                    e.p,
                                    e.q,
                                    l.mod(e.p1),
                                    l.mod(e.q1),
                                    e.q.modInverse(e.p)
                                ),
                                publicKey: u.rsa.setPublicKey(e.n, e.e),
                            }
                        }
                        ; (d += (i = +new Date()) - a), (a = i)
                    }
                    return null !== e.keys
                }),
                (u.rsa.generateKeyPair = function (e, t, r, c) {
                    if (
                        (1 === arguments.length
                            ? 'object' == typeof e
                                ? ((r = e), (e = void 0))
                                : 'function' == typeof e && ((c = e), (e = void 0))
                            : 2 === arguments.length
                                ? 'number' == typeof e
                                    ? 'function' == typeof t
                                        ? ((c = t), (t = void 0))
                                        : 'number' != typeof t && ((r = t), (t = void 0))
                                    : ((r = e), (c = t), (e = void 0), (t = void 0))
                                : 3 === arguments.length &&
                                ('number' == typeof t
                                    ? 'function' == typeof r && ((c = r), (r = void 0))
                                    : ((c = r), (r = t), (t = void 0))),
                            (r = r || {}),
                            void 0 === e && (e = r.bits || 2048),
                            void 0 === t && (t = r.e || 65537),
                            !i.options.usePureJavaScript &&
                            !r.prng &&
                            e >= 256 &&
                            e <= 16384 &&
                            (65537 === t || 3 === t))
                    )
                        if (c) {
                            if (E('generateKeyPair'))
                                return s.generateKeyPair(
                                    'rsa',
                                    {
                                        modulusLength: e,
                                        publicExponent: t,
                                        publicKeyEncoding: { type: 'spki', format: 'pem' },
                                        privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
                                    },
                                    function (e, t, r) {
                                        if (e) return c(e)
                                        c(null, {
                                            privateKey: u.privateKeyFromPem(r),
                                            publicKey: u.publicKeyFromPem(t),
                                        })
                                    }
                                )
                            if (I('generateKey') && I('exportKey'))
                                return a.globalScope.crypto.subtle
                                    .generateKey(
                                        {
                                            name: 'RSASSA-PKCS1-v1_5',
                                            modulusLength: e,
                                            publicExponent: S(t),
                                            hash: { name: 'SHA-256' },
                                        },
                                        !0,
                                        ['sign', 'verify']
                                    )
                                    .then(function (e) {
                                        return a.globalScope.crypto.subtle.exportKey(
                                            'pkcs8',
                                            e.privateKey
                                        )
                                    })
                                    .then(void 0, function (e) {
                                        c(e)
                                    })
                                    .then(function (e) {
                                        if (e) {
                                            var t = u.privateKeyFromAsn1(
                                                o.fromDer(i.util.createBuffer(e))
                                            )
                                            c(null, {
                                                privateKey: t,
                                                publicKey: u.setRsaPublicKey(t.n, t.e),
                                            })
                                        }
                                    })
                            if (C('generateKey') && C('exportKey')) {
                                var d = a.globalScope.msCrypto.subtle.generateKey(
                                    {
                                        name: 'RSASSA-PKCS1-v1_5',
                                        modulusLength: e,
                                        publicExponent: S(t),
                                        hash: { name: 'SHA-256' },
                                    },
                                    !0,
                                    ['sign', 'verify']
                                )
                                return (
                                    (d.oncomplete = function (e) {
                                        var t = e.target.result,
                                            r = a.globalScope.msCrypto.subtle.exportKey(
                                                'pkcs8',
                                                t.privateKey
                                            )
                                            ; (r.oncomplete = function (e) {
                                                var t = e.target.result,
                                                    r = u.privateKeyFromAsn1(
                                                        o.fromDer(i.util.createBuffer(t))
                                                    )
                                                c(null, {
                                                    privateKey: r,
                                                    publicKey: u.setRsaPublicKey(r.n, r.e),
                                                })
                                            }),
                                                (r.onerror = function (e) {
                                                    c(e)
                                                })
                                    }),
                                    void (d.onerror = function (e) {
                                        c(e)
                                    })
                                )
                            }
                        } else if (E('generateKeyPairSync')) {
                            var p = s.generateKeyPairSync('rsa', {
                                modulusLength: e,
                                publicExponent: t,
                                publicKeyEncoding: { type: 'spki', format: 'pem' },
                                privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
                            })
                            return {
                                privateKey: u.privateKeyFromPem(p.privateKey),
                                publicKey: u.publicKeyFromPem(p.publicKey),
                            }
                        }
                    var f = u.rsa.createKeyPairGenerationState(e, t, r)
                    if (!c) return u.rsa.stepKeyPairGenerationState(f, 0), f.keys
                    !(function (e, t, r) {
                        'function' == typeof t && ((r = t), (t = {}))
                        t = t || {}
                        var s = {
                            algorithm: {
                                name: t.algorithm || 'PRIMEINC',
                                options: {
                                    workers: t.workers || 2,
                                    workLoad: t.workLoad || 100,
                                    workerScript: t.workerScript,
                                },
                            },
                        }
                        'prng' in t && (s.prng = t.prng)
                        function o() {
                            a(e.pBits, function (t, i) {
                                return t
                                    ? r(t)
                                    : ((e.p = i), null !== e.q ? c(t, e.q) : void a(e.qBits, c))
                            })
                        }
                        function a(e, t) {
                            i.prime.generateProbablePrime(e, s, t)
                        }
                        function c(t, i) {
                            if (t) return r(t)
                            if (((e.q = i), e.p.compareTo(e.q) < 0)) {
                                var s = e.p
                                    ; (e.p = e.q), (e.q = s)
                            }
                            if (0 !== e.p.subtract(n.ONE).gcd(e.e).compareTo(n.ONE))
                                return (e.p = null), void o()
                            if (0 !== e.q.subtract(n.ONE).gcd(e.e).compareTo(n.ONE))
                                return (e.q = null), void a(e.qBits, c)
                            if (
                                ((e.p1 = e.p.subtract(n.ONE)),
                                    (e.q1 = e.q.subtract(n.ONE)),
                                    (e.phi = e.p1.multiply(e.q1)),
                                    0 !== e.phi.gcd(e.e).compareTo(n.ONE))
                            )
                                return (e.p = e.q = null), void o()
                            if (((e.n = e.p.multiply(e.q)), e.n.bitLength() !== e.bits))
                                return (e.q = null), void a(e.qBits, c)
                            var d = e.e.modInverse(e.phi)
                                ; (e.keys = {
                                    privateKey: u.rsa.setPrivateKey(
                                        e.n,
                                        e.e,
                                        d,
                                        e.p,
                                        e.q,
                                        d.mod(e.p1),
                                        d.mod(e.q1),
                                        e.q.modInverse(e.p)
                                    ),
                                    publicKey: u.rsa.setPublicKey(e.n, e.e),
                                }),
                                    r(null, e.keys)
                        }
                        o()
                    })(f, r, c)
                }),
                (u.setRsaPublicKey = u.rsa.setPublicKey =
                    function (e, t) {
                        var r = {
                            n: e,
                            e: t,
                            encrypt: function (e, t, n) {
                                if (
                                    ('string' == typeof t
                                        ? (t = t.toUpperCase())
                                        : void 0 === t && (t = 'RSAES-PKCS1-V1_5'),
                                        'RSAES-PKCS1-V1_5' === t)
                                )
                                    t = {
                                        encode: function (e, t, r) {
                                            return m(e, t, 2).getBytes()
                                        },
                                    }
                                else if ('RSA-OAEP' === t || 'RSAES-OAEP' === t)
                                    t = {
                                        encode: function (e, t) {
                                            return i.pkcs1.encode_rsa_oaep(t, e, n)
                                        },
                                    }
                                else if (-1 !== ['RAW', 'NONE', 'NULL', null].indexOf(t))
                                    t = {
                                        encode: function (e) {
                                            return e
                                        },
                                    }
                                else if ('string' == typeof t)
                                    throw new Error('Unsupported encryption scheme: "' + t + '".')
                                var s = t.encode(e, r, !0)
                                return u.rsa.encrypt(s, r, !0)
                            },
                            verify: function (e, t, n, s) {
                                'string' == typeof n
                                    ? (n = n.toUpperCase())
                                    : void 0 === n && (n = 'RSASSA-PKCS1-V1_5'),
                                    void 0 === s && (s = { _parseAllDigestBytes: !0 }),
                                    '_parseAllDigestBytes' in s || (s._parseAllDigestBytes = !0),
                                    'RSASSA-PKCS1-V1_5' === n
                                        ? (n = {
                                            verify: function (e, t) {
                                                t = v(t, r, !0)
                                                var n = o.fromDer(t, {
                                                    parseAllBytes: s._parseAllDigestBytes,
                                                }),
                                                    a = {},
                                                    u = []
                                                if (!o.validate(n, h, a, u))
                                                    throw (
                                                        (((c = new Error(
                                                            'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.'
                                                        )).errors = u),
                                                            c)
                                                    )
                                                var c,
                                                    d = o.derToOid(a.algorithmIdentifier)
                                                if (
                                                    d !== i.oids.md2 &&
                                                    d !== i.oids.md5 &&
                                                    d !== i.oids.sha1 &&
                                                    d !== i.oids.sha224 &&
                                                    d !== i.oids.sha256 &&
                                                    d !== i.oids.sha384 &&
                                                    d !== i.oids.sha512 &&
                                                    d !== i.oids['sha512-224'] &&
                                                    d !== i.oids['sha512-256']
                                                )
                                                    throw (
                                                        (((c = new Error(
                                                            'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.'
                                                        )).oid = d),
                                                            c)
                                                    )
                                                if (
                                                    (d === i.oids.md2 || d === i.oids.md5) &&
                                                    !('parameters' in a)
                                                )
                                                    throw new Error(
                                                        'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value. Missing algorithm identifer NULL parameters.'
                                                    )
                                                return e === a.digest
                                            },
                                        })
                                        : ('NONE' !== n && 'NULL' !== n && null !== n) ||
                                        (n = {
                                            verify: function (e, t) {
                                                return e === (t = v(t, r, !0))
                                            },
                                        })
                                var a = u.rsa.decrypt(t, r, !0, !1)
                                return n.verify(e, a, r.n.bitLength())
                            },
                        }
                        return r
                    }),
                (u.setRsaPrivateKey = u.rsa.setPrivateKey =
                    function (e, t, r, n, s, o, a, c) {
                        var d = {
                            n: e,
                            e: t,
                            d: r,
                            p: n,
                            q: s,
                            dP: o,
                            dQ: a,
                            qInv: c,
                            decrypt: function (e, t, r) {
                                'string' == typeof t
                                    ? (t = t.toUpperCase())
                                    : void 0 === t && (t = 'RSAES-PKCS1-V1_5')
                                var n = u.rsa.decrypt(e, d, !1, !1)
                                if ('RSAES-PKCS1-V1_5' === t) t = { decode: v }
                                else if ('RSA-OAEP' === t || 'RSAES-OAEP' === t)
                                    t = {
                                        decode: function (e, t) {
                                            return i.pkcs1.decode_rsa_oaep(t, e, r)
                                        },
                                    }
                                else {
                                    if (-1 === ['RAW', 'NONE', 'NULL', null].indexOf(t))
                                        throw new Error(
                                            'Unsupported encryption scheme: "' + t + '".'
                                        )
                                    t = {
                                        decode: function (e) {
                                            return e
                                        },
                                    }
                                }
                                return t.decode(n, d, !1)
                            },
                            sign: function (e, t) {
                                var r = !1
                                'string' == typeof t && (t = t.toUpperCase()),
                                    void 0 === t || 'RSASSA-PKCS1-V1_5' === t
                                        ? ((t = { encode: g }), (r = 1))
                                        : ('NONE' !== t && 'NULL' !== t && null !== t) ||
                                        ((t = {
                                            encode: function () {
                                                return e
                                            },
                                        }),
                                            (r = 1))
                                var i = t.encode(e, d.n.bitLength())
                                return u.rsa.encrypt(i, d, r)
                            },
                        }
                        return d
                    }),
                (u.wrapRsaPrivateKey = function (e) {
                    return o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                        o.create(
                            o.Class.UNIVERSAL,
                            o.Type.INTEGER,
                            !1,
                            o.integerToDer(0).getBytes()
                        ),
                        o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                            o.create(
                                o.Class.UNIVERSAL,
                                o.Type.OID,
                                !1,
                                o.oidToDer(u.oids.rsaEncryption).getBytes()
                            ),
                            o.create(o.Class.UNIVERSAL, o.Type.NULL, !1, ''),
                        ]),
                        o.create(
                            o.Class.UNIVERSAL,
                            o.Type.OCTETSTRING,
                            !1,
                            o.toDer(e).getBytes()
                        ),
                    ])
                }),
                (u.privateKeyFromAsn1 = function (e) {
                    var t,
                        r,
                        s,
                        a,
                        c,
                        f,
                        l,
                        h,
                        g = {},
                        y = []
                    if (
                        (o.validate(e, d, g, y) &&
                            (e = o.fromDer(i.util.createBuffer(g.privateKey))),
                            (g = {}),
                            (y = []),
                            !o.validate(e, p, g, y))
                    ) {
                        var m = new Error(
                            'Cannot read private key. ASN.1 object does not contain an RSAPrivateKey.'
                        )
                        throw ((m.errors = y), m)
                    }
                    return (
                        (t = i.util.createBuffer(g.privateKeyModulus).toHex()),
                        (r = i.util.createBuffer(g.privateKeyPublicExponent).toHex()),
                        (s = i.util.createBuffer(g.privateKeyPrivateExponent).toHex()),
                        (a = i.util.createBuffer(g.privateKeyPrime1).toHex()),
                        (c = i.util.createBuffer(g.privateKeyPrime2).toHex()),
                        (f = i.util.createBuffer(g.privateKeyExponent1).toHex()),
                        (l = i.util.createBuffer(g.privateKeyExponent2).toHex()),
                        (h = i.util.createBuffer(g.privateKeyCoefficient).toHex()),
                        u.setRsaPrivateKey(
                            new n(t, 16),
                            new n(r, 16),
                            new n(s, 16),
                            new n(a, 16),
                            new n(c, 16),
                            new n(f, 16),
                            new n(l, 16),
                            new n(h, 16)
                        )
                    )
                }),
                (u.privateKeyToAsn1 = u.privateKeyToRSAPrivateKey =
                    function (e) {
                        return o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                            o.create(
                                o.Class.UNIVERSAL,
                                o.Type.INTEGER,
                                !1,
                                o.integerToDer(0).getBytes()
                            ),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.n)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.e)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.d)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.p)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.q)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.dP)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.dQ)),
                            o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.qInv)),
                        ])
                    }),
                (u.publicKeyFromAsn1 = function (e) {
                    var t = {},
                        r = []
                    if (o.validate(e, l, t, r)) {
                        var s,
                            a = o.derToOid(t.publicKeyOid)
                        if (a !== u.oids.rsaEncryption)
                            throw (
                                (((s = new Error('Cannot read public key. Unknown OID.')).oid =
                                    a),
                                    s)
                            )
                        e = t.rsaPublicKey
                    }
                    if (((r = []), !o.validate(e, f, t, r)))
                        throw (
                            (((s = new Error(
                                'Cannot read public key. ASN.1 object does not contain an RSAPublicKey.'
                            )).errors = r),
                                s)
                        )
                    var c = i.util.createBuffer(t.publicKeyModulus).toHex(),
                        d = i.util.createBuffer(t.publicKeyExponent).toHex()
                    return u.setRsaPublicKey(new n(c, 16), new n(d, 16))
                }),
                (u.publicKeyToAsn1 = u.publicKeyToSubjectPublicKeyInfo =
                    function (e) {
                        return o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                            o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                                o.create(
                                    o.Class.UNIVERSAL,
                                    o.Type.OID,
                                    !1,
                                    o.oidToDer(u.oids.rsaEncryption).getBytes()
                                ),
                                o.create(o.Class.UNIVERSAL, o.Type.NULL, !1, ''),
                            ]),
                            o.create(o.Class.UNIVERSAL, o.Type.BITSTRING, !1, [
                                u.publicKeyToRSAPublicKey(e),
                            ]),
                        ])
                    }),
                (u.publicKeyToRSAPublicKey = function (e) {
                    return o.create(o.Class.UNIVERSAL, o.Type.SEQUENCE, !0, [
                        o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.n)),
                        o.create(o.Class.UNIVERSAL, o.Type.INTEGER, !1, b(e.e)),
                    ])
                })
        },
        137: (e, t, r) => {
            var i = r(3832)
            r(28991), r(97116)
            var n = (e.exports = i.sha1 = i.sha1 || {})
                ; (i.md.sha1 = i.md.algorithms.sha1 = n),
                    (n.create = function () {
                        o ||
                            ((s = String.fromCharCode(128)),
                                (s += i.util.fillString(String.fromCharCode(0), 64)),
                                (o = !0))
                        var e = null,
                            t = i.util.createBuffer(),
                            r = new Array(80),
                            n = {
                                algorithm: 'sha1',
                                blockLength: 64,
                                digestLength: 20,
                                messageLength: 0,
                                fullMessageLength: null,
                                messageLengthSize: 8,
                                start: function () {
                                    ; (n.messageLength = 0),
                                        (n.fullMessageLength = n.messageLength64 = [])
                                    for (var r = n.messageLengthSize / 4, s = 0; s < r; ++s)
                                        n.fullMessageLength.push(0)
                                    return (
                                        (t = i.util.createBuffer()),
                                        (e = {
                                            h0: 1732584193,
                                            h1: 4023233417,
                                            h2: 2562383102,
                                            h3: 271733878,
                                            h4: 3285377520,
                                        }),
                                        n
                                    )
                                },
                            }
                        return (
                            n.start(),
                            (n.update = function (s, o) {
                                'utf8' === o && (s = i.util.encodeUtf8(s))
                                var u = s.length
                                    ; (n.messageLength += u), (u = [(u / 4294967296) >>> 0, u >>> 0])
                                for (var c = n.fullMessageLength.length - 1; c >= 0; --c)
                                    (n.fullMessageLength[c] += u[1]),
                                        (u[1] = u[0] + ((n.fullMessageLength[c] / 4294967296) >>> 0)),
                                        (n.fullMessageLength[c] = n.fullMessageLength[c] >>> 0),
                                        (u[0] = (u[1] / 4294967296) >>> 0)
                                return (
                                    t.putBytes(s),
                                    a(e, r, t),
                                    (t.read > 2048 || 0 === t.length()) && t.compact(),
                                    n
                                )
                            }),
                            (n.digest = function () {
                                var o = i.util.createBuffer()
                                o.putBytes(t.bytes())
                                var u,
                                    c =
                                        (n.fullMessageLength[n.fullMessageLength.length - 1] +
                                            n.messageLengthSize) &
                                        (n.blockLength - 1)
                                o.putBytes(s.substr(0, n.blockLength - c))
                                for (
                                    var d = 8 * n.fullMessageLength[0], p = 0;
                                    p < n.fullMessageLength.length - 1;
                                    ++p
                                )
                                    (d +=
                                        ((u = 8 * n.fullMessageLength[p + 1]) / 4294967296) >>> 0),
                                        o.putInt32(d >>> 0),
                                        (d = u >>> 0)
                                o.putInt32(d)
                                var f = { h0: e.h0, h1: e.h1, h2: e.h2, h3: e.h3, h4: e.h4 }
                                a(f, r, o)
                                var l = i.util.createBuffer()
                                return (
                                    l.putInt32(f.h0),
                                    l.putInt32(f.h1),
                                    l.putInt32(f.h2),
                                    l.putInt32(f.h3),
                                    l.putInt32(f.h4),
                                    l
                                )
                            }),
                            n
                        )
                    })
            var s = null,
                o = !1
            function a(e, t, r) {
                for (var i, n, s, o, a, u, c, d = r.length(); d >= 64;) {
                    for (
                        n = e.h0, s = e.h1, o = e.h2, a = e.h3, u = e.h4, c = 0;
                        c < 16;
                        ++c
                    )
                        (i = r.getInt32()),
                            (t[c] = i),
                            (i =
                                ((n << 5) | (n >>> 27)) +
                                (a ^ (s & (o ^ a))) +
                                u +
                                1518500249 +
                                i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                    for (; c < 20; ++c)
                        (i =
                            ((i = t[c - 3] ^ t[c - 8] ^ t[c - 14] ^ t[c - 16]) << 1) |
                            (i >>> 31)),
                            (t[c] = i),
                            (i =
                                ((n << 5) | (n >>> 27)) +
                                (a ^ (s & (o ^ a))) +
                                u +
                                1518500249 +
                                i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                    for (; c < 32; ++c)
                        (i =
                            ((i = t[c - 3] ^ t[c - 8] ^ t[c - 14] ^ t[c - 16]) << 1) |
                            (i >>> 31)),
                            (t[c] = i),
                            (i = ((n << 5) | (n >>> 27)) + (s ^ o ^ a) + u + 1859775393 + i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                    for (; c < 40; ++c)
                        (i =
                            ((i = t[c - 6] ^ t[c - 16] ^ t[c - 28] ^ t[c - 32]) << 2) |
                            (i >>> 30)),
                            (t[c] = i),
                            (i = ((n << 5) | (n >>> 27)) + (s ^ o ^ a) + u + 1859775393 + i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                    for (; c < 60; ++c)
                        (i =
                            ((i = t[c - 6] ^ t[c - 16] ^ t[c - 28] ^ t[c - 32]) << 2) |
                            (i >>> 30)),
                            (t[c] = i),
                            (i =
                                ((n << 5) | (n >>> 27)) +
                                ((s & o) | (a & (s ^ o))) +
                                u +
                                2400959708 +
                                i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                    for (; c < 80; ++c)
                        (i =
                            ((i = t[c - 6] ^ t[c - 16] ^ t[c - 28] ^ t[c - 32]) << 2) |
                            (i >>> 30)),
                            (t[c] = i),
                            (i = ((n << 5) | (n >>> 27)) + (s ^ o ^ a) + u + 3395469782 + i),
                            (u = a),
                            (a = o),
                            (o = ((s << 30) | (s >>> 2)) >>> 0),
                            (s = n),
                            (n = i)
                            ; (e.h0 = (e.h0 + n) | 0),
                                (e.h1 = (e.h1 + s) | 0),
                                (e.h2 = (e.h2 + o) | 0),
                                (e.h3 = (e.h3 + a) | 0),
                                (e.h4 = (e.h4 + u) | 0),
                                (d -= 64)
                }
            }
        },
        41668: (e, t, r) => {
            var i = r(3832)
            r(28991), r(97116)
            var n = (e.exports = i.sha256 = i.sha256 || {})
                ; (i.md.sha256 = i.md.algorithms.sha256 = n),
                    (n.create = function () {
                        o ||
                            ((s = String.fromCharCode(128)),
                                (s += i.util.fillString(String.fromCharCode(0), 64)),
                                (a = [
                                    1116352408, 1899447441, 3049323471, 3921009573, 961987163,
                                    1508970993, 2453635748, 2870763221, 3624381080, 310598401,
                                    607225278, 1426881987, 1925078388, 2162078206, 2614888103,
                                    3248222580, 3835390401, 4022224774, 264347078, 604807628,
                                    770255983, 1249150122, 1555081692, 1996064986, 2554220882,
                                    2821834349, 2952996808, 3210313671, 3336571891, 3584528711,
                                    113926993, 338241895, 666307205, 773529912, 1294757372,
                                    1396182291, 1695183700, 1986661051, 2177026350, 2456956037,
                                    2730485921, 2820302411, 3259730800, 3345764771, 3516065817,
                                    3600352804, 4094571909, 275423344, 430227734, 506948616,
                                    659060556, 883997877, 958139571, 1322822218, 1537002063,
                                    1747873779, 1955562222, 2024104815, 2227730452, 2361852424,
                                    2428436474, 2756734187, 3204031479, 3329325298,
                                ]),
                                (o = !0))
                        var e = null,
                            t = i.util.createBuffer(),
                            r = new Array(64),
                            n = {
                                algorithm: 'sha256',
                                blockLength: 64,
                                digestLength: 32,
                                messageLength: 0,
                                fullMessageLength: null,
                                messageLengthSize: 8,
                                start: function () {
                                    ; (n.messageLength = 0),
                                        (n.fullMessageLength = n.messageLength64 = [])
                                    for (var r = n.messageLengthSize / 4, s = 0; s < r; ++s)
                                        n.fullMessageLength.push(0)
                                    return (
                                        (t = i.util.createBuffer()),
                                        (e = {
                                            h0: 1779033703,
                                            h1: 3144134277,
                                            h2: 1013904242,
                                            h3: 2773480762,
                                            h4: 1359893119,
                                            h5: 2600822924,
                                            h6: 528734635,
                                            h7: 1541459225,
                                        }),
                                        n
                                    )
                                },
                            }
                        return (
                            n.start(),
                            (n.update = function (s, o) {
                                'utf8' === o && (s = i.util.encodeUtf8(s))
                                var a = s.length
                                    ; (n.messageLength += a), (a = [(a / 4294967296) >>> 0, a >>> 0])
                                for (var c = n.fullMessageLength.length - 1; c >= 0; --c)
                                    (n.fullMessageLength[c] += a[1]),
                                        (a[1] = a[0] + ((n.fullMessageLength[c] / 4294967296) >>> 0)),
                                        (n.fullMessageLength[c] = n.fullMessageLength[c] >>> 0),
                                        (a[0] = (a[1] / 4294967296) >>> 0)
                                return (
                                    t.putBytes(s),
                                    u(e, r, t),
                                    (t.read > 2048 || 0 === t.length()) && t.compact(),
                                    n
                                )
                            }),
                            (n.digest = function () {
                                var o = i.util.createBuffer()
                                o.putBytes(t.bytes())
                                var a,
                                    c =
                                        (n.fullMessageLength[n.fullMessageLength.length - 1] +
                                            n.messageLengthSize) &
                                        (n.blockLength - 1)
                                o.putBytes(s.substr(0, n.blockLength - c))
                                for (
                                    var d = 8 * n.fullMessageLength[0], p = 0;
                                    p < n.fullMessageLength.length - 1;
                                    ++p
                                )
                                    (d +=
                                        ((a = 8 * n.fullMessageLength[p + 1]) / 4294967296) >>> 0),
                                        o.putInt32(d >>> 0),
                                        (d = a >>> 0)
                                o.putInt32(d)
                                var f = {
                                    h0: e.h0,
                                    h1: e.h1,
                                    h2: e.h2,
                                    h3: e.h3,
                                    h4: e.h4,
                                    h5: e.h5,
                                    h6: e.h6,
                                    h7: e.h7,
                                }
                                u(f, r, o)
                                var l = i.util.createBuffer()
                                return (
                                    l.putInt32(f.h0),
                                    l.putInt32(f.h1),
                                    l.putInt32(f.h2),
                                    l.putInt32(f.h3),
                                    l.putInt32(f.h4),
                                    l.putInt32(f.h5),
                                    l.putInt32(f.h6),
                                    l.putInt32(f.h7),
                                    l
                                )
                            }),
                            n
                        )
                    })
            var s = null,
                o = !1,
                a = null
            function u(e, t, r) {
                for (
                    var i, n, s, o, u, c, d, p, f, l, h, g, y, m = r.length();
                    m >= 64;

                ) {
                    for (u = 0; u < 16; ++u) t[u] = r.getInt32()
                    for (; u < 64; ++u)
                        (i =
                            (((i = t[u - 2]) >>> 17) | (i << 15)) ^
                            ((i >>> 19) | (i << 13)) ^
                            (i >>> 10)),
                            (n =
                                (((n = t[u - 15]) >>> 7) | (n << 25)) ^
                                ((n >>> 18) | (n << 14)) ^
                                (n >>> 3)),
                            (t[u] = (i + t[u - 7] + n + t[u - 16]) | 0)
                    for (
                        c = e.h0,
                        d = e.h1,
                        p = e.h2,
                        f = e.h3,
                        l = e.h4,
                        h = e.h5,
                        g = e.h6,
                        y = e.h7,
                        u = 0;
                        u < 64;
                        ++u
                    )
                        (s =
                            ((c >>> 2) | (c << 30)) ^
                            ((c >>> 13) | (c << 19)) ^
                            ((c >>> 22) | (c << 10))),
                            (o = (c & d) | (p & (c ^ d))),
                            (i =
                                y +
                                (((l >>> 6) | (l << 26)) ^
                                    ((l >>> 11) | (l << 21)) ^
                                    ((l >>> 25) | (l << 7))) +
                                (g ^ (l & (h ^ g))) +
                                a[u] +
                                t[u]),
                            (y = g),
                            (g = h),
                            (h = l),
                            (l = (f + i) >>> 0),
                            (f = p),
                            (p = d),
                            (d = c),
                            (c = (i + (n = s + o)) >>> 0)
                            ; (e.h0 = (e.h0 + c) | 0),
                                (e.h1 = (e.h1 + d) | 0),
                                (e.h2 = (e.h2 + p) | 0),
                                (e.h3 = (e.h3 + f) | 0),
                                (e.h4 = (e.h4 + l) | 0),
                                (e.h5 = (e.h5 + h) | 0),
                                (e.h6 = (e.h6 + g) | 0),
                                (e.h7 = (e.h7 + y) | 0),
                                (m -= 64)
                }
            }
        },
        63219: (e, t, r) => {
            var i = r(3832)
            r(28991), r(97116)
            var n = (e.exports = i.sha512 = i.sha512 || {})
            i.md.sha512 = i.md.algorithms.sha512 = n
            var s = (i.sha384 = i.sha512.sha384 = i.sha512.sha384 || {})
                ; (s.create = function () {
                    return n.create('SHA-384')
                }),
                    (i.md.sha384 = i.md.algorithms.sha384 = s),
                    (i.sha512.sha256 = i.sha512.sha256 || {
                        create: function () {
                            return n.create('SHA-512/256')
                        },
                    }),
                    (i.md['sha512/256'] = i.md.algorithms['sha512/256'] = i.sha512.sha256),
                    (i.sha512.sha224 = i.sha512.sha224 || {
                        create: function () {
                            return n.create('SHA-512/224')
                        },
                    }),
                    (i.md['sha512/224'] = i.md.algorithms['sha512/224'] = i.sha512.sha224),
                    (n.create = function (e) {
                        if (
                            (a ||
                                ((o = String.fromCharCode(128)),
                                    (o += i.util.fillString(String.fromCharCode(0), 128)),
                                    (u = [
                                        [1116352408, 3609767458],
                                        [1899447441, 602891725],
                                        [3049323471, 3964484399],
                                        [3921009573, 2173295548],
                                        [961987163, 4081628472],
                                        [1508970993, 3053834265],
                                        [2453635748, 2937671579],
                                        [2870763221, 3664609560],
                                        [3624381080, 2734883394],
                                        [310598401, 1164996542],
                                        [607225278, 1323610764],
                                        [1426881987, 3590304994],
                                        [1925078388, 4068182383],
                                        [2162078206, 991336113],
                                        [2614888103, 633803317],
                                        [3248222580, 3479774868],
                                        [3835390401, 2666613458],
                                        [4022224774, 944711139],
                                        [264347078, 2341262773],
                                        [604807628, 2007800933],
                                        [770255983, 1495990901],
                                        [1249150122, 1856431235],
                                        [1555081692, 3175218132],
                                        [1996064986, 2198950837],
                                        [2554220882, 3999719339],
                                        [2821834349, 766784016],
                                        [2952996808, 2566594879],
                                        [3210313671, 3203337956],
                                        [3336571891, 1034457026],
                                        [3584528711, 2466948901],
                                        [113926993, 3758326383],
                                        [338241895, 168717936],
                                        [666307205, 1188179964],
                                        [773529912, 1546045734],
                                        [1294757372, 1522805485],
                                        [1396182291, 2643833823],
                                        [1695183700, 2343527390],
                                        [1986661051, 1014477480],
                                        [2177026350, 1206759142],
                                        [2456956037, 344077627],
                                        [2730485921, 1290863460],
                                        [2820302411, 3158454273],
                                        [3259730800, 3505952657],
                                        [3345764771, 106217008],
                                        [3516065817, 3606008344],
                                        [3600352804, 1432725776],
                                        [4094571909, 1467031594],
                                        [275423344, 851169720],
                                        [430227734, 3100823752],
                                        [506948616, 1363258195],
                                        [659060556, 3750685593],
                                        [883997877, 3785050280],
                                        [958139571, 3318307427],
                                        [1322822218, 3812723403],
                                        [1537002063, 2003034995],
                                        [1747873779, 3602036899],
                                        [1955562222, 1575990012],
                                        [2024104815, 1125592928],
                                        [2227730452, 2716904306],
                                        [2361852424, 442776044],
                                        [2428436474, 593698344],
                                        [2756734187, 3733110249],
                                        [3204031479, 2999351573],
                                        [3329325298, 3815920427],
                                        [3391569614, 3928383900],
                                        [3515267271, 566280711],
                                        [3940187606, 3454069534],
                                        [4118630271, 4000239992],
                                        [116418474, 1914138554],
                                        [174292421, 2731055270],
                                        [289380356, 3203993006],
                                        [460393269, 320620315],
                                        [685471733, 587496836],
                                        [852142971, 1086792851],
                                        [1017036298, 365543100],
                                        [1126000580, 2618297676],
                                        [1288033470, 3409855158],
                                        [1501505948, 4234509866],
                                        [1607167915, 987167468],
                                        [1816402316, 1246189591],
                                    ]),
                                    ((c = {})['SHA-512'] = [
                                        [1779033703, 4089235720],
                                        [3144134277, 2227873595],
                                        [1013904242, 4271175723],
                                        [2773480762, 1595750129],
                                        [1359893119, 2917565137],
                                        [2600822924, 725511199],
                                        [528734635, 4215389547],
                                        [1541459225, 327033209],
                                    ]),
                                    (c['SHA-384'] = [
                                        [3418070365, 3238371032],
                                        [1654270250, 914150663],
                                        [2438529370, 812702999],
                                        [355462360, 4144912697],
                                        [1731405415, 4290775857],
                                        [2394180231, 1750603025],
                                        [3675008525, 1694076839],
                                        [1203062813, 3204075428],
                                    ]),
                                    (c['SHA-512/256'] = [
                                        [573645204, 4230739756],
                                        [2673172387, 3360449730],
                                        [596883563, 1867755857],
                                        [2520282905, 1497426621],
                                        [2519219938, 2827943907],
                                        [3193839141, 1401305490],
                                        [721525244, 746961066],
                                        [246885852, 2177182882],
                                    ]),
                                    (c['SHA-512/224'] = [
                                        [2352822216, 424955298],
                                        [1944164710, 2312950998],
                                        [502970286, 855612546],
                                        [1738396948, 1479516111],
                                        [258812777, 2077511080],
                                        [2011393907, 79989058],
                                        [1067287976, 1780299464],
                                        [286451373, 2446758561],
                                    ]),
                                    (a = !0)),
                                void 0 === e && (e = 'SHA-512'),
                                !(e in c))
                        )
                            throw new Error('Invalid SHA-512 algorithm: ' + e)
                        for (
                            var t = c[e],
                            r = null,
                            n = i.util.createBuffer(),
                            s = new Array(80),
                            p = 0;
                            p < 80;
                            ++p
                        )
                            s[p] = new Array(2)
                        var f = 64
                        switch (e) {
                            case 'SHA-384':
                                f = 48
                                break
                            case 'SHA-512/256':
                                f = 32
                                break
                            case 'SHA-512/224':
                                f = 28
                        }
                        var l = {
                            algorithm: e.replace('-', '').toLowerCase(),
                            blockLength: 128,
                            digestLength: f,
                            messageLength: 0,
                            fullMessageLength: null,
                            messageLengthSize: 16,
                            start: function () {
                                ; (l.messageLength = 0),
                                    (l.fullMessageLength = l.messageLength128 = [])
                                for (var e = l.messageLengthSize / 4, s = 0; s < e; ++s)
                                    l.fullMessageLength.push(0)
                                        ; (n = i.util.createBuffer()), (r = new Array(t.length))
                                for (s = 0; s < t.length; ++s) r[s] = t[s].slice(0)
                                return l
                            },
                        }
                        return (
                            l.start(),
                            (l.update = function (e, t) {
                                'utf8' === t && (e = i.util.encodeUtf8(e))
                                var o = e.length
                                    ; (l.messageLength += o), (o = [(o / 4294967296) >>> 0, o >>> 0])
                                for (var a = l.fullMessageLength.length - 1; a >= 0; --a)
                                    (l.fullMessageLength[a] += o[1]),
                                        (o[1] = o[0] + ((l.fullMessageLength[a] / 4294967296) >>> 0)),
                                        (l.fullMessageLength[a] = l.fullMessageLength[a] >>> 0),
                                        (o[0] = (o[1] / 4294967296) >>> 0)
                                return (
                                    n.putBytes(e),
                                    d(r, s, n),
                                    (n.read > 2048 || 0 === n.length()) && n.compact(),
                                    l
                                )
                            }),
                            (l.digest = function () {
                                var t = i.util.createBuffer()
                                t.putBytes(n.bytes())
                                var a,
                                    u =
                                        (l.fullMessageLength[l.fullMessageLength.length - 1] +
                                            l.messageLengthSize) &
                                        (l.blockLength - 1)
                                t.putBytes(o.substr(0, l.blockLength - u))
                                for (
                                    var c = 8 * l.fullMessageLength[0], p = 0;
                                    p < l.fullMessageLength.length - 1;
                                    ++p
                                )
                                    (c +=
                                        ((a = 8 * l.fullMessageLength[p + 1]) / 4294967296) >>> 0),
                                        t.putInt32(c >>> 0),
                                        (c = a >>> 0)
                                t.putInt32(c)
                                var f = new Array(r.length)
                                for (p = 0; p < r.length; ++p) f[p] = r[p].slice(0)
                                d(f, s, t)
                                var h,
                                    g = i.util.createBuffer()
                                h =
                                    'SHA-512' === e
                                        ? f.length
                                        : 'SHA-384' === e
                                            ? f.length - 2
                                            : f.length - 4
                                for (p = 0; p < h; ++p)
                                    g.putInt32(f[p][0]),
                                        (p === h - 1 && 'SHA-512/224' === e) || g.putInt32(f[p][1])
                                return g
                            }),
                            l
                        )
                    })
            var o = null,
                a = !1,
                u = null,
                c = null
            function d(e, t, r) {
                for (
                    var i,
                    n,
                    s,
                    o,
                    a,
                    c,
                    d,
                    p,
                    f,
                    l,
                    h,
                    g,
                    y,
                    m,
                    v,
                    b,
                    w,
                    E,
                    I,
                    C,
                    S,
                    A,
                    T,
                    N,
                    _,
                    B,
                    k,
                    R,
                    L,
                    M,
                    x,
                    D,
                    P,
                    U = r.length();
                    U >= 128;

                ) {
                    for (k = 0; k < 16; ++k)
                        (t[k][0] = r.getInt32() >>> 0), (t[k][1] = r.getInt32() >>> 0)
                    for (; k < 80; ++k)
                        (i =
                            ((((R = (M = t[k - 2])[0]) >>> 19) | ((L = M[1]) << 13)) ^
                                ((L >>> 29) | (R << 3)) ^
                                (R >>> 6)) >>>
                            0),
                            (n =
                                (((R << 13) | (L >>> 19)) ^
                                    ((L << 3) | (R >>> 29)) ^
                                    ((R << 26) | (L >>> 6))) >>>
                                0),
                            (s =
                                ((((R = (D = t[k - 15])[0]) >>> 1) | ((L = D[1]) << 31)) ^
                                    ((R >>> 8) | (L << 24)) ^
                                    (R >>> 7)) >>>
                                0),
                            (o =
                                (((R << 31) | (L >>> 1)) ^
                                    ((R << 24) | (L >>> 8)) ^
                                    ((R << 25) | (L >>> 7))) >>>
                                0),
                            (x = t[k - 7]),
                            (P = t[k - 16]),
                            (L = n + x[1] + o + P[1]),
                            (t[k][0] =
                                (i + x[0] + s + P[0] + ((L / 4294967296) >>> 0)) >>> 0),
                            (t[k][1] = L >>> 0)
                    for (
                        h = e[0][0],
                        g = e[0][1],
                        y = e[1][0],
                        m = e[1][1],
                        v = e[2][0],
                        b = e[2][1],
                        w = e[3][0],
                        E = e[3][1],
                        I = e[4][0],
                        C = e[4][1],
                        S = e[5][0],
                        A = e[5][1],
                        T = e[6][0],
                        N = e[6][1],
                        _ = e[7][0],
                        B = e[7][1],
                        k = 0;
                        k < 80;
                        ++k
                    )
                        (d =
                            (((I >>> 14) | (C << 18)) ^
                                ((I >>> 18) | (C << 14)) ^
                                ((C >>> 9) | (I << 23))) >>>
                            0),
                            (p = (T ^ (I & (S ^ T))) >>> 0),
                            (a =
                                (((h >>> 28) | (g << 4)) ^
                                    ((g >>> 2) | (h << 30)) ^
                                    ((g >>> 7) | (h << 25))) >>>
                                0),
                            (c =
                                (((h << 4) | (g >>> 28)) ^
                                    ((g << 30) | (h >>> 2)) ^
                                    ((g << 25) | (h >>> 7))) >>>
                                0),
                            (f = ((h & y) | (v & (h ^ y))) >>> 0),
                            (l = ((g & m) | (b & (g ^ m))) >>> 0),
                            (L =
                                B +
                                ((((I << 18) | (C >>> 14)) ^
                                    ((I << 14) | (C >>> 18)) ^
                                    ((C << 23) | (I >>> 9))) >>>
                                    0) +
                                ((N ^ (C & (A ^ N))) >>> 0) +
                                u[k][1] +
                                t[k][1]),
                            (i =
                                (_ + d + p + u[k][0] + t[k][0] + ((L / 4294967296) >>> 0)) >>>
                                0),
                            (n = L >>> 0),
                            (s = (a + f + (((L = c + l) / 4294967296) >>> 0)) >>> 0),
                            (o = L >>> 0),
                            (_ = T),
                            (B = N),
                            (T = S),
                            (N = A),
                            (S = I),
                            (A = C),
                            (I = (w + i + (((L = E + n) / 4294967296) >>> 0)) >>> 0),
                            (C = L >>> 0),
                            (w = v),
                            (E = b),
                            (v = y),
                            (b = m),
                            (y = h),
                            (m = g),
                            (h = (i + s + (((L = n + o) / 4294967296) >>> 0)) >>> 0),
                            (g = L >>> 0)
                            ; (L = e[0][1] + g),
                                (e[0][0] = (e[0][0] + h + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[0][1] = L >>> 0),
                                (L = e[1][1] + m),
                                (e[1][0] = (e[1][0] + y + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[1][1] = L >>> 0),
                                (L = e[2][1] + b),
                                (e[2][0] = (e[2][0] + v + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[2][1] = L >>> 0),
                                (L = e[3][1] + E),
                                (e[3][0] = (e[3][0] + w + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[3][1] = L >>> 0),
                                (L = e[4][1] + C),
                                (e[4][0] = (e[4][0] + I + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[4][1] = L >>> 0),
                                (L = e[5][1] + A),
                                (e[5][0] = (e[5][0] + S + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[5][1] = L >>> 0),
                                (L = e[6][1] + N),
                                (e[6][0] = (e[6][0] + T + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[6][1] = L >>> 0),
                                (L = e[7][1] + B),
                                (e[7][0] = (e[7][0] + _ + ((L / 4294967296) >>> 0)) >>> 0),
                                (e[7][1] = L >>> 0),
                                (U -= 128)
                }
            }
        },
        77173: (e, t, r) => {
            var i = r(3832)
            r(8925), r(36607), r(25063), r(137), r(97116)
            var n = (e.exports = i.ssh = i.ssh || {})
            function s(e, t) {
                var r = t.toString(16)
                r[0] >= '8' && (r = '00' + r)
                var n = i.util.hexToBytes(r)
                e.putInt32(n.length), e.putBytes(n)
            }
            function o(e, t) {
                e.putInt32(t.length), e.putString(t)
            }
            function a() {
                for (
                    var e = i.md.sha1.create(), t = arguments.length, r = 0;
                    r < t;
                    ++r
                )
                    e.update(arguments[r])
                return e.digest()
            }
            ; (n.privateKeyToPutty = function (e, t, r) {
                var n = 'ssh-rsa',
                    u = '' === (t = t || '') ? 'none' : 'aes256-cbc',
                    c = 'PuTTY-User-Key-File-2: ' + n + '\r\n'
                    ; (c += 'Encryption: ' + u + '\r\n'),
                        (c += 'Comment: ' + (r = r || '') + '\r\n')
                var d = i.util.createBuffer()
                o(d, n), s(d, e.e), s(d, e.n)
                var p = i.util.encode64(d.bytes(), 64),
                    f = Math.floor(p.length / 66) + 1
                    ; (c += 'Public-Lines: ' + f + '\r\n'), (c += p)
                var l,
                    h = i.util.createBuffer()
                if ((s(h, e.d), s(h, e.p), s(h, e.q), s(h, e.qInv), t)) {
                    var g = h.length() + 16 - 1
                    g -= g % 16
                    var y = a(h.bytes())
                    y.truncate(y.length() - g + h.length()), h.putBuffer(y)
                    var m = i.util.createBuffer()
                    m.putBuffer(a('\0\0\0\0', t)), m.putBuffer(a('\0\0\0', t))
                    var v = i.aes.createEncryptionCipher(m.truncate(8), 'CBC')
                    v.start(i.util.createBuffer().fillWithByte(0, 16)),
                        v.update(h.copy()),
                        v.finish()
                    var b = v.output
                    b.truncate(16), (l = i.util.encode64(b.bytes(), 64))
                } else l = i.util.encode64(h.bytes(), 64)
                    ; (c +=
                        '\r\nPrivate-Lines: ' + (f = Math.floor(l.length / 66) + 1) + '\r\n'),
                        (c += l)
                var w = a('putty-private-key-file-mac-key', t),
                    E = i.util.createBuffer()
                o(E, n),
                    o(E, u),
                    o(E, r),
                    E.putInt32(d.length()),
                    E.putBuffer(d),
                    E.putInt32(h.length()),
                    E.putBuffer(h)
                var I = i.hmac.create()
                return (
                    I.start('sha1', w),
                    I.update(E.bytes()),
                    (c += '\r\nPrivate-MAC: ' + I.digest().toHex() + '\r\n')
                )
            }),
                (n.publicKeyToOpenSSH = function (e, t) {
                    var r = 'ssh-rsa'
                    t = t || ''
                    var n = i.util.createBuffer()
                    return (
                        o(n, r),
                        s(n, e.e),
                        s(n, e.n),
                        r + ' ' + i.util.encode64(n.bytes()) + ' ' + t
                    )
                }),
                (n.privateKeyToOpenSSH = function (e, t) {
                    return t
                        ? i.pki.encryptRsaPrivateKey(e, t, {
                            legacy: !0,
                            algorithm: 'aes128',
                        })
                        : i.pki.privateKeyToPem(e)
                }),
                (n.getPublicKeyFingerprint = function (e, t) {
                    var r = (t = t || {}).md || i.md.md5.create(),
                        n = i.util.createBuffer()
                    o(n, 'ssh-rsa'),
                        s(n, e.e),
                        s(n, e.n),
                        r.start(),
                        r.update(n.getBytes())
                    var a = r.digest()
                    if ('hex' === t.encoding) {
                        var u = a.toHex()
                        return t.delimiter ? u.match(/.{2}/g).join(t.delimiter) : u
                    }
                    if ('binary' === t.encoding) return a.getBytes()
                    if (t.encoding)
                        throw new Error('Unknown encoding "' + t.encoding + '".')
                    return a
                })
        },
        84311: (e, t, r) => {
            var i = r(3832)
            r(3068), r(36607), r(25063), r(26953), r(4742), r(49563), r(137), r(97116)
            var n = function (e, t, r, n) {
                var s = i.util.createBuffer(),
                    o = e.length >> 1,
                    a = o + (1 & e.length),
                    u = e.substr(0, a),
                    c = e.substr(o, a),
                    d = i.util.createBuffer(),
                    p = i.hmac.create()
                r = t + r
                var f = Math.ceil(n / 16),
                    l = Math.ceil(n / 20)
                p.start('MD5', u)
                var h = i.util.createBuffer()
                d.putBytes(r)
                for (var g = 0; g < f; ++g)
                    p.start(null, null),
                        p.update(d.getBytes()),
                        d.putBuffer(p.digest()),
                        p.start(null, null),
                        p.update(d.bytes() + r),
                        h.putBuffer(p.digest())
                p.start('SHA1', c)
                var y = i.util.createBuffer()
                d.clear(), d.putBytes(r)
                for (g = 0; g < l; ++g)
                    p.start(null, null),
                        p.update(d.getBytes()),
                        d.putBuffer(p.digest()),
                        p.start(null, null),
                        p.update(d.bytes() + r),
                        y.putBuffer(p.digest())
                return s.putBytes(i.util.xorBytes(h.getBytes(), y.getBytes(), n)), s
            },
                s = function (e, t, r) {
                    var n = !1
                    try {
                        var s = e.deflate(t.fragment.getBytes())
                            ; (t.fragment = i.util.createBuffer(s)),
                                (t.length = s.length),
                                (n = !0)
                    } catch (o) { }
                    return n
                },
                o = function (e, t, r) {
                    var n = !1
                    try {
                        var s = e.inflate(t.fragment.getBytes())
                            ; (t.fragment = i.util.createBuffer(s)),
                                (t.length = s.length),
                                (n = !0)
                    } catch (o) { }
                    return n
                },
                a = function (e, t) {
                    var r = 0
                    switch (t) {
                        case 1:
                            r = e.getByte()
                            break
                        case 2:
                            r = e.getInt16()
                            break
                        case 3:
                            r = e.getInt24()
                            break
                        case 4:
                            r = e.getInt32()
                    }
                    return i.util.createBuffer(e.getBytes(r))
                },
                u = function (e, t, r) {
                    e.putInt(r.length(), t << 3), e.putBuffer(r)
                },
                c = {
                    Versions: {
                        TLS_1_0: { major: 3, minor: 1 },
                        TLS_1_1: { major: 3, minor: 2 },
                        TLS_1_2: { major: 3, minor: 3 },
                    },
                }
                ; (c.SupportedVersions = [c.Versions.TLS_1_1, c.Versions.TLS_1_0]),
                    (c.Version = c.SupportedVersions[0]),
                    (c.MaxFragment = 15360),
                    (c.ConnectionEnd = { server: 0, client: 1 }),
                    (c.PRFAlgorithm = { tls_prf_sha256: 0 }),
                    (c.BulkCipherAlgorithm = { none: null, rc4: 0, des3: 1, aes: 2 }),
                    (c.CipherType = { stream: 0, block: 1, aead: 2 }),
                    (c.MACAlgorithm = {
                        none: null,
                        hmac_md5: 0,
                        hmac_sha1: 1,
                        hmac_sha256: 2,
                        hmac_sha384: 3,
                        hmac_sha512: 4,
                    }),
                    (c.CompressionMethod = { none: 0, deflate: 1 }),
                    (c.ContentType = {
                        change_cipher_spec: 20,
                        alert: 21,
                        handshake: 22,
                        application_data: 23,
                        heartbeat: 24,
                    }),
                    (c.HandshakeType = {
                        hello_request: 0,
                        client_hello: 1,
                        server_hello: 2,
                        certificate: 11,
                        server_key_exchange: 12,
                        certificate_request: 13,
                        server_hello_done: 14,
                        certificate_verify: 15,
                        client_key_exchange: 16,
                        finished: 20,
                    }),
                    (c.Alert = {}),
                    (c.Alert.Level = { warning: 1, fatal: 2 }),
                    (c.Alert.Description = {
                        close_notify: 0,
                        unexpected_message: 10,
                        bad_record_mac: 20,
                        decryption_failed: 21,
                        record_overflow: 22,
                        decompression_failure: 30,
                        handshake_failure: 40,
                        bad_certificate: 42,
                        unsupported_certificate: 43,
                        certificate_revoked: 44,
                        certificate_expired: 45,
                        certificate_unknown: 46,
                        illegal_parameter: 47,
                        unknown_ca: 48,
                        access_denied: 49,
                        decode_error: 50,
                        decrypt_error: 51,
                        export_restriction: 60,
                        protocol_version: 70,
                        insufficient_security: 71,
                        internal_error: 80,
                        user_canceled: 90,
                        no_renegotiation: 100,
                    }),
                    (c.HeartbeatMessageType = {
                        heartbeat_request: 1,
                        heartbeat_response: 2,
                    }),
                    (c.CipherSuites = {}),
                    (c.getCipherSuite = function (e) {
                        var t = null
                        for (var r in c.CipherSuites) {
                            var i = c.CipherSuites[r]
                            if (i.id[0] === e.charCodeAt(0) && i.id[1] === e.charCodeAt(1)) {
                                t = i
                                break
                            }
                        }
                        return t
                    }),
                    (c.handleUnexpected = function (e, t) {
                        ; (!e.open && e.entity === c.ConnectionEnd.client) ||
                            e.error(e, {
                                message: 'Unexpected message. Received TLS record out of order.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.unexpected_message,
                                },
                            })
                    }),
                    (c.handleHelloRequest = function (e, t, r) {
                        !e.handshaking &&
                            e.handshakes > 0 &&
                            (c.queue(
                                e,
                                c.createAlert(e, {
                                    level: c.Alert.Level.warning,
                                    description: c.Alert.Description.no_renegotiation,
                                })
                            ),
                                c.flush(e)),
                            e.process()
                    }),
                    (c.parseHelloMessage = function (e, t, r) {
                        var n = null,
                            s = e.entity === c.ConnectionEnd.client
                        if (r < 38)
                            e.error(e, {
                                message: s
                                    ? 'Invalid ServerHello message. Message too short.'
                                    : 'Invalid ClientHello message. Message too short.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.illegal_parameter,
                                },
                            })
                        else {
                            var o = t.fragment,
                                u = o.length()
                            if (
                                ((n = {
                                    version: { major: o.getByte(), minor: o.getByte() },
                                    random: i.util.createBuffer(o.getBytes(32)),
                                    session_id: a(o, 1),
                                    extensions: [],
                                }),
                                    s
                                        ? ((n.cipher_suite = o.getBytes(2)),
                                            (n.compression_method = o.getByte()))
                                        : ((n.cipher_suites = a(o, 2)),
                                            (n.compression_methods = a(o, 1))),
                                    (u = r - (u - o.length())) > 0)
                            ) {
                                for (var d = a(o, 2); d.length() > 0;)
                                    n.extensions.push({
                                        type: [d.getByte(), d.getByte()],
                                        data: a(d, 2),
                                    })
                                if (!s)
                                    for (var p = 0; p < n.extensions.length; ++p) {
                                        var f = n.extensions[p]
                                        if (0 === f.type[0] && 0 === f.type[1])
                                            for (var l = a(f.data, 2); l.length() > 0;) {
                                                if (0 !== l.getByte()) break
                                                e.session.extensions.server_name.serverNameList.push(
                                                    a(l, 2).getBytes()
                                                )
                                            }
                                    }
                            }
                            if (
                                e.session.version &&
                                (n.version.major !== e.session.version.major ||
                                    n.version.minor !== e.session.version.minor)
                            )
                                return e.error(e, {
                                    message:
                                        'TLS version change is disallowed during renegotiation.',
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.protocol_version,
                                    },
                                })
                            if (s) e.session.cipherSuite = c.getCipherSuite(n.cipher_suite)
                            else
                                for (
                                    var h = i.util.createBuffer(n.cipher_suites.bytes());
                                    h.length() > 0 &&
                                    ((e.session.cipherSuite = c.getCipherSuite(h.getBytes(2))),
                                        null === e.session.cipherSuite);

                                );
                            if (null === e.session.cipherSuite)
                                return e.error(e, {
                                    message: 'No cipher suites in common.',
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.handshake_failure,
                                    },
                                    cipherSuite: i.util.bytesToHex(n.cipher_suite),
                                })
                            e.session.compressionMethod = s
                                ? n.compression_method
                                : c.CompressionMethod.none
                        }
                        return n
                    }),
                    (c.createSecurityParameters = function (e, t) {
                        var r = e.entity === c.ConnectionEnd.client,
                            i = t.random.bytes(),
                            n = r ? e.session.sp.client_random : i,
                            s = r ? i : c.createRandom().getBytes()
                        e.session.sp = {
                            entity: e.entity,
                            prf_algorithm: c.PRFAlgorithm.tls_prf_sha256,
                            bulk_cipher_algorithm: null,
                            cipher_type: null,
                            enc_key_length: null,
                            block_length: null,
                            fixed_iv_length: null,
                            record_iv_length: null,
                            mac_algorithm: null,
                            mac_length: null,
                            mac_key_length: null,
                            compression_algorithm: e.session.compressionMethod,
                            pre_master_secret: null,
                            master_secret: null,
                            client_random: n,
                            server_random: s,
                        }
                    }),
                    (c.handleServerHello = function (e, t, r) {
                        var i = c.parseHelloMessage(e, t, r)
                        if (!e.fail) {
                            if (!(i.version.minor <= e.version.minor))
                                return e.error(e, {
                                    message: 'Incompatible TLS version.',
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.protocol_version,
                                    },
                                })
                                    ; (e.version.minor = i.version.minor),
                                        (e.session.version = e.version)
                            var n = i.session_id.bytes()
                            n.length > 0 && n === e.session.id
                                ? ((e.expect = h),
                                    (e.session.resuming = !0),
                                    (e.session.sp.server_random = i.random.bytes()))
                                : ((e.expect = d),
                                    (e.session.resuming = !1),
                                    c.createSecurityParameters(e, i)),
                                (e.session.id = n),
                                e.process()
                        }
                    }),
                    (c.handleClientHello = function (e, t, r) {
                        var n = c.parseHelloMessage(e, t, r)
                        if (!e.fail) {
                            var s = n.session_id.bytes(),
                                o = null
                            if (
                                (e.sessionCache &&
                                    (null === (o = e.sessionCache.getSession(s))
                                        ? (s = '')
                                        : (o.version.major !== n.version.major ||
                                            o.version.minor > n.version.minor) &&
                                        ((o = null), (s = ''))),
                                    0 === s.length && (s = i.random.getBytes(32)),
                                    (e.session.id = s),
                                    (e.session.clientHelloVersion = n.version),
                                    (e.session.sp = {}),
                                    o)
                            )
                                (e.version = e.session.version = o.version), (e.session.sp = o.sp)
                            else {
                                for (
                                    var a, u = 1;
                                    u < c.SupportedVersions.length &&
                                    !((a = c.SupportedVersions[u]).minor <= n.version.minor);
                                    ++u
                                );
                                ; (e.version = { major: a.major, minor: a.minor }),
                                    (e.session.version = e.version)
                            }
                            null !== o
                                ? ((e.expect = E),
                                    (e.session.resuming = !0),
                                    (e.session.sp.client_random = n.random.bytes()))
                                : ((e.expect = !1 !== e.verifyClient ? v : b),
                                    (e.session.resuming = !1),
                                    c.createSecurityParameters(e, n)),
                                (e.open = !0),
                                c.queue(
                                    e,
                                    c.createRecord(e, {
                                        type: c.ContentType.handshake,
                                        data: c.createServerHello(e),
                                    })
                                ),
                                e.session.resuming
                                    ? (c.queue(
                                        e,
                                        c.createRecord(e, {
                                            type: c.ContentType.change_cipher_spec,
                                            data: c.createChangeCipherSpec(),
                                        })
                                    ),
                                        (e.state.pending = c.createConnectionState(e)),
                                        (e.state.current.write = e.state.pending.write),
                                        c.queue(
                                            e,
                                            c.createRecord(e, {
                                                type: c.ContentType.handshake,
                                                data: c.createFinished(e),
                                            })
                                        ))
                                    : (c.queue(
                                        e,
                                        c.createRecord(e, {
                                            type: c.ContentType.handshake,
                                            data: c.createCertificate(e),
                                        })
                                    ),
                                        e.fail ||
                                        (c.queue(
                                            e,
                                            c.createRecord(e, {
                                                type: c.ContentType.handshake,
                                                data: c.createServerKeyExchange(e),
                                            })
                                        ),
                                            !1 !== e.verifyClient &&
                                            c.queue(
                                                e,
                                                c.createRecord(e, {
                                                    type: c.ContentType.handshake,
                                                    data: c.createCertificateRequest(e),
                                                })
                                            ),
                                            c.queue(
                                                e,
                                                c.createRecord(e, {
                                                    type: c.ContentType.handshake,
                                                    data: c.createServerHelloDone(e),
                                                })
                                            ))),
                                c.flush(e),
                                e.process()
                        }
                    }),
                    (c.handleCertificate = function (e, t, r) {
                        if (r < 3)
                            return e.error(e, {
                                message: 'Invalid Certificate message. Message too short.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.illegal_parameter,
                                },
                            })
                        var n,
                            s,
                            o = t.fragment,
                            u = { certificate_list: a(o, 3) },
                            d = []
                        try {
                            for (; u.certificate_list.length() > 0;)
                                (n = a(u.certificate_list, 3)),
                                    (s = i.asn1.fromDer(n)),
                                    (n = i.pki.certificateFromAsn1(s, !0)),
                                    d.push(n)
                        } catch (l) {
                            return e.error(e, {
                                message: 'Could not parse certificate list.',
                                cause: l,
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.bad_certificate,
                                },
                            })
                        }
                        var f = e.entity === c.ConnectionEnd.client
                            ; (!f && !0 !== e.verifyClient) || 0 !== d.length
                                ? 0 === d.length
                                    ? (e.expect = f ? p : b)
                                    : (f
                                        ? (e.session.serverCertificate = d[0])
                                        : (e.session.clientCertificate = d[0]),
                                        c.verifyCertificateChain(e, d) && (e.expect = f ? p : b))
                                : e.error(e, {
                                    message: f
                                        ? 'No server certificate provided.'
                                        : 'No client certificate provided.',
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.illegal_parameter,
                                    },
                                }),
                                e.process()
                    }),
                    (c.handleServerKeyExchange = function (e, t, r) {
                        if (r > 0)
                            return e.error(e, {
                                message: 'Invalid key parameters. Only RSA is supported.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.unsupported_certificate,
                                },
                            })
                                ; (e.expect = f), e.process()
                    }),
                    (c.handleClientKeyExchange = function (e, t, r) {
                        if (r < 48)
                            return e.error(e, {
                                message: 'Invalid key parameters. Only RSA is supported.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.unsupported_certificate,
                                },
                            })
                        var n = t.fragment,
                            s = { enc_pre_master_secret: a(n, 2).getBytes() },
                            o = null
                        if (e.getPrivateKey)
                            try {
                                ; (o = e.getPrivateKey(e, e.session.serverCertificate)),
                                    (o = i.pki.privateKeyFromPem(o))
                            } catch (p) {
                                e.error(e, {
                                    message: 'Could not get private key.',
                                    cause: p,
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.internal_error,
                                    },
                                })
                            }
                        if (null === o)
                            return e.error(e, {
                                message: 'No private key set.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.internal_error,
                                },
                            })
                        try {
                            var u = e.session.sp
                            u.pre_master_secret = o.decrypt(s.enc_pre_master_secret)
                            var d = e.session.clientHelloVersion
                            if (
                                d.major !== u.pre_master_secret.charCodeAt(0) ||
                                d.minor !== u.pre_master_secret.charCodeAt(1)
                            )
                                throw new Error('TLS version rollback attack detected.')
                        } catch (p) {
                            u.pre_master_secret = i.random.getBytes(48)
                        }
                        ; (e.expect = E),
                            null !== e.session.clientCertificate && (e.expect = w),
                            e.process()
                    }),
                    (c.handleCertificateRequest = function (e, t, r) {
                        if (r < 3)
                            return e.error(e, {
                                message: 'Invalid CertificateRequest. Message too short.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.illegal_parameter,
                                },
                            })
                        var i = t.fragment,
                            n = { certificate_types: a(i, 1), certificate_authorities: a(i, 2) }
                            ; (e.session.certificateRequest = n), (e.expect = l), e.process()
                    }),
                    (c.handleCertificateVerify = function (e, t, r) {
                        if (r < 2)
                            return e.error(e, {
                                message: 'Invalid CertificateVerify. Message too short.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.illegal_parameter,
                                },
                            })
                        var n = t.fragment
                        n.read -= 4
                        var s = n.bytes()
                        n.read += 4
                        var o = { signature: a(n, 2).getBytes() },
                            u = i.util.createBuffer()
                        u.putBuffer(e.session.md5.digest()),
                            u.putBuffer(e.session.sha1.digest()),
                            (u = u.getBytes())
                        try {
                            if (
                                !e.session.clientCertificate.publicKey.verify(
                                    u,
                                    o.signature,
                                    'NONE'
                                )
                            )
                                throw new Error('CertificateVerify signature does not match.')
                            e.session.md5.update(s), e.session.sha1.update(s)
                        } catch (d) {
                            return e.error(e, {
                                message: 'Bad signature in CertificateVerify.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.handshake_failure,
                                },
                            })
                        }
                        ; (e.expect = E), e.process()
                    }),
                    (c.handleServerHelloDone = function (e, t, r) {
                        if (r > 0)
                            return e.error(e, {
                                message: 'Invalid ServerHelloDone message. Invalid length.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.record_overflow,
                                },
                            })
                        if (null === e.serverCertificate) {
                            var n = {
                                message: 'No server certificate provided. Not enough security.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.insufficient_security,
                                },
                            },
                                s = e.verify(e, n.alert.description, 0, [])
                            if (!0 !== s)
                                return (
                                    (s || 0 === s) &&
                                    ('object' != typeof s || i.util.isArray(s)
                                        ? 'number' == typeof s && (n.alert.description = s)
                                        : (s.message && (n.message = s.message),
                                            s.alert && (n.alert.description = s.alert))),
                                    e.error(e, n)
                                )
                        }
                        null !== e.session.certificateRequest &&
                            ((t = c.createRecord(e, {
                                type: c.ContentType.handshake,
                                data: c.createCertificate(e),
                            })),
                                c.queue(e, t)),
                            (t = c.createRecord(e, {
                                type: c.ContentType.handshake,
                                data: c.createClientKeyExchange(e),
                            })),
                            c.queue(e, t),
                            (e.expect = m)
                        var o = function (e, t) {
                            null !== e.session.certificateRequest &&
                                null !== e.session.clientCertificate &&
                                c.queue(
                                    e,
                                    c.createRecord(e, {
                                        type: c.ContentType.handshake,
                                        data: c.createCertificateVerify(e, t),
                                    })
                                ),
                                c.queue(
                                    e,
                                    c.createRecord(e, {
                                        type: c.ContentType.change_cipher_spec,
                                        data: c.createChangeCipherSpec(),
                                    })
                                ),
                                (e.state.pending = c.createConnectionState(e)),
                                (e.state.current.write = e.state.pending.write),
                                c.queue(
                                    e,
                                    c.createRecord(e, {
                                        type: c.ContentType.handshake,
                                        data: c.createFinished(e),
                                    })
                                ),
                                (e.expect = h),
                                c.flush(e),
                                e.process()
                        }
                        if (
                            null === e.session.certificateRequest ||
                            null === e.session.clientCertificate
                        )
                            return o(e, null)
                        c.getClientSignature(e, o)
                    }),
                    (c.handleChangeCipherSpec = function (e, t) {
                        if (1 !== t.fragment.getByte())
                            return e.error(e, {
                                message: 'Invalid ChangeCipherSpec message received.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.illegal_parameter,
                                },
                            })
                        var r = e.entity === c.ConnectionEnd.client
                            ; ((e.session.resuming && r) || (!e.session.resuming && !r)) &&
                                (e.state.pending = c.createConnectionState(e)),
                                (e.state.current.read = e.state.pending.read),
                                ((!e.session.resuming && r) || (e.session.resuming && !r)) &&
                                (e.state.pending = null),
                                (e.expect = r ? g : I),
                                e.process()
                    }),
                    (c.handleFinished = function (e, t, r) {
                        var s = t.fragment
                        s.read -= 4
                        var o = s.bytes()
                        s.read += 4
                        var a = t.fragment.getBytes()
                            ; (s = i.util.createBuffer()).putBuffer(e.session.md5.digest()),
                                s.putBuffer(e.session.sha1.digest())
                        var u = e.entity === c.ConnectionEnd.client,
                            d = u ? 'server finished' : 'client finished',
                            p = e.session.sp
                        if ((s = n(p.master_secret, d, s.getBytes(), 12)).getBytes() !== a)
                            return e.error(e, {
                                message: 'Invalid verify_data in Finished message.',
                                send: !0,
                                alert: {
                                    level: c.Alert.Level.fatal,
                                    description: c.Alert.Description.decrypt_error,
                                },
                            })
                        e.session.md5.update(o),
                            e.session.sha1.update(o),
                            ((e.session.resuming && u) || (!e.session.resuming && !u)) &&
                            (c.queue(
                                e,
                                c.createRecord(e, {
                                    type: c.ContentType.change_cipher_spec,
                                    data: c.createChangeCipherSpec(),
                                })
                            ),
                                (e.state.current.write = e.state.pending.write),
                                (e.state.pending = null),
                                c.queue(
                                    e,
                                    c.createRecord(e, {
                                        type: c.ContentType.handshake,
                                        data: c.createFinished(e),
                                    })
                                )),
                            (e.expect = u ? y : C),
                            (e.handshaking = !1),
                            ++e.handshakes,
                            (e.peerCertificate = u
                                ? e.session.serverCertificate
                                : e.session.clientCertificate),
                            c.flush(e),
                            (e.isConnected = !0),
                            e.connected(e),
                            e.process()
                    }),
                    (c.handleAlert = function (e, t) {
                        var r,
                            i = t.fragment,
                            n = { level: i.getByte(), description: i.getByte() }
                        switch (n.description) {
                            case c.Alert.Description.close_notify:
                                r = 'Connection closed.'
                                break
                            case c.Alert.Description.unexpected_message:
                                r = 'Unexpected message.'
                                break
                            case c.Alert.Description.bad_record_mac:
                                r = 'Bad record MAC.'
                                break
                            case c.Alert.Description.decryption_failed:
                                r = 'Decryption failed.'
                                break
                            case c.Alert.Description.record_overflow:
                                r = 'Record overflow.'
                                break
                            case c.Alert.Description.decompression_failure:
                                r = 'Decompression failed.'
                                break
                            case c.Alert.Description.handshake_failure:
                                r = 'Handshake failure.'
                                break
                            case c.Alert.Description.bad_certificate:
                                r = 'Bad certificate.'
                                break
                            case c.Alert.Description.unsupported_certificate:
                                r = 'Unsupported certificate.'
                                break
                            case c.Alert.Description.certificate_revoked:
                                r = 'Certificate revoked.'
                                break
                            case c.Alert.Description.certificate_expired:
                                r = 'Certificate expired.'
                                break
                            case c.Alert.Description.certificate_unknown:
                                r = 'Certificate unknown.'
                                break
                            case c.Alert.Description.illegal_parameter:
                                r = 'Illegal parameter.'
                                break
                            case c.Alert.Description.unknown_ca:
                                r = 'Unknown certificate authority.'
                                break
                            case c.Alert.Description.access_denied:
                                r = 'Access denied.'
                                break
                            case c.Alert.Description.decode_error:
                                r = 'Decode error.'
                                break
                            case c.Alert.Description.decrypt_error:
                                r = 'Decrypt error.'
                                break
                            case c.Alert.Description.export_restriction:
                                r = 'Export restriction.'
                                break
                            case c.Alert.Description.protocol_version:
                                r = 'Unsupported protocol version.'
                                break
                            case c.Alert.Description.insufficient_security:
                                r = 'Insufficient security.'
                                break
                            case c.Alert.Description.internal_error:
                                r = 'Internal error.'
                                break
                            case c.Alert.Description.user_canceled:
                                r = 'User canceled.'
                                break
                            case c.Alert.Description.no_renegotiation:
                                r = 'Renegotiation not supported.'
                                break
                            default:
                                r = 'Unknown error.'
                        }
                        if (n.description === c.Alert.Description.close_notify)
                            return e.close()
                        e.error(e, {
                            message: r,
                            send: !1,
                            origin: e.entity === c.ConnectionEnd.client ? 'server' : 'client',
                            alert: n,
                        }),
                            e.process()
                    }),
                    (c.handleHandshake = function (e, t) {
                        var r = t.fragment,
                            n = r.getByte(),
                            s = r.getInt24()
                        if (s > r.length())
                            return (
                                (e.fragmented = t),
                                (t.fragment = i.util.createBuffer()),
                                (r.read -= 4),
                                e.process()
                            )
                                ; (e.fragmented = null), (r.read -= 4)
                        var o = r.bytes(s + 4)
                            ; (r.read += 4),
                                n in O[e.entity][e.expect]
                                    ? (e.entity !== c.ConnectionEnd.server ||
                                        e.open ||
                                        e.fail ||
                                        ((e.handshaking = !0),
                                            (e.session = {
                                                version: null,
                                                extensions: { server_name: { serverNameList: [] } },
                                                cipherSuite: null,
                                                compressionMethod: null,
                                                serverCertificate: null,
                                                clientCertificate: null,
                                                md5: i.md.md5.create(),
                                                sha1: i.md.sha1.create(),
                                            })),
                                        n !== c.HandshakeType.hello_request &&
                                        n !== c.HandshakeType.certificate_verify &&
                                        n !== c.HandshakeType.finished &&
                                        (e.session.md5.update(o), e.session.sha1.update(o)),
                                        O[e.entity][e.expect][n](e, t, s))
                                    : c.handleUnexpected(e, t)
                    }),
                    (c.handleApplicationData = function (e, t) {
                        e.data.putBuffer(t.fragment), e.dataReady(e), e.process()
                    }),
                    (c.handleHeartbeat = function (e, t) {
                        var r = t.fragment,
                            n = r.getByte(),
                            s = r.getInt16(),
                            o = r.getBytes(s)
                        if (n === c.HeartbeatMessageType.heartbeat_request) {
                            if (e.handshaking || s > o.length) return e.process()
                            c.queue(
                                e,
                                c.createRecord(e, {
                                    type: c.ContentType.heartbeat,
                                    data: c.createHeartbeat(
                                        c.HeartbeatMessageType.heartbeat_response,
                                        o
                                    ),
                                })
                            ),
                                c.flush(e)
                        } else if (n === c.HeartbeatMessageType.heartbeat_response) {
                            if (o !== e.expectedHeartbeatPayload) return e.process()
                            e.heartbeatReceived &&
                                e.heartbeatReceived(e, i.util.createBuffer(o))
                        }
                        e.process()
                    })
            var d = 1,
                p = 2,
                f = 3,
                l = 4,
                h = 5,
                g = 6,
                y = 7,
                m = 8,
                v = 1,
                b = 2,
                w = 3,
                E = 4,
                I = 5,
                C = 6,
                S = c.handleUnexpected,
                A = c.handleChangeCipherSpec,
                T = c.handleAlert,
                N = c.handleHandshake,
                _ = c.handleApplicationData,
                B = c.handleHeartbeat,
                k = []
                ; (k[c.ConnectionEnd.client] = [
                    [S, T, N, S, B],
                    [S, T, N, S, B],
                    [S, T, N, S, B],
                    [S, T, N, S, B],
                    [S, T, N, S, B],
                    [A, T, S, S, B],
                    [S, T, N, S, B],
                    [S, T, N, _, B],
                    [S, T, N, S, B],
                ]),
                    (k[c.ConnectionEnd.server] = [
                        [S, T, N, S, B],
                        [S, T, N, S, B],
                        [S, T, N, S, B],
                        [S, T, N, S, B],
                        [A, T, S, S, B],
                        [S, T, N, S, B],
                        [S, T, N, _, B],
                        [S, T, N, S, B],
                    ])
            var R = c.handleHelloRequest,
                L = c.handleServerHello,
                M = c.handleCertificate,
                x = c.handleServerKeyExchange,
                D = c.handleCertificateRequest,
                P = c.handleServerHelloDone,
                U = c.handleFinished,
                O = []
            O[c.ConnectionEnd.client] = [
                [S, S, L, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, M, x, D, P, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, x, D, P, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, D, P, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, S, P, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, U],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                [R, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
            ]
            var V = c.handleClientHello,
                K = c.handleClientKeyExchange,
                z = c.handleCertificateVerify
                ; (O[c.ConnectionEnd.server] = [
                    [S, V, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, M, S, S, S, S, S, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, K, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, z, S, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, U],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                    [S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S],
                ]),
                    (c.generateKeys = function (e, t) {
                        var r = n,
                            i = t.client_random + t.server_random
                        e.session.resuming ||
                            ((t.master_secret = r(
                                t.pre_master_secret,
                                'master secret',
                                i,
                                48
                            ).bytes()),
                                (t.pre_master_secret = null)),
                            (i = t.server_random + t.client_random)
                        var s = 2 * t.mac_key_length + 2 * t.enc_key_length,
                            o =
                                e.version.major === c.Versions.TLS_1_0.major &&
                                e.version.minor === c.Versions.TLS_1_0.minor
                        o && (s += 2 * t.fixed_iv_length)
                        var a = r(t.master_secret, 'key expansion', i, s),
                            u = {
                                client_write_MAC_key: a.getBytes(t.mac_key_length),
                                server_write_MAC_key: a.getBytes(t.mac_key_length),
                                client_write_key: a.getBytes(t.enc_key_length),
                                server_write_key: a.getBytes(t.enc_key_length),
                            }
                        return (
                            o &&
                            ((u.client_write_IV = a.getBytes(t.fixed_iv_length)),
                                (u.server_write_IV = a.getBytes(t.fixed_iv_length))),
                            u
                        )
                    }),
                    (c.createConnectionState = function (e) {
                        var t = e.entity === c.ConnectionEnd.client,
                            r = function () {
                                var e = {
                                    sequenceNumber: [0, 0],
                                    macKey: null,
                                    macLength: 0,
                                    macFunction: null,
                                    cipherState: null,
                                    cipherFunction: function (e) {
                                        return !0
                                    },
                                    compressionState: null,
                                    compressFunction: function (e) {
                                        return !0
                                    },
                                    updateSequenceNumber: function () {
                                        4294967295 === e.sequenceNumber[1]
                                            ? ((e.sequenceNumber[1] = 0), ++e.sequenceNumber[0])
                                            : ++e.sequenceNumber[1]
                                    },
                                }
                                return e
                            },
                            i = { read: r(), write: r() }
                        if (
                            ((i.read.update = function (e, t) {
                                return (
                                    i.read.cipherFunction(t, i.read)
                                        ? i.read.compressFunction(e, t, i.read) ||
                                        e.error(e, {
                                            message: 'Could not decompress record.',
                                            send: !0,
                                            alert: {
                                                level: c.Alert.Level.fatal,
                                                description: c.Alert.Description.decompression_failure,
                                            },
                                        })
                                        : e.error(e, {
                                            message: 'Could not decrypt record or bad MAC.',
                                            send: !0,
                                            alert: {
                                                level: c.Alert.Level.fatal,
                                                description: c.Alert.Description.bad_record_mac,
                                            },
                                        }),
                                    !e.fail
                                )
                            }),
                                (i.write.update = function (e, t) {
                                    return (
                                        i.write.compressFunction(e, t, i.write)
                                            ? i.write.cipherFunction(t, i.write) ||
                                            e.error(e, {
                                                message: 'Could not encrypt record.',
                                                send: !1,
                                                alert: {
                                                    level: c.Alert.Level.fatal,
                                                    description: c.Alert.Description.internal_error,
                                                },
                                            })
                                            : e.error(e, {
                                                message: 'Could not compress record.',
                                                send: !1,
                                                alert: {
                                                    level: c.Alert.Level.fatal,
                                                    description: c.Alert.Description.internal_error,
                                                },
                                            }),
                                        !e.fail
                                    )
                                }),
                                e.session)
                        ) {
                            var n = e.session.sp
                            switch (
                            (e.session.cipherSuite.initSecurityParameters(n),
                                (n.keys = c.generateKeys(e, n)),
                                (i.read.macKey = t
                                    ? n.keys.server_write_MAC_key
                                    : n.keys.client_write_MAC_key),
                                (i.write.macKey = t
                                    ? n.keys.client_write_MAC_key
                                    : n.keys.server_write_MAC_key),
                                e.session.cipherSuite.initConnectionState(i, e, n),
                                n.compression_algorithm)
                            ) {
                                case c.CompressionMethod.none:
                                    break
                                case c.CompressionMethod.deflate:
                                    ; (i.read.compressFunction = o), (i.write.compressFunction = s)
                                    break
                                default:
                                    throw new Error('Unsupported compression algorithm.')
                            }
                        }
                        return i
                    }),
                    (c.createRandom = function () {
                        var e = new Date(),
                            t = +e + 6e4 * e.getTimezoneOffset(),
                            r = i.util.createBuffer()
                        return r.putInt32(t), r.putBytes(i.random.getBytes(28)), r
                    }),
                    (c.createRecord = function (e, t) {
                        return t.data
                            ? {
                                type: t.type,
                                version: { major: e.version.major, minor: e.version.minor },
                                length: t.data.length(),
                                fragment: t.data,
                            }
                            : null
                    }),
                    (c.createAlert = function (e, t) {
                        var r = i.util.createBuffer()
                        return (
                            r.putByte(t.level),
                            r.putByte(t.description),
                            c.createRecord(e, { type: c.ContentType.alert, data: r })
                        )
                    }),
                    (c.createClientHello = function (e) {
                        e.session.clientHelloVersion = {
                            major: e.version.major,
                            minor: e.version.minor,
                        }
                        for (
                            var t = i.util.createBuffer(), r = 0;
                            r < e.cipherSuites.length;
                            ++r
                        ) {
                            var n = e.cipherSuites[r]
                            t.putByte(n.id[0]), t.putByte(n.id[1])
                        }
                        var s = t.length(),
                            o = i.util.createBuffer()
                        o.putByte(c.CompressionMethod.none)
                        var a = o.length(),
                            d = i.util.createBuffer()
                        if (e.virtualHost) {
                            var p = i.util.createBuffer()
                            p.putByte(0), p.putByte(0)
                            var f = i.util.createBuffer()
                            f.putByte(0), u(f, 2, i.util.createBuffer(e.virtualHost))
                            var l = i.util.createBuffer()
                            u(l, 2, f), u(p, 2, l), d.putBuffer(p)
                        }
                        var h = d.length()
                        h > 0 && (h += 2)
                        var g = e.session.id,
                            y = g.length + 1 + 2 + 4 + 28 + 2 + s + 1 + a + h,
                            m = i.util.createBuffer()
                        return (
                            m.putByte(c.HandshakeType.client_hello),
                            m.putInt24(y),
                            m.putByte(e.version.major),
                            m.putByte(e.version.minor),
                            m.putBytes(e.session.sp.client_random),
                            u(m, 1, i.util.createBuffer(g)),
                            u(m, 2, t),
                            u(m, 1, o),
                            h > 0 && u(m, 2, d),
                            m
                        )
                    }),
                    (c.createServerHello = function (e) {
                        var t = e.session.id,
                            r = t.length + 1 + 2 + 4 + 28 + 2 + 1,
                            n = i.util.createBuffer()
                        return (
                            n.putByte(c.HandshakeType.server_hello),
                            n.putInt24(r),
                            n.putByte(e.version.major),
                            n.putByte(e.version.minor),
                            n.putBytes(e.session.sp.server_random),
                            u(n, 1, i.util.createBuffer(t)),
                            n.putByte(e.session.cipherSuite.id[0]),
                            n.putByte(e.session.cipherSuite.id[1]),
                            n.putByte(e.session.compressionMethod),
                            n
                        )
                    }),
                    (c.createCertificate = function (e) {
                        var t,
                            r = e.entity === c.ConnectionEnd.client,
                            n = null
                        e.getCertificate &&
                            ((t = r
                                ? e.session.certificateRequest
                                : e.session.extensions.server_name.serverNameList),
                                (n = e.getCertificate(e, t)))
                        var s = i.util.createBuffer()
                        if (null !== n)
                            try {
                                i.util.isArray(n) || (n = [n])
                                for (var o = null, a = 0; a < n.length; ++a) {
                                    var d = i.pem.decode(n[a])[0]
                                    if (
                                        'CERTIFICATE' !== d.type &&
                                        'X509 CERTIFICATE' !== d.type &&
                                        'TRUSTED CERTIFICATE' !== d.type
                                    ) {
                                        var p = new Error(
                                            'Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".'
                                        )
                                        throw ((p.headerType = d.type), p)
                                    }
                                    if (d.procType && 'ENCRYPTED' === d.procType.type)
                                        throw new Error(
                                            'Could not convert certificate from PEM; PEM is encrypted.'
                                        )
                                    var f = i.util.createBuffer(d.body)
                                    null === o && (o = i.asn1.fromDer(f.bytes(), !1))
                                    var l = i.util.createBuffer()
                                    u(l, 3, f), s.putBuffer(l)
                                }
                                ; (n = i.pki.certificateFromAsn1(o)),
                                    r
                                        ? (e.session.clientCertificate = n)
                                        : (e.session.serverCertificate = n)
                            } catch (y) {
                                return e.error(e, {
                                    message: 'Could not send certificate list.',
                                    cause: y,
                                    send: !0,
                                    alert: {
                                        level: c.Alert.Level.fatal,
                                        description: c.Alert.Description.bad_certificate,
                                    },
                                })
                            }
                        var h = 3 + s.length(),
                            g = i.util.createBuffer()
                        return (
                            g.putByte(c.HandshakeType.certificate), g.putInt24(h), u(g, 3, s), g
                        )
                    }),
                    (c.createClientKeyExchange = function (e) {
                        var t = i.util.createBuffer()
                        t.putByte(e.session.clientHelloVersion.major),
                            t.putByte(e.session.clientHelloVersion.minor),
                            t.putBytes(i.random.getBytes(46))
                        var r = e.session.sp
                        r.pre_master_secret = t.getBytes()
                        var n =
                            (t = e.session.serverCertificate.publicKey.encrypt(
                                r.pre_master_secret
                            )).length + 2,
                            s = i.util.createBuffer()
                        return (
                            s.putByte(c.HandshakeType.client_key_exchange),
                            s.putInt24(n),
                            s.putInt16(t.length),
                            s.putBytes(t),
                            s
                        )
                    }),
                    (c.createServerKeyExchange = function (e) {
                        var t = i.util.createBuffer()
                        return t
                    }),
                    (c.getClientSignature = function (e, t) {
                        var r = i.util.createBuffer()
                        r.putBuffer(e.session.md5.digest()),
                            r.putBuffer(e.session.sha1.digest()),
                            (r = r.getBytes()),
                            (e.getSignature =
                                e.getSignature ||
                                function (e, t, r) {
                                    var n = null
                                    if (e.getPrivateKey)
                                        try {
                                            ; (n = e.getPrivateKey(e, e.session.clientCertificate)),
                                                (n = i.pki.privateKeyFromPem(n))
                                        } catch (s) {
                                            e.error(e, {
                                                message: 'Could not get private key.',
                                                cause: s,
                                                send: !0,
                                                alert: {
                                                    level: c.Alert.Level.fatal,
                                                    description: c.Alert.Description.internal_error,
                                                },
                                            })
                                        }
                                    null === n
                                        ? e.error(e, {
                                            message: 'No private key set.',
                                            send: !0,
                                            alert: {
                                                level: c.Alert.Level.fatal,
                                                description: c.Alert.Description.internal_error,
                                            },
                                        })
                                        : (t = n.sign(t, null)),
                                        r(e, t)
                                }),
                            e.getSignature(e, r, t)
                    }),
                    (c.createCertificateVerify = function (e, t) {
                        var r = t.length + 2,
                            n = i.util.createBuffer()
                        return (
                            n.putByte(c.HandshakeType.certificate_verify),
                            n.putInt24(r),
                            n.putInt16(t.length),
                            n.putBytes(t),
                            n
                        )
                    }),
                    (c.createCertificateRequest = function (e) {
                        var t = i.util.createBuffer()
                        t.putByte(1)
                        var r = i.util.createBuffer()
                        for (var n in e.caStore.certs) {
                            var s = e.caStore.certs[n],
                                o = i.pki.distinguishedNameToAsn1(s.subject),
                                a = i.asn1.toDer(o)
                            r.putInt16(a.length()), r.putBuffer(a)
                        }
                        var d = 1 + t.length() + 2 + r.length(),
                            p = i.util.createBuffer()
                        return (
                            p.putByte(c.HandshakeType.certificate_request),
                            p.putInt24(d),
                            u(p, 1, t),
                            u(p, 2, r),
                            p
                        )
                    }),
                    (c.createServerHelloDone = function (e) {
                        var t = i.util.createBuffer()
                        return t.putByte(c.HandshakeType.server_hello_done), t.putInt24(0), t
                    }),
                    (c.createChangeCipherSpec = function () {
                        var e = i.util.createBuffer()
                        return e.putByte(1), e
                    }),
                    (c.createFinished = function (e) {
                        var t = i.util.createBuffer()
                        t.putBuffer(e.session.md5.digest()),
                            t.putBuffer(e.session.sha1.digest())
                        var r = e.entity === c.ConnectionEnd.client,
                            s = e.session.sp,
                            o = r ? 'client finished' : 'server finished'
                        t = n(s.master_secret, o, t.getBytes(), 12)
                        var a = i.util.createBuffer()
                        return (
                            a.putByte(c.HandshakeType.finished),
                            a.putInt24(t.length()),
                            a.putBuffer(t),
                            a
                        )
                    }),
                    (c.createHeartbeat = function (e, t, r) {
                        void 0 === r && (r = t.length)
                        var n = i.util.createBuffer()
                        n.putByte(e), n.putInt16(r), n.putBytes(t)
                        var s = n.length(),
                            o = Math.max(16, s - r - 3)
                        return n.putBytes(i.random.getBytes(o)), n
                    }),
                    (c.queue = function (e, t) {
                        if (
                            t &&
                            (0 !== t.fragment.length() ||
                                (t.type !== c.ContentType.handshake &&
                                    t.type !== c.ContentType.alert &&
                                    t.type !== c.ContentType.change_cipher_spec))
                        ) {
                            if (t.type === c.ContentType.handshake) {
                                var r = t.fragment.bytes()
                                e.session.md5.update(r), e.session.sha1.update(r), (r = null)
                            }
                            var n
                            if (t.fragment.length() <= c.MaxFragment) n = [t]
                            else {
                                n = []
                                for (var s = t.fragment.bytes(); s.length > c.MaxFragment;)
                                    n.push(
                                        c.createRecord(e, {
                                            type: t.type,
                                            data: i.util.createBuffer(s.slice(0, c.MaxFragment)),
                                        })
                                    ),
                                        (s = s.slice(c.MaxFragment))
                                s.length > 0 &&
                                    n.push(
                                        c.createRecord(e, {
                                            type: t.type,
                                            data: i.util.createBuffer(s),
                                        })
                                    )
                            }
                            for (var o = 0; o < n.length && !e.fail; ++o) {
                                var a = n[o]
                                e.state.current.write.update(e, a) && e.records.push(a)
                            }
                        }
                    }),
                    (c.flush = function (e) {
                        for (var t = 0; t < e.records.length; ++t) {
                            var r = e.records[t]
                            e.tlsData.putByte(r.type),
                                e.tlsData.putByte(r.version.major),
                                e.tlsData.putByte(r.version.minor),
                                e.tlsData.putInt16(r.fragment.length()),
                                e.tlsData.putBuffer(e.records[t].fragment)
                        }
                        return (e.records = []), e.tlsDataReady(e)
                    })
            var F = function (e) {
                switch (e) {
                    case !0:
                        return !0
                    case i.pki.certificateError.bad_certificate:
                        return c.Alert.Description.bad_certificate
                    case i.pki.certificateError.unsupported_certificate:
                        return c.Alert.Description.unsupported_certificate
                    case i.pki.certificateError.certificate_revoked:
                        return c.Alert.Description.certificate_revoked
                    case i.pki.certificateError.certificate_expired:
                        return c.Alert.Description.certificate_expired
                    case i.pki.certificateError.certificate_unknown:
                        return c.Alert.Description.certificate_unknown
                    case i.pki.certificateError.unknown_ca:
                        return c.Alert.Description.unknown_ca
                    default:
                        return c.Alert.Description.bad_certificate
                }
            }
            for (var q in ((c.verifyCertificateChain = function (e, t) {
                try {
                    var r = {}
                    for (var n in e.verifyOptions) r[n] = e.verifyOptions[n]
                        ; (r.verify = function (t, r, n) {
                            F(t)
                            var s = e.verify(e, t, r, n)
                            if (!0 !== s) {
                                if ('object' == typeof s && !i.util.isArray(s)) {
                                    var o = new Error('The application rejected the certificate.')
                                    throw (
                                        ((o.send = !0),
                                            (o.alert = {
                                                level: c.Alert.Level.fatal,
                                                description: c.Alert.Description.bad_certificate,
                                            }),
                                            s.message && (o.message = s.message),
                                            s.alert && (o.alert.description = s.alert),
                                            o)
                                    )
                                }
                                s !== t &&
                                    (s = (function (e) {
                                        switch (e) {
                                            case !0:
                                                return !0
                                            case c.Alert.Description.bad_certificate:
                                                return i.pki.certificateError.bad_certificate
                                            case c.Alert.Description.unsupported_certificate:
                                                return i.pki.certificateError.unsupported_certificate
                                            case c.Alert.Description.certificate_revoked:
                                                return i.pki.certificateError.certificate_revoked
                                            case c.Alert.Description.certificate_expired:
                                                return i.pki.certificateError.certificate_expired
                                            case c.Alert.Description.certificate_unknown:
                                                return i.pki.certificateError.certificate_unknown
                                            case c.Alert.Description.unknown_ca:
                                                return i.pki.certificateError.unknown_ca
                                            default:
                                                return i.pki.certificateError.bad_certificate
                                        }
                                    })(s))
                            }
                            return s
                        }),
                            i.pki.verifyCertificateChain(e.caStore, t, r)
                } catch (o) {
                    var s = o
                        ; ('object' != typeof s || i.util.isArray(s)) &&
                            (s = {
                                send: !0,
                                alert: { level: c.Alert.Level.fatal, description: F(o) },
                            }),
                            'send' in s || (s.send = !0),
                            'alert' in s ||
                            (s.alert = {
                                level: c.Alert.Level.fatal,
                                description: F(s.error),
                            }),
                            e.error(e, s)
                }
                return !e.fail
            }),
                (c.createSessionCache = function (e, t) {
                    var r = null
                    if (e && e.getSession && e.setSession && e.order) r = e
                    else {
                        for (var n in (((r = {}).cache = e || {}),
                            (r.capacity = Math.max(t || 100, 1)),
                            (r.order = []),
                            e))
                            r.order.length <= t ? r.order.push(n) : delete e[n]
                                ; (r.getSession = function (e) {
                                    var t = null,
                                        n = null
                                    if (
                                        (e
                                            ? (n = i.util.bytesToHex(e))
                                            : r.order.length > 0 && (n = r.order[0]),
                                            null !== n && n in r.cache)
                                    )
                                        for (var s in ((t = r.cache[n]), delete r.cache[n], r.order))
                                            if (r.order[s] === n) {
                                                r.order.splice(s, 1)
                                                break
                                            }
                                    return t
                                }),
                                    (r.setSession = function (e, t) {
                                        if (r.order.length === r.capacity) {
                                            var n = r.order.shift()
                                            delete r.cache[n]
                                        }
                                        n = i.util.bytesToHex(e)
                                        r.order.push(n), (r.cache[n] = t)
                                    })
                    }
                    return r
                }),
                (c.createConnection = function (e) {
                    var t = null
                    t = e.caStore
                        ? i.util.isArray(e.caStore)
                            ? i.pki.createCaStore(e.caStore)
                            : e.caStore
                        : i.pki.createCaStore()
                    var r = e.cipherSuites || null
                    if (null === r)
                        for (var n in ((r = []), c.CipherSuites)) r.push(c.CipherSuites[n])
                    var s = e.server ? c.ConnectionEnd.server : c.ConnectionEnd.client,
                        o = e.sessionCache ? c.createSessionCache(e.sessionCache) : null,
                        a = {
                            version: { major: c.Version.major, minor: c.Version.minor },
                            entity: s,
                            sessionId: e.sessionId,
                            caStore: t,
                            sessionCache: o,
                            cipherSuites: r,
                            connected: e.connected,
                            virtualHost: e.virtualHost || null,
                            verifyClient: e.verifyClient || !1,
                            verify:
                                e.verify ||
                                function (e, t, r, i) {
                                    return t
                                },
                            verifyOptions: e.verifyOptions || {},
                            getCertificate: e.getCertificate || null,
                            getPrivateKey: e.getPrivateKey || null,
                            getSignature: e.getSignature || null,
                            input: i.util.createBuffer(),
                            tlsData: i.util.createBuffer(),
                            data: i.util.createBuffer(),
                            tlsDataReady: e.tlsDataReady,
                            dataReady: e.dataReady,
                            heartbeatReceived: e.heartbeatReceived,
                            closed: e.closed,
                            error: function (t, r) {
                                ; (r.origin =
                                    r.origin ||
                                    (t.entity === c.ConnectionEnd.client ? 'client' : 'server')),
                                    r.send && (c.queue(t, c.createAlert(t, r.alert)), c.flush(t))
                                var i = !1 !== r.fatal
                                i && (t.fail = !0), e.error(t, r), i && t.close(!1)
                            },
                            deflate: e.deflate || null,
                            inflate: e.inflate || null,
                            reset: function (e) {
                                ; (a.version = { major: c.Version.major, minor: c.Version.minor }),
                                    (a.record = null),
                                    (a.session = null),
                                    (a.peerCertificate = null),
                                    (a.state = { pending: null, current: null }),
                                    (a.expect = (a.entity, c.ConnectionEnd.client, 0)),
                                    (a.fragmented = null),
                                    (a.records = []),
                                    (a.open = !1),
                                    (a.handshakes = 0),
                                    (a.handshaking = !1),
                                    (a.isConnected = !1),
                                    (a.fail = !(e || void 0 === e)),
                                    a.input.clear(),
                                    a.tlsData.clear(),
                                    a.data.clear(),
                                    (a.state.current = c.createConnectionState(a))
                            },
                        }
                    a.reset()
                    return (
                        (a.handshake = function (e) {
                            if (a.entity !== c.ConnectionEnd.client)
                                a.error(a, {
                                    message: 'Cannot initiate handshake as a server.',
                                    fatal: !1,
                                })
                            else if (a.handshaking)
                                a.error(a, {
                                    message: 'Handshake already in progress.',
                                    fatal: !1,
                                })
                            else {
                                a.fail && !a.open && 0 === a.handshakes && (a.fail = !1),
                                    (a.handshaking = !0)
                                var t = null
                                    ; (e = e || '').length > 0 &&
                                        (a.sessionCache && (t = a.sessionCache.getSession(e)),
                                            null === t && (e = '')),
                                        0 === e.length &&
                                        a.sessionCache &&
                                        null !== (t = a.sessionCache.getSession()) &&
                                        (e = t.id),
                                        (a.session = {
                                            id: e,
                                            version: null,
                                            cipherSuite: null,
                                            compressionMethod: null,
                                            serverCertificate: null,
                                            certificateRequest: null,
                                            clientCertificate: null,
                                            sp: {},
                                            md5: i.md.md5.create(),
                                            sha1: i.md.sha1.create(),
                                        }),
                                        t && ((a.version = t.version), (a.session.sp = t.sp)),
                                        (a.session.sp.client_random = c.createRandom().getBytes()),
                                        (a.open = !0),
                                        c.queue(
                                            a,
                                            c.createRecord(a, {
                                                type: c.ContentType.handshake,
                                                data: c.createClientHello(a),
                                            })
                                        ),
                                        c.flush(a)
                            }
                        }),
                        (a.process = function (e) {
                            var t = 0
                            return (
                                e && a.input.putBytes(e),
                                a.fail ||
                                (null !== a.record &&
                                    a.record.ready &&
                                    a.record.fragment.isEmpty() &&
                                    (a.record = null),
                                    null === a.record &&
                                    (t = (function (e) {
                                        var t = 0,
                                            r = e.input,
                                            n = r.length()
                                        if (n < 5) t = 5 - n
                                        else {
                                            e.record = {
                                                type: r.getByte(),
                                                version: { major: r.getByte(), minor: r.getByte() },
                                                length: r.getInt16(),
                                                fragment: i.util.createBuffer(),
                                                ready: !1,
                                            }
                                            var s = e.record.version.major === e.version.major
                                            s &&
                                                e.session &&
                                                e.session.version &&
                                                (s = e.record.version.minor === e.version.minor),
                                                s ||
                                                e.error(e, {
                                                    message: 'Incompatible TLS version.',
                                                    send: !0,
                                                    alert: {
                                                        level: c.Alert.Level.fatal,
                                                        description: c.Alert.Description.protocol_version,
                                                    },
                                                })
                                        }
                                        return t
                                    })(a)),
                                    a.fail ||
                                    null === a.record ||
                                    a.record.ready ||
                                    (t = (function (e) {
                                        var t = 0,
                                            r = e.input,
                                            i = r.length()
                                        return (
                                            i < e.record.length
                                                ? (t = e.record.length - i)
                                                : (e.record.fragment.putBytes(
                                                    r.getBytes(e.record.length)
                                                ),
                                                    r.compact(),
                                                    e.state.current.read.update(e, e.record) &&
                                                    (null !== e.fragmented &&
                                                        (e.fragmented.type === e.record.type
                                                            ? (e.fragmented.fragment.putBuffer(
                                                                e.record.fragment
                                                            ),
                                                                (e.record = e.fragmented))
                                                            : e.error(e, {
                                                                message: 'Invalid fragmented record.',
                                                                send: !0,
                                                                alert: {
                                                                    level: c.Alert.Level.fatal,
                                                                    description:
                                                                        c.Alert.Description.unexpected_message,
                                                                },
                                                            })),
                                                        (e.record.ready = !0))),
                                            t
                                        )
                                    })(a)),
                                    !a.fail &&
                                    null !== a.record &&
                                    a.record.ready &&
                                    (function (e, t) {
                                        var r = t.type - c.ContentType.change_cipher_spec,
                                            i = k[e.entity][e.expect]
                                        r in i ? i[r](e, t) : c.handleUnexpected(e, t)
                                    })(a, a.record)),
                                t
                            )
                        }),
                        (a.prepare = function (e) {
                            return (
                                c.queue(
                                    a,
                                    c.createRecord(a, {
                                        type: c.ContentType.application_data,
                                        data: i.util.createBuffer(e),
                                    })
                                ),
                                c.flush(a)
                            )
                        }),
                        (a.prepareHeartbeatRequest = function (e, t) {
                            return (
                                e instanceof i.util.ByteBuffer && (e = e.bytes()),
                                void 0 === t && (t = e.length),
                                (a.expectedHeartbeatPayload = e),
                                c.queue(
                                    a,
                                    c.createRecord(a, {
                                        type: c.ContentType.heartbeat,
                                        data: c.createHeartbeat(
                                            c.HeartbeatMessageType.heartbeat_request,
                                            e,
                                            t
                                        ),
                                    })
                                ),
                                c.flush(a)
                            )
                        }),
                        (a.close = function (e) {
                            if (!a.fail && a.sessionCache && a.session) {
                                var t = {
                                    id: a.session.id,
                                    version: a.session.version,
                                    sp: a.session.sp,
                                }
                                    ; (t.sp.keys = null), a.sessionCache.setSession(t.id, t)
                            }
                            a.open &&
                                ((a.open = !1),
                                    a.input.clear(),
                                    (a.isConnected || a.handshaking) &&
                                    ((a.isConnected = a.handshaking = !1),
                                        c.queue(
                                            a,
                                            c.createAlert(a, {
                                                level: c.Alert.Level.warning,
                                                description: c.Alert.Description.close_notify,
                                            })
                                        ),
                                        c.flush(a)),
                                    a.closed(a)),
                                a.reset(e)
                        }),
                        a
                    )
                }),
                (e.exports = i.tls = i.tls || {}),
                c))
                'function' != typeof c[q] && (i.tls[q] = c[q])
                    ; (i.tls.prf_tls1 = n),
                        (i.tls.hmac_sha1 = function (e, t, r) {
                            var n = i.hmac.create()
                            n.start('SHA1', e)
                            var s = i.util.createBuffer()
                            return (
                                s.putInt32(t[0]),
                                s.putInt32(t[1]),
                                s.putByte(r.type),
                                s.putByte(r.version.major),
                                s.putByte(r.version.minor),
                                s.putInt16(r.length),
                                s.putBytes(r.fragment.bytes()),
                                n.update(s.getBytes()),
                                n.digest().getBytes()
                            )
                        }),
                        (i.tls.createSessionCache = c.createSessionCache),
                        (i.tls.createConnection = c.createConnection)
        },
        97116: (e, t, r) => {
            var i = r(3832),
                n = r(78807),
                s = (e.exports = i.util = i.util || {})
            function o(e) {
                if (8 !== e && 16 !== e && 24 !== e && 32 !== e)
                    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + e)
            }
            function a(e) {
                if (((this.data = ''), (this.read = 0), 'string' == typeof e))
                    this.data = e
                else if (s.isArrayBuffer(e) || s.isArrayBufferView(e))
                    if ('undefined' != typeof Buffer && e instanceof Buffer)
                        this.data = e.toString('binary')
                    else {
                        var t = new Uint8Array(e)
                        try {
                            this.data = String.fromCharCode.apply(null, t)
                        } catch (i) {
                            for (var r = 0; r < t.length; ++r) this.putByte(t[r])
                        }
                    }
                else
                    (e instanceof a ||
                        ('object' == typeof e &&
                            'string' == typeof e.data &&
                            'number' == typeof e.read)) &&
                        ((this.data = e.data), (this.read = e.read))
                this._constructedStringLength = 0
            }
            !(function () {
                if (
                    'undefined' != typeof process &&
                    process.nextTick &&
                    !process.browser
                )
                    return (
                        (s.nextTick = process.nextTick),
                        void ('function' == typeof setImmediate
                            ? (s.setImmediate = setImmediate)
                            : (s.setImmediate = s.nextTick))
                    )
                if ('function' == typeof setImmediate)
                    return (
                        (s.setImmediate = function () {
                            return setImmediate.apply(void 0, arguments)
                        }),
                        void (s.nextTick = function (e) {
                            return setImmediate(e)
                        })
                    )
                if (
                    ((s.setImmediate = function (e) {
                        setTimeout(e, 0)
                    }),
                        'undefined' != typeof window &&
                        'function' == typeof window.postMessage)
                ) {
                    var e = 'forge.setImmediate',
                        t = []
                        ; (s.setImmediate = function (r) {
                            t.push(r), 1 === t.length && window.postMessage(e, '*')
                        }),
                            window.addEventListener(
                                'message',
                                function (r) {
                                    if (r.source === window && r.data === e) {
                                        r.stopPropagation()
                                        var i = t.slice()
                                            ; (t.length = 0),
                                                i.forEach(function (e) {
                                                    e()
                                                })
                                    }
                                },
                                !0
                            )
                }
                if ('undefined' != typeof MutationObserver) {
                    var r = Date.now(),
                        i = !0,
                        n = document.createElement('div')
                    t = []
                    new MutationObserver(function () {
                        var e = t.slice()
                            ; (t.length = 0),
                                e.forEach(function (e) {
                                    e()
                                })
                    }).observe(n, { attributes: !0 })
                    var o = s.setImmediate
                    s.setImmediate = function (e) {
                        Date.now() - r > 15
                            ? ((r = Date.now()), o(e))
                            : (t.push(e), 1 === t.length && n.setAttribute('a', (i = !i)))
                    }
                }
                s.nextTick = s.setImmediate
            })(),
                (s.isNodejs =
                    'undefined' != typeof process &&
                    process.versions &&
                    process.versions.node),
                (s.globalScope = s.isNodejs
                    ? r.g
                    : 'undefined' == typeof self
                        ? window
                        : self),
                (s.isArray =
                    Array.isArray ||
                    function (e) {
                        return '[object Array]' === Object.prototype.toString.call(e)
                    }),
                (s.isArrayBuffer = function (e) {
                    return 'undefined' != typeof ArrayBuffer && e instanceof ArrayBuffer
                }),
                (s.isArrayBufferView = function (e) {
                    return e && s.isArrayBuffer(e.buffer) && void 0 !== e.byteLength
                }),
                (s.ByteBuffer = a),
                (s.ByteStringBuffer = a)
                ; (s.ByteStringBuffer.prototype._optimizeConstructedString = function (e) {
                    ; (this._constructedStringLength += e),
                        this._constructedStringLength > 4096 &&
                        (this.data.substr(0, 1), (this._constructedStringLength = 0))
                }),
                    (s.ByteStringBuffer.prototype.length = function () {
                        return this.data.length - this.read
                    }),
                    (s.ByteStringBuffer.prototype.isEmpty = function () {
                        return this.length() <= 0
                    }),
                    (s.ByteStringBuffer.prototype.putByte = function (e) {
                        return this.putBytes(String.fromCharCode(e))
                    }),
                    (s.ByteStringBuffer.prototype.fillWithByte = function (e, t) {
                        e = String.fromCharCode(e)
                        for (var r = this.data; t > 0;)
                            1 & t && (r += e), (t >>>= 1) > 0 && (e += e)
                        return (this.data = r), this._optimizeConstructedString(t), this
                    }),
                    (s.ByteStringBuffer.prototype.putBytes = function (e) {
                        return (
                            (this.data += e), this._optimizeConstructedString(e.length), this
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putString = function (e) {
                        return this.putBytes(s.encodeUtf8(e))
                    }),
                    (s.ByteStringBuffer.prototype.putInt16 = function (e) {
                        return this.putBytes(
                            String.fromCharCode((e >> 8) & 255) + String.fromCharCode(255 & e)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt24 = function (e) {
                        return this.putBytes(
                            String.fromCharCode((e >> 16) & 255) +
                            String.fromCharCode((e >> 8) & 255) +
                            String.fromCharCode(255 & e)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt32 = function (e) {
                        return this.putBytes(
                            String.fromCharCode((e >> 24) & 255) +
                            String.fromCharCode((e >> 16) & 255) +
                            String.fromCharCode((e >> 8) & 255) +
                            String.fromCharCode(255 & e)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt16Le = function (e) {
                        return this.putBytes(
                            String.fromCharCode(255 & e) + String.fromCharCode((e >> 8) & 255)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt24Le = function (e) {
                        return this.putBytes(
                            String.fromCharCode(255 & e) +
                            String.fromCharCode((e >> 8) & 255) +
                            String.fromCharCode((e >> 16) & 255)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt32Le = function (e) {
                        return this.putBytes(
                            String.fromCharCode(255 & e) +
                            String.fromCharCode((e >> 8) & 255) +
                            String.fromCharCode((e >> 16) & 255) +
                            String.fromCharCode((e >> 24) & 255)
                        )
                    }),
                    (s.ByteStringBuffer.prototype.putInt = function (e, t) {
                        o(t)
                        var r = ''
                        do {
                            ; (t -= 8), (r += String.fromCharCode((e >> t) & 255))
                        } while (t > 0)
                        return this.putBytes(r)
                    }),
                    (s.ByteStringBuffer.prototype.putSignedInt = function (e, t) {
                        return e < 0 && (e += 2 << (t - 1)), this.putInt(e, t)
                    }),
                    (s.ByteStringBuffer.prototype.putBuffer = function (e) {
                        return this.putBytes(e.getBytes())
                    }),
                    (s.ByteStringBuffer.prototype.getByte = function () {
                        return this.data.charCodeAt(this.read++)
                    }),
                    (s.ByteStringBuffer.prototype.getInt16 = function () {
                        var e =
                            (this.data.charCodeAt(this.read) << 8) ^
                            this.data.charCodeAt(this.read + 1)
                        return (this.read += 2), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt24 = function () {
                        var e =
                            (this.data.charCodeAt(this.read) << 16) ^
                            (this.data.charCodeAt(this.read + 1) << 8) ^
                            this.data.charCodeAt(this.read + 2)
                        return (this.read += 3), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt32 = function () {
                        var e =
                            (this.data.charCodeAt(this.read) << 24) ^
                            (this.data.charCodeAt(this.read + 1) << 16) ^
                            (this.data.charCodeAt(this.read + 2) << 8) ^
                            this.data.charCodeAt(this.read + 3)
                        return (this.read += 4), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt16Le = function () {
                        var e =
                            this.data.charCodeAt(this.read) ^
                            (this.data.charCodeAt(this.read + 1) << 8)
                        return (this.read += 2), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt24Le = function () {
                        var e =
                            this.data.charCodeAt(this.read) ^
                            (this.data.charCodeAt(this.read + 1) << 8) ^
                            (this.data.charCodeAt(this.read + 2) << 16)
                        return (this.read += 3), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt32Le = function () {
                        var e =
                            this.data.charCodeAt(this.read) ^
                            (this.data.charCodeAt(this.read + 1) << 8) ^
                            (this.data.charCodeAt(this.read + 2) << 16) ^
                            (this.data.charCodeAt(this.read + 3) << 24)
                        return (this.read += 4), e
                    }),
                    (s.ByteStringBuffer.prototype.getInt = function (e) {
                        o(e)
                        var t = 0
                        do {
                            ; (t = (t << 8) + this.data.charCodeAt(this.read++)), (e -= 8)
                        } while (e > 0)
                        return t
                    }),
                    (s.ByteStringBuffer.prototype.getSignedInt = function (e) {
                        var t = this.getInt(e),
                            r = 2 << (e - 2)
                        return t >= r && (t -= r << 1), t
                    }),
                    (s.ByteStringBuffer.prototype.getBytes = function (e) {
                        var t
                        return (
                            e
                                ? ((e = Math.min(this.length(), e)),
                                    (t = this.data.slice(this.read, this.read + e)),
                                    (this.read += e))
                                : 0 === e
                                    ? (t = '')
                                    : ((t = 0 === this.read ? this.data : this.data.slice(this.read)),
                                        this.clear()),
                            t
                        )
                    }),
                    (s.ByteStringBuffer.prototype.bytes = function (e) {
                        return void 0 === e
                            ? this.data.slice(this.read)
                            : this.data.slice(this.read, this.read + e)
                    }),
                    (s.ByteStringBuffer.prototype.at = function (e) {
                        return this.data.charCodeAt(this.read + e)
                    }),
                    (s.ByteStringBuffer.prototype.setAt = function (e, t) {
                        return (
                            (this.data =
                                this.data.substr(0, this.read + e) +
                                String.fromCharCode(t) +
                                this.data.substr(this.read + e + 1)),
                            this
                        )
                    }),
                    (s.ByteStringBuffer.prototype.last = function () {
                        return this.data.charCodeAt(this.data.length - 1)
                    }),
                    (s.ByteStringBuffer.prototype.copy = function () {
                        var e = s.createBuffer(this.data)
                        return (e.read = this.read), e
                    }),
                    (s.ByteStringBuffer.prototype.compact = function () {
                        return (
                            this.read > 0 &&
                            ((this.data = this.data.slice(this.read)), (this.read = 0)),
                            this
                        )
                    }),
                    (s.ByteStringBuffer.prototype.clear = function () {
                        return (this.data = ''), (this.read = 0), this
                    }),
                    (s.ByteStringBuffer.prototype.truncate = function (e) {
                        var t = Math.max(0, this.length() - e)
                        return (
                            (this.data = this.data.substr(this.read, t)), (this.read = 0), this
                        )
                    }),
                    (s.ByteStringBuffer.prototype.toHex = function () {
                        for (var e = '', t = this.read; t < this.data.length; ++t) {
                            var r = this.data.charCodeAt(t)
                            r < 16 && (e += '0'), (e += r.toString(16))
                        }
                        return e
                    }),
                    (s.ByteStringBuffer.prototype.toString = function () {
                        return s.decodeUtf8(this.bytes())
                    }),
                    (s.DataBuffer = function (e, t) {
                        ; (t = t || {}),
                            (this.read = t.readOffset || 0),
                            (this.growSize = t.growSize || 1024)
                        var r = s.isArrayBuffer(e),
                            i = s.isArrayBufferView(e)
                        if (r || i)
                            return (
                                (this.data = r
                                    ? new DataView(e)
                                    : new DataView(e.buffer, e.byteOffset, e.byteLength)),
                                void (this.write =
                                    'writeOffset' in t ? t.writeOffset : this.data.byteLength)
                            )
                                ; (this.data = new DataView(new ArrayBuffer(0))),
                                    (this.write = 0),
                                    null != e && this.putBytes(e),
                                    'writeOffset' in t && (this.write = t.writeOffset)
                    }),
                    (s.DataBuffer.prototype.length = function () {
                        return this.write - this.read
                    }),
                    (s.DataBuffer.prototype.isEmpty = function () {
                        return this.length() <= 0
                    }),
                    (s.DataBuffer.prototype.accommodate = function (e, t) {
                        if (this.length() >= e) return this
                        t = Math.max(t || this.growSize, e)
                        var r = new Uint8Array(
                            this.data.buffer,
                            this.data.byteOffset,
                            this.data.byteLength
                        ),
                            i = new Uint8Array(this.length() + t)
                        return i.set(r), (this.data = new DataView(i.buffer)), this
                    }),
                    (s.DataBuffer.prototype.putByte = function (e) {
                        return this.accommodate(1), this.data.setUint8(this.write++, e), this
                    }),
                    (s.DataBuffer.prototype.fillWithByte = function (e, t) {
                        this.accommodate(t)
                        for (var r = 0; r < t; ++r) this.data.setUint8(e)
                        return this
                    }),
                    (s.DataBuffer.prototype.putBytes = function (e, t) {
                        if (s.isArrayBufferView(e)) {
                            var r =
                                (i = new Uint8Array(e.buffer, e.byteOffset, e.byteLength))
                                    .byteLength - i.byteOffset
                            return (
                                this.accommodate(r),
                                new Uint8Array(this.data.buffer, this.write).set(i),
                                (this.write += r),
                                this
                            )
                        }
                        if (s.isArrayBuffer(e)) {
                            var i = new Uint8Array(e)
                            return (
                                this.accommodate(i.byteLength),
                                new Uint8Array(this.data.buffer).set(i, this.write),
                                (this.write += i.byteLength),
                                this
                            )
                        }
                        if (
                            e instanceof s.DataBuffer ||
                            ('object' == typeof e &&
                                'number' == typeof e.read &&
                                'number' == typeof e.write &&
                                s.isArrayBufferView(e.data))
                        ) {
                            i = new Uint8Array(e.data.byteLength, e.read, e.length())
                            return (
                                this.accommodate(i.byteLength),
                                new Uint8Array(e.data.byteLength, this.write).set(i),
                                (this.write += i.byteLength),
                                this
                            )
                        }
                        if (
                            (e instanceof s.ByteStringBuffer && ((e = e.data), (t = 'binary')),
                                (t = t || 'binary'),
                                'string' == typeof e)
                        ) {
                            var n
                            if ('hex' === t)
                                return (
                                    this.accommodate(Math.ceil(e.length / 2)),
                                    (n = new Uint8Array(this.data.buffer, this.write)),
                                    (this.write += s.binary.hex.decode(e, n, this.write)),
                                    this
                                )
                            if ('base64' === t)
                                return (
                                    this.accommodate(3 * Math.ceil(e.length / 4)),
                                    (n = new Uint8Array(this.data.buffer, this.write)),
                                    (this.write += s.binary.base64.decode(e, n, this.write)),
                                    this
                                )
                            if (
                                ('utf8' === t && ((e = s.encodeUtf8(e)), (t = 'binary')),
                                    'binary' === t || 'raw' === t)
                            )
                                return (
                                    this.accommodate(e.length),
                                    (n = new Uint8Array(this.data.buffer, this.write)),
                                    (this.write += s.binary.raw.decode(n)),
                                    this
                                )
                            if ('utf16' === t)
                                return (
                                    this.accommodate(2 * e.length),
                                    (n = new Uint16Array(this.data.buffer, this.write)),
                                    (this.write += s.text.utf16.encode(n)),
                                    this
                                )
                            throw new Error('Invalid encoding: ' + t)
                        }
                        throw Error('Invalid parameter: ' + e)
                    }),
                    (s.DataBuffer.prototype.putBuffer = function (e) {
                        return this.putBytes(e), e.clear(), this
                    }),
                    (s.DataBuffer.prototype.putString = function (e) {
                        return this.putBytes(e, 'utf16')
                    }),
                    (s.DataBuffer.prototype.putInt16 = function (e) {
                        return (
                            this.accommodate(2),
                            this.data.setInt16(this.write, e),
                            (this.write += 2),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt24 = function (e) {
                        return (
                            this.accommodate(3),
                            this.data.setInt16(this.write, (e >> 8) & 65535),
                            this.data.setInt8(this.write, (e >> 16) & 255),
                            (this.write += 3),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt32 = function (e) {
                        return (
                            this.accommodate(4),
                            this.data.setInt32(this.write, e),
                            (this.write += 4),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt16Le = function (e) {
                        return (
                            this.accommodate(2),
                            this.data.setInt16(this.write, e, !0),
                            (this.write += 2),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt24Le = function (e) {
                        return (
                            this.accommodate(3),
                            this.data.setInt8(this.write, (e >> 16) & 255),
                            this.data.setInt16(this.write, (e >> 8) & 65535, !0),
                            (this.write += 3),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt32Le = function (e) {
                        return (
                            this.accommodate(4),
                            this.data.setInt32(this.write, e, !0),
                            (this.write += 4),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.putInt = function (e, t) {
                        o(t), this.accommodate(t / 8)
                        do {
                            ; (t -= 8), this.data.setInt8(this.write++, (e >> t) & 255)
                        } while (t > 0)
                        return this
                    }),
                    (s.DataBuffer.prototype.putSignedInt = function (e, t) {
                        return (
                            o(t),
                            this.accommodate(t / 8),
                            e < 0 && (e += 2 << (t - 1)),
                            this.putInt(e, t)
                        )
                    }),
                    (s.DataBuffer.prototype.getByte = function () {
                        return this.data.getInt8(this.read++)
                    }),
                    (s.DataBuffer.prototype.getInt16 = function () {
                        var e = this.data.getInt16(this.read)
                        return (this.read += 2), e
                    }),
                    (s.DataBuffer.prototype.getInt24 = function () {
                        var e =
                            (this.data.getInt16(this.read) << 8) ^
                            this.data.getInt8(this.read + 2)
                        return (this.read += 3), e
                    }),
                    (s.DataBuffer.prototype.getInt32 = function () {
                        var e = this.data.getInt32(this.read)
                        return (this.read += 4), e
                    }),
                    (s.DataBuffer.prototype.getInt16Le = function () {
                        var e = this.data.getInt16(this.read, !0)
                        return (this.read += 2), e
                    }),
                    (s.DataBuffer.prototype.getInt24Le = function () {
                        var e =
                            this.data.getInt8(this.read) ^
                            (this.data.getInt16(this.read + 1, !0) << 8)
                        return (this.read += 3), e
                    }),
                    (s.DataBuffer.prototype.getInt32Le = function () {
                        var e = this.data.getInt32(this.read, !0)
                        return (this.read += 4), e
                    }),
                    (s.DataBuffer.prototype.getInt = function (e) {
                        o(e)
                        var t = 0
                        do {
                            ; (t = (t << 8) + this.data.getInt8(this.read++)), (e -= 8)
                        } while (e > 0)
                        return t
                    }),
                    (s.DataBuffer.prototype.getSignedInt = function (e) {
                        var t = this.getInt(e),
                            r = 2 << (e - 2)
                        return t >= r && (t -= r << 1), t
                    }),
                    (s.DataBuffer.prototype.getBytes = function (e) {
                        var t
                        return (
                            e
                                ? ((e = Math.min(this.length(), e)),
                                    (t = this.data.slice(this.read, this.read + e)),
                                    (this.read += e))
                                : 0 === e
                                    ? (t = '')
                                    : ((t = 0 === this.read ? this.data : this.data.slice(this.read)),
                                        this.clear()),
                            t
                        )
                    }),
                    (s.DataBuffer.prototype.bytes = function (e) {
                        return void 0 === e
                            ? this.data.slice(this.read)
                            : this.data.slice(this.read, this.read + e)
                    }),
                    (s.DataBuffer.prototype.at = function (e) {
                        return this.data.getUint8(this.read + e)
                    }),
                    (s.DataBuffer.prototype.setAt = function (e, t) {
                        return this.data.setUint8(e, t), this
                    }),
                    (s.DataBuffer.prototype.last = function () {
                        return this.data.getUint8(this.write - 1)
                    }),
                    (s.DataBuffer.prototype.copy = function () {
                        return new s.DataBuffer(this)
                    }),
                    (s.DataBuffer.prototype.compact = function () {
                        if (this.read > 0) {
                            var e = new Uint8Array(this.data.buffer, this.read),
                                t = new Uint8Array(e.byteLength)
                            t.set(e),
                                (this.data = new DataView(t)),
                                (this.write -= this.read),
                                (this.read = 0)
                        }
                        return this
                    }),
                    (s.DataBuffer.prototype.clear = function () {
                        return (
                            (this.data = new DataView(new ArrayBuffer(0))),
                            (this.read = this.write = 0),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.truncate = function (e) {
                        return (
                            (this.write = Math.max(0, this.length() - e)),
                            (this.read = Math.min(this.read, this.write)),
                            this
                        )
                    }),
                    (s.DataBuffer.prototype.toHex = function () {
                        for (var e = '', t = this.read; t < this.data.byteLength; ++t) {
                            var r = this.data.getUint8(t)
                            r < 16 && (e += '0'), (e += r.toString(16))
                        }
                        return e
                    }),
                    (s.DataBuffer.prototype.toString = function (e) {
                        var t = new Uint8Array(this.data, this.read, this.length())
                        if ('binary' === (e = e || 'utf8') || 'raw' === e)
                            return s.binary.raw.encode(t)
                        if ('hex' === e) return s.binary.hex.encode(t)
                        if ('base64' === e) return s.binary.base64.encode(t)
                        if ('utf8' === e) return s.text.utf8.decode(t)
                        if ('utf16' === e) return s.text.utf16.decode(t)
                        throw new Error('Invalid encoding: ' + e)
                    }),
                    (s.createBuffer = function (e, t) {
                        return (
                            (t = t || 'raw'),
                            void 0 !== e && 'utf8' === t && (e = s.encodeUtf8(e)),
                            new s.ByteBuffer(e)
                        )
                    }),
                    (s.fillString = function (e, t) {
                        for (var r = ''; t > 0;)
                            1 & t && (r += e), (t >>>= 1) > 0 && (e += e)
                        return r
                    }),
                    (s.xorBytes = function (e, t, r) {
                        for (var i = '', n = '', s = '', o = 0, a = 0; r > 0; --r, ++o)
                            (n = e.charCodeAt(o) ^ t.charCodeAt(o)),
                                a >= 10 && ((i += s), (s = ''), (a = 0)),
                                (s += String.fromCharCode(n)),
                                ++a
                        return (i += s)
                    }),
                    (s.hexToBytes = function (e) {
                        var t = '',
                            r = 0
                        for (
                            !0 & e.length &&
                            ((r = 1), (t += String.fromCharCode(parseInt(e[0], 16))));
                            r < e.length;
                            r += 2
                        )
                            t += String.fromCharCode(parseInt(e.substr(r, 2), 16))
                        return t
                    }),
                    (s.bytesToHex = function (e) {
                        return s.createBuffer(e).toHex()
                    }),
                    (s.int32ToBytes = function (e) {
                        return (
                            String.fromCharCode((e >> 24) & 255) +
                            String.fromCharCode((e >> 16) & 255) +
                            String.fromCharCode((e >> 8) & 255) +
                            String.fromCharCode(255 & e)
                        )
                    })
            var u =
                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
                c = [
                    62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,
                    -1, 64, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,
                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51,
                ],
                d = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
                ; (s.encode64 = function (e, t) {
                    for (var r, i, n, s = '', o = '', a = 0; a < e.length;)
                        (r = e.charCodeAt(a++)),
                            (i = e.charCodeAt(a++)),
                            (n = e.charCodeAt(a++)),
                            (s += u.charAt(r >> 2)),
                            (s += u.charAt(((3 & r) << 4) | (i >> 4))),
                            isNaN(i)
                                ? (s += '==')
                                : ((s += u.charAt(((15 & i) << 2) | (n >> 6))),
                                    (s += isNaN(n) ? '=' : u.charAt(63 & n))),
                            t &&
                            s.length > t &&
                            ((o += s.substr(0, t) + '\r\n'), (s = s.substr(t)))
                    return (o += s)
                }),
                    (s.decode64 = function (e) {
                        e = e.replace(/[^A-Za-z0-9\+\/\=]/g, '')
                        for (var t, r, i, n, s = '', o = 0; o < e.length;)
                            (t = c[e.charCodeAt(o++) - 43]),
                                (r = c[e.charCodeAt(o++) - 43]),
                                (i = c[e.charCodeAt(o++) - 43]),
                                (n = c[e.charCodeAt(o++) - 43]),
                                (s += String.fromCharCode((t << 2) | (r >> 4))),
                                64 !== i &&
                                ((s += String.fromCharCode(((15 & r) << 4) | (i >> 2))),
                                    64 !== n && (s += String.fromCharCode(((3 & i) << 6) | n)))
                        return s
                    }),
                    (s.encodeUtf8 = function (e) {
                        return unescape(encodeURIComponent(e))
                    }),
                    (s.decodeUtf8 = function (e) {
                        return decodeURIComponent(escape(e))
                    }),
                    (s.binary = {
                        raw: {},
                        hex: {},
                        base64: {},
                        base58: {},
                        baseN: { encode: n.encode, decode: n.decode },
                    }),
                    (s.binary.raw.encode = function (e) {
                        return String.fromCharCode.apply(null, e)
                    }),
                    (s.binary.raw.decode = function (e, t, r) {
                        var i = t
                        i || (i = new Uint8Array(e.length))
                        for (var n = (r = r || 0), s = 0; s < e.length; ++s)
                            i[n++] = e.charCodeAt(s)
                        return t ? n - r : i
                    }),
                    (s.binary.hex.encode = s.bytesToHex),
                    (s.binary.hex.decode = function (e, t, r) {
                        var i = t
                        i || (i = new Uint8Array(Math.ceil(e.length / 2)))
                        var n = 0,
                            s = (r = r || 0)
                        for (
                            1 & e.length && ((n = 1), (i[s++] = parseInt(e[0], 16)));
                            n < e.length;
                            n += 2
                        )
                            i[s++] = parseInt(e.substr(n, 2), 16)
                        return t ? s - r : i
                    }),
                    (s.binary.base64.encode = function (e, t) {
                        for (var r, i, n, s = '', o = '', a = 0; a < e.byteLength;)
                            (r = e[a++]),
                                (i = e[a++]),
                                (n = e[a++]),
                                (s += u.charAt(r >> 2)),
                                (s += u.charAt(((3 & r) << 4) | (i >> 4))),
                                isNaN(i)
                                    ? (s += '==')
                                    : ((s += u.charAt(((15 & i) << 2) | (n >> 6))),
                                        (s += isNaN(n) ? '=' : u.charAt(63 & n))),
                                t &&
                                s.length > t &&
                                ((o += s.substr(0, t) + '\r\n'), (s = s.substr(t)))
                        return (o += s)
                    }),
                    (s.binary.base64.decode = function (e, t, r) {
                        var i,
                            n,
                            s,
                            o,
                            a = t
                        a || (a = new Uint8Array(3 * Math.ceil(e.length / 4))),
                            (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ''))
                        for (var u = 0, d = (r = r || 0); u < e.length;)
                            (i = c[e.charCodeAt(u++) - 43]),
                                (n = c[e.charCodeAt(u++) - 43]),
                                (s = c[e.charCodeAt(u++) - 43]),
                                (o = c[e.charCodeAt(u++) - 43]),
                                (a[d++] = (i << 2) | (n >> 4)),
                                64 !== s &&
                                ((a[d++] = ((15 & n) << 4) | (s >> 2)),
                                    64 !== o && (a[d++] = ((3 & s) << 6) | o))
                        return t ? d - r : a.subarray(0, d)
                    }),
                    (s.binary.base58.encode = function (e, t) {
                        return s.binary.baseN.encode(e, d, t)
                    }),
                    (s.binary.base58.decode = function (e, t) {
                        return s.binary.baseN.decode(e, d, t)
                    }),
                    (s.text = { utf8: {}, utf16: {} }),
                    (s.text.utf8.encode = function (e, t, r) {
                        e = s.encodeUtf8(e)
                        var i = t
                        i || (i = new Uint8Array(e.length))
                        for (var n = (r = r || 0), o = 0; o < e.length; ++o)
                            i[n++] = e.charCodeAt(o)
                        return t ? n - r : i
                    }),
                    (s.text.utf8.decode = function (e) {
                        return s.decodeUtf8(String.fromCharCode.apply(null, e))
                    }),
                    (s.text.utf16.encode = function (e, t, r) {
                        var i = t
                        i || (i = new Uint8Array(2 * e.length))
                        for (
                            var n = new Uint16Array(i.buffer), s = (r = r || 0), o = r, a = 0;
                            a < e.length;
                            ++a
                        )
                            (n[o++] = e.charCodeAt(a)), (s += 2)
                        return t ? s - r : i
                    }),
                    (s.text.utf16.decode = function (e) {
                        return String.fromCharCode.apply(null, new Uint16Array(e.buffer))
                    }),
                    (s.deflate = function (e, t, r) {
                        if (((t = s.decode64(e.deflate(s.encode64(t)).rval)), r)) {
                            var i = 2
                            32 & t.charCodeAt(1) && (i = 6), (t = t.substring(i, t.length - 4))
                        }
                        return t
                    }),
                    (s.inflate = function (e, t, r) {
                        var i = e.inflate(s.encode64(t)).rval
                        return null === i ? null : s.decode64(i)
                    })
            var p = function (e, t, r) {
                if (!e) throw new Error('WebStorage not available.')
                var i
                if (
                    (null === r
                        ? (i = e.removeItem(t))
                        : ((r = s.encode64(JSON.stringify(r))), (i = e.setItem(t, r))),
                        void 0 !== i && !0 !== i.rval)
                ) {
                    var n = new Error(i.error.message)
                    throw ((n.id = i.error.id), (n.name = i.error.name), n)
                }
            },
                f = function (e, t) {
                    if (!e) throw new Error('WebStorage not available.')
                    var r = e.getItem(t)
                    if (e.init)
                        if (null === r.rval) {
                            if (r.error) {
                                var i = new Error(r.error.message)
                                throw ((i.id = r.error.id), (i.name = r.error.name), i)
                            }
                            r = null
                        } else r = r.rval
                    return null !== r && (r = JSON.parse(s.decode64(r))), r
                },
                l = function (e, t, r, i) {
                    var n = f(e, t)
                    null === n && (n = {}), (n[r] = i), p(e, t, n)
                },
                h = function (e, t, r) {
                    var i = f(e, t)
                    return null !== i && (i = r in i ? i[r] : null), i
                },
                g = function (e, t, r) {
                    var i = f(e, t)
                    if (null !== i && r in i) {
                        delete i[r]
                        var n = !0
                        for (var s in i) {
                            n = !1
                            break
                        }
                        n && (i = null), p(e, t, i)
                    }
                },
                y = function (e, t) {
                    p(e, t, null)
                },
                m = function (e, t, r) {
                    var i,
                        n = null
                    void 0 === r && (r = ['web', 'flash'])
                    var s = !1,
                        o = null
                    for (var a in r) {
                        i = r[a]
                        try {
                            if ('flash' === i || 'both' === i) {
                                if (null === t[0])
                                    throw new Error('Flash local storage not available.')
                                    ; (n = e.apply(this, t)), (s = 'flash' === i)
                            }
                            ; ('web' !== i && 'both' !== i) ||
                                ((t[0] = localStorage), (n = e.apply(this, t)), (s = !0))
                        } catch (u) {
                            o = u
                        }
                        if (s) break
                    }
                    if (!s) throw o
                    return n
                }
                ; (s.setItem = function (e, t, r, i, n) {
                    m(l, arguments, n)
                }),
                    (s.getItem = function (e, t, r, i) {
                        return m(h, arguments, i)
                    }),
                    (s.removeItem = function (e, t, r, i) {
                        m(g, arguments, i)
                    }),
                    (s.clearItems = function (e, t, r) {
                        m(y, arguments, r)
                    }),
                    (s.isEmpty = function (e) {
                        for (var t in e) if (e.hasOwnProperty(t)) return !1
                        return !0
                    }),
                    (s.format = function (e) {
                        for (var t, r, i = /%./g, n = 0, s = [], o = 0; (t = i.exec(e));) {
                            ; (r = e.substring(o, i.lastIndex - 2)).length > 0 && s.push(r),
                                (o = i.lastIndex)
                            var a = t[0][1]
                            switch (a) {
                                case 's':
                                case 'o':
                                    n < arguments.length
                                        ? s.push(arguments[1 + n++])
                                        : s.push('<?>')
                                    break
                                case '%':
                                    s.push('%')
                                    break
                                default:
                                    s.push('<%' + a + '?>')
                            }
                        }
                        return s.push(e.substring(o)), s.join('')
                    }),
                    (s.formatNumber = function (e, t, r, i) {
                        var n = e,
                            s = isNaN((t = Math.abs(t))) ? 2 : t,
                            o = void 0 === r ? ',' : r,
                            a = void 0 === i ? '.' : i,
                            u = n < 0 ? '-' : '',
                            c = parseInt((n = Math.abs(+n || 0).toFixed(s)), 10) + '',
                            d = c.length > 3 ? c.length % 3 : 0
                        return (
                            u +
                            (d ? c.substr(0, d) + a : '') +
                            c.substr(d).replace(/(\d{3})(?=\d)/g, '$1' + a) +
                            (s
                                ? o +
                                Math.abs(n - c)
                                    .toFixed(s)
                                    .slice(2)
                                : '')
                        )
                    }),
                    (s.formatSize = function (e) {
                        return (e =
                            e >= 1073741824
                                ? s.formatNumber(e / 1073741824, 2, '.', '') + ' GiB'
                                : e >= 1048576
                                    ? s.formatNumber(e / 1048576, 2, '.', '') + ' MiB'
                                    : e >= 1024
                                        ? s.formatNumber(e / 1024, 0) + ' KiB'
                                        : s.formatNumber(e, 0) + ' bytes')
                    }),
                    (s.bytesFromIP = function (e) {
                        return -1 !== e.indexOf('.')
                            ? s.bytesFromIPv4(e)
                            : -1 !== e.indexOf(':')
                                ? s.bytesFromIPv6(e)
                                : null
                    }),
                    (s.bytesFromIPv4 = function (e) {
                        if (4 !== (e = e.split('.')).length) return null
                        for (var t = s.createBuffer(), r = 0; r < e.length; ++r) {
                            var i = parseInt(e[r], 10)
                            if (isNaN(i)) return null
                            t.putByte(i)
                        }
                        return t.getBytes()
                    }),
                    (s.bytesFromIPv6 = function (e) {
                        for (
                            var t = 0,
                            r =
                                2 *
                                (8 -
                                    (e = e.split(':').filter(function (e) {
                                        return 0 === e.length && ++t, !0
                                    })).length +
                                    t),
                            i = s.createBuffer(),
                            n = 0;
                            n < 8;
                            ++n
                        )
                            if (e[n] && 0 !== e[n].length) {
                                var o = s.hexToBytes(e[n])
                                o.length < 2 && i.putByte(0), i.putBytes(o)
                            } else i.fillWithByte(0, r), (r = 0)
                        return i.getBytes()
                    }),
                    (s.bytesToIP = function (e) {
                        return 4 === e.length
                            ? s.bytesToIPv4(e)
                            : 16 === e.length
                                ? s.bytesToIPv6(e)
                                : null
                    }),
                    (s.bytesToIPv4 = function (e) {
                        if (4 !== e.length) return null
                        for (var t = [], r = 0; r < e.length; ++r) t.push(e.charCodeAt(r))
                        return t.join('.')
                    }),
                    (s.bytesToIPv6 = function (e) {
                        if (16 !== e.length) return null
                        for (var t = [], r = [], i = 0, n = 0; n < e.length; n += 2) {
                            for (
                                var o = s.bytesToHex(e[n] + e[n + 1]);
                                '0' === o[0] && '0' !== o;

                            )
                                o = o.substr(1)
                            if ('0' === o) {
                                var a = r[r.length - 1],
                                    u = t.length
                                a && u === a.end + 1
                                    ? ((a.end = u),
                                        a.end - a.start > r[i].end - r[i].start && (i = r.length - 1))
                                    : r.push({ start: u, end: u })
                            }
                            t.push(o)
                        }
                        if (r.length > 0) {
                            var c = r[i]
                            c.end - c.start > 0 &&
                                (t.splice(c.start, c.end - c.start + 1, ''),
                                    0 === c.start && t.unshift(''),
                                    7 === c.end && t.push(''))
                        }
                        return t.join(':')
                    }),
                    (s.estimateCores = function (e, t) {
                        if (
                            ('function' == typeof e && ((t = e), (e = {})),
                                (e = e || {}),
                                'cores' in s && !e.update)
                        )
                            return t(null, s.cores)
                        if (
                            'undefined' != typeof navigator &&
                            'hardwareConcurrency' in navigator &&
                            navigator.hardwareConcurrency > 0
                        )
                            return (s.cores = navigator.hardwareConcurrency), t(null, s.cores)
                        if ('undefined' == typeof Worker)
                            return (s.cores = 1), t(null, s.cores)
                        if ('undefined' == typeof Blob) return (s.cores = 2), t(null, s.cores)
                        var r = URL.createObjectURL(
                            new Blob(
                                [
                                    '(',
                                    function () {
                                        self.addEventListener('message', function (e) {
                                            for (var t = Date.now(), r = t + 4; Date.now() < r;);
                                            self.postMessage({ st: t, et: r })
                                        })
                                    }.toString(),
                                    ')()',
                                ],
                                { type: 'application/javascript' }
                            )
                        )
                        !(function e(i, n, o) {
                            if (0 === n) {
                                var a = Math.floor(
                                    i.reduce(function (e, t) {
                                        return e + t
                                    }, 0) / i.length
                                )
                                return (
                                    (s.cores = Math.max(1, a)),
                                    URL.revokeObjectURL(r),
                                    t(null, s.cores)
                                )
                            }
                            !(function (e, t) {
                                for (var i = [], n = [], s = 0; s < e; ++s) {
                                    var o = new Worker(r)
                                    o.addEventListener('message', function (r) {
                                        if ((n.push(r.data), n.length === e)) {
                                            for (var s = 0; s < e; ++s) i[s].terminate()
                                            t(null, n)
                                        }
                                    }),
                                        i.push(o)
                                }
                                for (s = 0; s < e; ++s) i[s].postMessage(s)
                            })(o, function (t, r) {
                                i.push(
                                    (function (e, t) {
                                        for (var r = [], i = 0; i < e; ++i)
                                            for (var n = t[i], s = (r[i] = []), o = 0; o < e; ++o)
                                                if (i !== o) {
                                                    var a = t[o]
                                                        ; ((n.st > a.st && n.st < a.et) ||
                                                            (a.st > n.st && a.st < n.et)) &&
                                                            s.push(o)
                                                }
                                        return r.reduce(function (e, t) {
                                            return Math.max(e, t.length)
                                        }, 0)
                                    })(o, r)
                                ),
                                    e(i, n - 1, o)
                            })
                        })([], 5, 16)
                    })
        },
        25414: (e, t, r) => {
            var i = r(3832)
            r(8925),
                r(3068),
                r(33480),
                r(28991),
                r(86971),
                r(66270),
                r(26953),
                r(47629),
                r(28095),
                r(97116)
            var n = i.asn1,
                s = (e.exports = i.pki = i.pki || {}),
                o = s.oids,
                a = {}
                ; (a.CN = o.commonName),
                    (a.commonName = 'CN'),
                    (a.C = o.countryName),
                    (a.countryName = 'C'),
                    (a.L = o.localityName),
                    (a.localityName = 'L'),
                    (a.ST = o.stateOrProvinceName),
                    (a.stateOrProvinceName = 'ST'),
                    (a.O = o.organizationName),
                    (a.organizationName = 'O'),
                    (a.OU = o.organizationalUnitName),
                    (a.organizationalUnitName = 'OU'),
                    (a.E = o.emailAddress),
                    (a.emailAddress = 'E')
            var u = i.pki.rsa.publicKeyValidator,
                c = {
                    name: 'Certificate',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'Certificate.TBSCertificate',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            captureAsn1: 'tbsCertificate',
                            value: [
                                {
                                    name: 'Certificate.TBSCertificate.version',
                                    tagClass: n.Class.CONTEXT_SPECIFIC,
                                    type: 0,
                                    constructed: !0,
                                    optional: !0,
                                    value: [
                                        {
                                            name: 'Certificate.TBSCertificate.version.integer',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.INTEGER,
                                            constructed: !1,
                                            capture: 'certVersion',
                                        },
                                    ],
                                },
                                {
                                    name: 'Certificate.TBSCertificate.serialNumber',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.INTEGER,
                                    constructed: !1,
                                    capture: 'certSerialNumber',
                                },
                                {
                                    name: 'Certificate.TBSCertificate.signature',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    value: [
                                        {
                                            name: 'Certificate.TBSCertificate.signature.algorithm',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.OID,
                                            constructed: !1,
                                            capture: 'certinfoSignatureOid',
                                        },
                                        {
                                            name: 'Certificate.TBSCertificate.signature.parameters',
                                            tagClass: n.Class.UNIVERSAL,
                                            optional: !0,
                                            captureAsn1: 'certinfoSignatureParams',
                                        },
                                    ],
                                },
                                {
                                    name: 'Certificate.TBSCertificate.issuer',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    captureAsn1: 'certIssuer',
                                },
                                {
                                    name: 'Certificate.TBSCertificate.validity',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    value: [
                                        {
                                            name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.UTCTIME,
                                            constructed: !1,
                                            optional: !0,
                                            capture: 'certValidity1UTCTime',
                                        },
                                        {
                                            name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.GENERALIZEDTIME,
                                            constructed: !1,
                                            optional: !0,
                                            capture: 'certValidity2GeneralizedTime',
                                        },
                                        {
                                            name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.UTCTIME,
                                            constructed: !1,
                                            optional: !0,
                                            capture: 'certValidity3UTCTime',
                                        },
                                        {
                                            name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.GENERALIZEDTIME,
                                            constructed: !1,
                                            optional: !0,
                                            capture: 'certValidity4GeneralizedTime',
                                        },
                                    ],
                                },
                                {
                                    name: 'Certificate.TBSCertificate.subject',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    captureAsn1: 'certSubject',
                                },
                                u,
                                {
                                    name: 'Certificate.TBSCertificate.issuerUniqueID',
                                    tagClass: n.Class.CONTEXT_SPECIFIC,
                                    type: 1,
                                    constructed: !0,
                                    optional: !0,
                                    value: [
                                        {
                                            name: 'Certificate.TBSCertificate.issuerUniqueID.id',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.BITSTRING,
                                            constructed: !1,
                                            captureBitStringValue: 'certIssuerUniqueId',
                                        },
                                    ],
                                },
                                {
                                    name: 'Certificate.TBSCertificate.subjectUniqueID',
                                    tagClass: n.Class.CONTEXT_SPECIFIC,
                                    type: 2,
                                    constructed: !0,
                                    optional: !0,
                                    value: [
                                        {
                                            name: 'Certificate.TBSCertificate.subjectUniqueID.id',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.BITSTRING,
                                            constructed: !1,
                                            captureBitStringValue: 'certSubjectUniqueId',
                                        },
                                    ],
                                },
                                {
                                    name: 'Certificate.TBSCertificate.extensions',
                                    tagClass: n.Class.CONTEXT_SPECIFIC,
                                    type: 3,
                                    constructed: !0,
                                    captureAsn1: 'certExtensions',
                                    optional: !0,
                                },
                            ],
                        },
                        {
                            name: 'Certificate.signatureAlgorithm',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'Certificate.signatureAlgorithm.algorithm',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.OID,
                                    constructed: !1,
                                    capture: 'certSignatureOid',
                                },
                                {
                                    name: 'Certificate.TBSCertificate.signature.parameters',
                                    tagClass: n.Class.UNIVERSAL,
                                    optional: !0,
                                    captureAsn1: 'certSignatureParams',
                                },
                            ],
                        },
                        {
                            name: 'Certificate.signatureValue',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.BITSTRING,
                            constructed: !1,
                            captureBitStringValue: 'certSignature',
                        },
                    ],
                },
                d = {
                    name: 'rsapss',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    value: [
                        {
                            name: 'rsapss.hashAlgorithm',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 0,
                            constructed: !0,
                            value: [
                                {
                                    name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Class.SEQUENCE,
                                    constructed: !0,
                                    optional: !0,
                                    value: [
                                        {
                                            name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.OID,
                                            constructed: !1,
                                            capture: 'hashOid',
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            name: 'rsapss.maskGenAlgorithm',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 1,
                            constructed: !0,
                            value: [
                                {
                                    name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Class.SEQUENCE,
                                    constructed: !0,
                                    optional: !0,
                                    value: [
                                        {
                                            name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.OID,
                                            constructed: !1,
                                            capture: 'maskGenOid',
                                        },
                                        {
                                            name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.SEQUENCE,
                                            constructed: !0,
                                            value: [
                                                {
                                                    name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
                                                    tagClass: n.Class.UNIVERSAL,
                                                    type: n.Type.OID,
                                                    constructed: !1,
                                                    capture: 'maskGenHashOid',
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            name: 'rsapss.saltLength',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 2,
                            optional: !0,
                            value: [
                                {
                                    name: 'rsapss.saltLength.saltLength',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Class.INTEGER,
                                    constructed: !1,
                                    capture: 'saltLength',
                                },
                            ],
                        },
                        {
                            name: 'rsapss.trailerField',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 3,
                            optional: !0,
                            value: [
                                {
                                    name: 'rsapss.trailer.trailer',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Class.INTEGER,
                                    constructed: !1,
                                    capture: 'trailer',
                                },
                            ],
                        },
                    ],
                },
                p = {
                    name: 'CertificationRequestInfo',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    captureAsn1: 'certificationRequestInfo',
                    value: [
                        {
                            name: 'CertificationRequestInfo.integer',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.INTEGER,
                            constructed: !1,
                            capture: 'certificationRequestInfoVersion',
                        },
                        {
                            name: 'CertificationRequestInfo.subject',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            captureAsn1: 'certificationRequestInfoSubject',
                        },
                        u,
                        {
                            name: 'CertificationRequestInfo.attributes',
                            tagClass: n.Class.CONTEXT_SPECIFIC,
                            type: 0,
                            constructed: !0,
                            optional: !0,
                            capture: 'certificationRequestInfoAttributes',
                            value: [
                                {
                                    name: 'CertificationRequestInfo.attributes',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.SEQUENCE,
                                    constructed: !0,
                                    value: [
                                        {
                                            name: 'CertificationRequestInfo.attributes.type',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.OID,
                                            constructed: !1,
                                        },
                                        {
                                            name: 'CertificationRequestInfo.attributes.value',
                                            tagClass: n.Class.UNIVERSAL,
                                            type: n.Type.SET,
                                            constructed: !0,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                f = {
                    name: 'CertificationRequest',
                    tagClass: n.Class.UNIVERSAL,
                    type: n.Type.SEQUENCE,
                    constructed: !0,
                    captureAsn1: 'csr',
                    value: [
                        p,
                        {
                            name: 'CertificationRequest.signatureAlgorithm',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.SEQUENCE,
                            constructed: !0,
                            value: [
                                {
                                    name: 'CertificationRequest.signatureAlgorithm.algorithm',
                                    tagClass: n.Class.UNIVERSAL,
                                    type: n.Type.OID,
                                    constructed: !1,
                                    capture: 'csrSignatureOid',
                                },
                                {
                                    name: 'CertificationRequest.signatureAlgorithm.parameters',
                                    tagClass: n.Class.UNIVERSAL,
                                    optional: !0,
                                    captureAsn1: 'csrSignatureParams',
                                },
                            ],
                        },
                        {
                            name: 'CertificationRequest.signature',
                            tagClass: n.Class.UNIVERSAL,
                            type: n.Type.BITSTRING,
                            constructed: !1,
                            captureBitStringValue: 'csrSignature',
                        },
                    ],
                }
            function l(e, t) {
                'string' == typeof t && (t = { shortName: t })
                for (var r, i = null, n = 0; null === i && n < e.attributes.length; ++n)
                    (r = e.attributes[n]),
                        ((t.type && t.type === r.type) ||
                            (t.name && t.name === r.name) ||
                            (t.shortName && t.shortName === r.shortName)) &&
                        (i = r)
                return i
            }
            ; (s.RDNAttributesAsArray = function (e, t) {
                for (var r, i, s, u = [], c = 0; c < e.value.length; ++c) {
                    r = e.value[c]
                    for (var d = 0; d < r.value.length; ++d)
                        (s = {}),
                            (i = r.value[d]),
                            (s.type = n.derToOid(i.value[0].value)),
                            (s.value = i.value[1].value),
                            (s.valueTagClass = i.value[1].type),
                            s.type in o &&
                            ((s.name = o[s.type]),
                                s.name in a && (s.shortName = a[s.name])),
                            t && (t.update(s.type), t.update(s.value)),
                            u.push(s)
                }
                return u
            }),
                (s.CRIAttributesAsArray = function (e) {
                    for (var t = [], r = 0; r < e.length; ++r)
                        for (
                            var i = e[r],
                            u = n.derToOid(i.value[0].value),
                            c = i.value[1].value,
                            d = 0;
                            d < c.length;
                            ++d
                        ) {
                            var p = {}
                            if (
                                ((p.type = u),
                                    (p.value = c[d].value),
                                    (p.valueTagClass = c[d].type),
                                    p.type in o &&
                                    ((p.name = o[p.type]),
                                        p.name in a && (p.shortName = a[p.name])),
                                    p.type === o.extensionRequest)
                            ) {
                                p.extensions = []
                                for (var f = 0; f < p.value.length; ++f)
                                    p.extensions.push(s.certificateExtensionFromAsn1(p.value[f]))
                            }
                            t.push(p)
                        }
                    return t
                })
            var h = function (e, t, r) {
                var i = {}
                if (e !== o['RSASSA-PSS']) return i
                r &&
                    (i = {
                        hash: { algorithmOid: o.sha1 },
                        mgf: { algorithmOid: o.mgf1, hash: { algorithmOid: o.sha1 } },
                        saltLength: 20,
                    })
                var s = {},
                    a = []
                if (!n.validate(t, d, s, a)) {
                    var u = new Error('Cannot read RSASSA-PSS parameter block.')
                    throw ((u.errors = a), u)
                }
                return (
                    void 0 !== s.hashOid &&
                    ((i.hash = i.hash || {}),
                        (i.hash.algorithmOid = n.derToOid(s.hashOid))),
                    void 0 !== s.maskGenOid &&
                    ((i.mgf = i.mgf || {}),
                        (i.mgf.algorithmOid = n.derToOid(s.maskGenOid)),
                        (i.mgf.hash = i.mgf.hash || {}),
                        (i.mgf.hash.algorithmOid = n.derToOid(s.maskGenHashOid))),
                    void 0 !== s.saltLength &&
                    (i.saltLength = s.saltLength.charCodeAt(0)),
                    i
                )
            },
                g = function (e) {
                    switch (o[e.signatureOid]) {
                        case 'sha1WithRSAEncryption':
                        case 'sha1WithRSASignature':
                            return i.md.sha1.create()
                        case 'md5WithRSAEncryption':
                            return i.md.md5.create()
                        case 'sha256WithRSAEncryption':
                        case 'RSASSA-PSS':
                            return i.md.sha256.create()
                        case 'sha384WithRSAEncryption':
                            return i.md.sha384.create()
                        case 'sha512WithRSAEncryption':
                            return i.md.sha512.create()
                        default:
                            var t = new Error(
                                'Could not compute ' +
                                e.type +
                                ' digest. Unknown signature OID.'
                            )
                            throw ((t.signatureOid = e.signatureOid), t)
                    }
                },
                y = function (e) {
                    var t,
                        r = e.certificate
                    switch (r.signatureOid) {
                        case o.sha1WithRSAEncryption:
                        case o.sha1WithRSASignature:
                            break
                        case o['RSASSA-PSS']:
                            var n, s, a
                            if (
                                void 0 ===
                                (n = o[r.signatureParameters.mgf.hash.algorithmOid]) ||
                                void 0 === i.md[n]
                            )
                                throw (
                                    (((a = new Error('Unsupported MGF hash function.')).oid =
                                        r.signatureParameters.mgf.hash.algorithmOid),
                                        (a.name = n),
                                        a)
                                )
                            if (
                                void 0 === (s = o[r.signatureParameters.mgf.algorithmOid]) ||
                                void 0 === i.mgf[s]
                            )
                                throw (
                                    (((a = new Error('Unsupported MGF function.')).oid =
                                        r.signatureParameters.mgf.algorithmOid),
                                        (a.name = s),
                                        a)
                                )
                            if (
                                ((s = i.mgf[s].create(i.md[n].create())),
                                    void 0 === (n = o[r.signatureParameters.hash.algorithmOid]) ||
                                    void 0 === i.md[n])
                            )
                                throw (
                                    (((a = new Error(
                                        'Unsupported RSASSA-PSS hash function.'
                                    )).oid = r.signatureParameters.hash.algorithmOid),
                                        (a.name = n),
                                        a)
                                )
                            t = i.pss.create(
                                i.md[n].create(),
                                s,
                                r.signatureParameters.saltLength
                            )
                    }
                    return r.publicKey.verify(e.md.digest().getBytes(), e.signature, t)
                }
            function m(e) {
                for (
                    var t,
                    r,
                    s = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, []),
                    o = e.attributes,
                    a = 0;
                    a < o.length;
                    ++a
                ) {
                    var u = (t = o[a]).value,
                        c = n.Type.PRINTABLESTRING
                    'valueTagClass' in t &&
                        (c = t.valueTagClass) === n.Type.UTF8 &&
                        (u = i.util.encodeUtf8(u)),
                        (r = n.create(n.Class.UNIVERSAL, n.Type.SET, !0, [
                            n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.OID,
                                    !1,
                                    n.oidToDer(t.type).getBytes()
                                ),
                                n.create(n.Class.UNIVERSAL, c, !1, u),
                            ]),
                        ])),
                        s.value.push(r)
                }
                return s
            }
            function v(e) {
                for (var t, r = 0; r < e.length; ++r) {
                    if (
                        (void 0 === (t = e[r]).name &&
                            (t.type && t.type in s.oids
                                ? (t.name = s.oids[t.type])
                                : t.shortName &&
                                t.shortName in a &&
                                (t.name = s.oids[a[t.shortName]])),
                            void 0 === t.type)
                    ) {
                        if (!t.name || !(t.name in s.oids))
                            throw (
                                (((u = new Error('Attribute type not specified.')).attribute =
                                    t),
                                    u)
                            )
                        t.type = s.oids[t.name]
                    }
                    if (
                        (void 0 === t.shortName &&
                            t.name &&
                            t.name in a &&
                            (t.shortName = a[t.name]),
                            t.type === o.extensionRequest &&
                            ((t.valueConstructed = !0),
                                (t.valueTagClass = n.Type.SEQUENCE),
                                !t.value && t.extensions))
                    ) {
                        t.value = []
                        for (var i = 0; i < t.extensions.length; ++i)
                            t.value.push(s.certificateExtensionToAsn1(b(t.extensions[i])))
                    }
                    var u
                    if (void 0 === t.value)
                        throw (
                            (((u = new Error('Attribute value not specified.')).attribute =
                                t),
                                u)
                        )
                }
            }
            function b(e, t) {
                if (
                    ((t = t || {}),
                        void 0 === e.name &&
                        e.id &&
                        e.id in s.oids &&
                        (e.name = s.oids[e.id]),
                        void 0 === e.id)
                ) {
                    if (!e.name || !(e.name in s.oids))
                        throw (
                            (((E = new Error('Extension ID not specified.')).extension = e),
                                E)
                        )
                    e.id = s.oids[e.name]
                }
                if (void 0 !== e.value) return e
                if ('keyUsage' === e.name) {
                    var r = 0,
                        a = 0,
                        u = 0
                    e.digitalSignature && ((a |= 128), (r = 7)),
                        e.nonRepudiation && ((a |= 64), (r = 6)),
                        e.keyEncipherment && ((a |= 32), (r = 5)),
                        e.dataEncipherment && ((a |= 16), (r = 4)),
                        e.keyAgreement && ((a |= 8), (r = 3)),
                        e.keyCertSign && ((a |= 4), (r = 2)),
                        e.cRLSign && ((a |= 2), (r = 1)),
                        e.encipherOnly && ((a |= 1), (r = 0)),
                        e.decipherOnly && ((u |= 128), (r = 7))
                    var c = String.fromCharCode(r)
                    0 !== u
                        ? (c += String.fromCharCode(a) + String.fromCharCode(u))
                        : 0 !== a && (c += String.fromCharCode(a)),
                        (e.value = n.create(n.Class.UNIVERSAL, n.Type.BITSTRING, !1, c))
                } else if ('basicConstraints' === e.name)
                    (e.value = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])),
                        e.cA &&
                        e.value.value.push(
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.BOOLEAN,
                                !1,
                                String.fromCharCode(255)
                            )
                        ),
                        'pathLenConstraint' in e &&
                        e.value.value.push(
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.INTEGER,
                                !1,
                                n.integerToDer(e.pathLenConstraint).getBytes()
                            )
                        )
                else if ('extKeyUsage' === e.name) {
                    e.value = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    var d = e.value.value
                    for (var p in e)
                        !0 === e[p] &&
                            (p in o
                                ? d.push(
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(o[p]).getBytes()
                                    )
                                )
                                : -1 !== p.indexOf('.') &&
                                d.push(
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(p).getBytes()
                                    )
                                ))
                } else if ('nsCertType' === e.name) {
                    ; (r = 0), (a = 0)
                    e.client && ((a |= 128), (r = 7)),
                        e.server && ((a |= 64), (r = 6)),
                        e.email && ((a |= 32), (r = 5)),
                        e.objsign && ((a |= 16), (r = 4)),
                        e.reserved && ((a |= 8), (r = 3)),
                        e.sslCA && ((a |= 4), (r = 2)),
                        e.emailCA && ((a |= 2), (r = 1)),
                        e.objCA && ((a |= 1), (r = 0))
                    c = String.fromCharCode(r)
                    0 !== a && (c += String.fromCharCode(a)),
                        (e.value = n.create(n.Class.UNIVERSAL, n.Type.BITSTRING, !1, c))
                } else if ('subjectAltName' === e.name || 'issuerAltName' === e.name) {
                    e.value = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    for (var f = 0; f < e.altNames.length; ++f) {
                        c = (v = e.altNames[f]).value
                        if (7 === v.type && v.ip) {
                            if (null === (c = i.util.bytesFromIP(v.ip)))
                                throw (
                                    (((E = new Error(
                                        'Extension "ip" value is not a valid IPv4 or IPv6 address.'
                                    )).extension = e),
                                        E)
                                )
                        } else
                            8 === v.type &&
                                (c = v.oid ? n.oidToDer(n.oidToDer(v.oid)) : n.oidToDer(c))
                        e.value.value.push(
                            n.create(n.Class.CONTEXT_SPECIFIC, v.type, !1, c)
                        )
                    }
                } else if ('nsComment' === e.name && t.cert) {
                    if (
                        !/^[\x00-\x7F]*$/.test(e.comment) ||
                        e.comment.length < 1 ||
                        e.comment.length > 128
                    )
                        throw new Error('Invalid "nsComment" content.')
                    e.value = n.create(n.Class.UNIVERSAL, n.Type.IA5STRING, !1, e.comment)
                } else if ('subjectKeyIdentifier' === e.name && t.cert) {
                    var l = t.cert.generateSubjectKeyIdentifier()
                        ; (e.subjectKeyIdentifier = l.toHex()),
                            (e.value = n.create(
                                n.Class.UNIVERSAL,
                                n.Type.OCTETSTRING,
                                !1,
                                l.getBytes()
                            ))
                } else if ('authorityKeyIdentifier' === e.name && t.cert) {
                    e.value = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    d = e.value.value
                    if (e.keyIdentifier) {
                        var h =
                            !0 === e.keyIdentifier
                                ? t.cert.generateSubjectKeyIdentifier().getBytes()
                                : e.keyIdentifier
                        d.push(n.create(n.Class.CONTEXT_SPECIFIC, 0, !1, h))
                    }
                    if (e.authorityCertIssuer) {
                        var g = [
                            n.create(n.Class.CONTEXT_SPECIFIC, 4, !0, [
                                m(
                                    !0 === e.authorityCertIssuer
                                        ? t.cert.issuer
                                        : e.authorityCertIssuer
                                ),
                            ]),
                        ]
                        d.push(n.create(n.Class.CONTEXT_SPECIFIC, 1, !0, g))
                    }
                    if (e.serialNumber) {
                        var y = i.util.hexToBytes(
                            !0 === e.serialNumber ? t.cert.serialNumber : e.serialNumber
                        )
                        d.push(n.create(n.Class.CONTEXT_SPECIFIC, 2, !1, y))
                    }
                } else if ('cRLDistributionPoints' === e.name) {
                    e.value = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    d = e.value.value
                    var v,
                        b = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, []),
                        w = n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [])
                    for (f = 0; f < e.altNames.length; ++f) {
                        c = (v = e.altNames[f]).value
                        if (7 === v.type && v.ip) {
                            if (null === (c = i.util.bytesFromIP(v.ip)))
                                throw (
                                    (((E = new Error(
                                        'Extension "ip" value is not a valid IPv4 or IPv6 address.'
                                    )).extension = e),
                                        E)
                                )
                        } else
                            8 === v.type &&
                                (c = v.oid ? n.oidToDer(n.oidToDer(v.oid)) : n.oidToDer(c))
                        w.value.push(n.create(n.Class.CONTEXT_SPECIFIC, v.type, !1, c))
                    }
                    b.value.push(n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [w])),
                        d.push(b)
                }
                var E
                if (void 0 === e.value)
                    throw (
                        (((E = new Error('Extension value not specified.')).extension = e),
                            E)
                    )
                return e
            }
            function w(e, t) {
                if (e === o['RSASSA-PSS']) {
                    var r = []
                    return (
                        void 0 !== t.hash.algorithmOid &&
                        r.push(
                            n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(t.hash.algorithmOid).getBytes()
                                    ),
                                    n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                                ]),
                            ])
                        ),
                        void 0 !== t.mgf.algorithmOid &&
                        r.push(
                            n.create(n.Class.CONTEXT_SPECIFIC, 1, !0, [
                                n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                    n.create(
                                        n.Class.UNIVERSAL,
                                        n.Type.OID,
                                        !1,
                                        n.oidToDer(t.mgf.algorithmOid).getBytes()
                                    ),
                                    n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                                        n.create(
                                            n.Class.UNIVERSAL,
                                            n.Type.OID,
                                            !1,
                                            n.oidToDer(t.mgf.hash.algorithmOid).getBytes()
                                        ),
                                        n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, ''),
                                    ]),
                                ]),
                            ])
                        ),
                        void 0 !== t.saltLength &&
                        r.push(
                            n.create(n.Class.CONTEXT_SPECIFIC, 2, !0, [
                                n.create(
                                    n.Class.UNIVERSAL,
                                    n.Type.INTEGER,
                                    !1,
                                    n.integerToDer(t.saltLength).getBytes()
                                ),
                            ])
                        ),
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, r)
                    )
                }
                return n.create(n.Class.UNIVERSAL, n.Type.NULL, !1, '')
            }
            function E(e) {
                var t = n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [])
                if (0 === e.attributes.length) return t
                for (var r = e.attributes, s = 0; s < r.length; ++s) {
                    var o = r[s],
                        a = o.value,
                        u = n.Type.UTF8
                    'valueTagClass' in o && (u = o.valueTagClass),
                        u === n.Type.UTF8 && (a = i.util.encodeUtf8(a))
                    var c = !1
                    'valueConstructed' in o && (c = o.valueConstructed)
                    var d = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.OID,
                            !1,
                            n.oidToDer(o.type).getBytes()
                        ),
                        n.create(n.Class.UNIVERSAL, n.Type.SET, !0, [
                            n.create(n.Class.UNIVERSAL, u, c, a),
                        ]),
                    ])
                    t.value.push(d)
                }
                return t
            }
            ; (s.certificateFromPem = function (e, t, r) {
                var o = i.pem.decode(e)[0]
                if (
                    'CERTIFICATE' !== o.type &&
                    'X509 CERTIFICATE' !== o.type &&
                    'TRUSTED CERTIFICATE' !== o.type
                ) {
                    var a = new Error(
                        'Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".'
                    )
                    throw ((a.headerType = o.type), a)
                }
                if (o.procType && 'ENCRYPTED' === o.procType.type)
                    throw new Error(
                        'Could not convert certificate from PEM; PEM is encrypted.'
                    )
                var u = n.fromDer(o.body, r)
                return s.certificateFromAsn1(u, t)
            }),
                (s.certificateToPem = function (e, t) {
                    var r = {
                        type: 'CERTIFICATE',
                        body: n.toDer(s.certificateToAsn1(e)).getBytes(),
                    }
                    return i.pem.encode(r, { maxline: t })
                }),
                (s.publicKeyFromPem = function (e) {
                    var t = i.pem.decode(e)[0]
                    if ('PUBLIC KEY' !== t.type && 'RSA PUBLIC KEY' !== t.type) {
                        var r = new Error(
                            'Could not convert public key from PEM; PEM header type is not "PUBLIC KEY" or "RSA PUBLIC KEY".'
                        )
                        throw ((r.headerType = t.type), r)
                    }
                    if (t.procType && 'ENCRYPTED' === t.procType.type)
                        throw new Error(
                            'Could not convert public key from PEM; PEM is encrypted.'
                        )
                    var o = n.fromDer(t.body)
                    return s.publicKeyFromAsn1(o)
                }),
                (s.publicKeyToPem = function (e, t) {
                    var r = {
                        type: 'PUBLIC KEY',
                        body: n.toDer(s.publicKeyToAsn1(e)).getBytes(),
                    }
                    return i.pem.encode(r, { maxline: t })
                }),
                (s.publicKeyToRSAPublicKeyPem = function (e, t) {
                    var r = {
                        type: 'RSA PUBLIC KEY',
                        body: n.toDer(s.publicKeyToRSAPublicKey(e)).getBytes(),
                    }
                    return i.pem.encode(r, { maxline: t })
                }),
                (s.getPublicKeyFingerprint = function (e, t) {
                    var r,
                        o = (t = t || {}).md || i.md.sha1.create()
                    switch (t.type || 'RSAPublicKey') {
                        case 'RSAPublicKey':
                            r = n.toDer(s.publicKeyToRSAPublicKey(e)).getBytes()
                            break
                        case 'SubjectPublicKeyInfo':
                            r = n.toDer(s.publicKeyToAsn1(e)).getBytes()
                            break
                        default:
                            throw new Error('Unknown fingerprint type "' + t.type + '".')
                    }
                    o.start(), o.update(r)
                    var a = o.digest()
                    if ('hex' === t.encoding) {
                        var u = a.toHex()
                        return t.delimiter ? u.match(/.{2}/g).join(t.delimiter) : u
                    }
                    if ('binary' === t.encoding) return a.getBytes()
                    if (t.encoding)
                        throw new Error('Unknown encoding "' + t.encoding + '".')
                    return a
                }),
                (s.certificationRequestFromPem = function (e, t, r) {
                    var o = i.pem.decode(e)[0]
                    if ('CERTIFICATE REQUEST' !== o.type) {
                        var a = new Error(
                            'Could not convert certification request from PEM; PEM header type is not "CERTIFICATE REQUEST".'
                        )
                        throw ((a.headerType = o.type), a)
                    }
                    if (o.procType && 'ENCRYPTED' === o.procType.type)
                        throw new Error(
                            'Could not convert certification request from PEM; PEM is encrypted.'
                        )
                    var u = n.fromDer(o.body, r)
                    return s.certificationRequestFromAsn1(u, t)
                }),
                (s.certificationRequestToPem = function (e, t) {
                    var r = {
                        type: 'CERTIFICATE REQUEST',
                        body: n.toDer(s.certificationRequestToAsn1(e)).getBytes(),
                    }
                    return i.pem.encode(r, { maxline: t })
                }),
                (s.createCertificate = function () {
                    var e = {
                        version: 2,
                        serialNumber: '00',
                        signatureOid: null,
                        signature: null,
                        siginfo: {},
                    }
                    return (
                        (e.siginfo.algorithmOid = null),
                        (e.validity = {}),
                        (e.validity.notBefore = new Date()),
                        (e.validity.notAfter = new Date()),
                        (e.issuer = {}),
                        (e.issuer.getField = function (t) {
                            return l(e.issuer, t)
                        }),
                        (e.issuer.addField = function (t) {
                            v([t]), e.issuer.attributes.push(t)
                        }),
                        (e.issuer.attributes = []),
                        (e.issuer.hash = null),
                        (e.subject = {}),
                        (e.subject.getField = function (t) {
                            return l(e.subject, t)
                        }),
                        (e.subject.addField = function (t) {
                            v([t]), e.subject.attributes.push(t)
                        }),
                        (e.subject.attributes = []),
                        (e.subject.hash = null),
                        (e.extensions = []),
                        (e.publicKey = null),
                        (e.md = null),
                        (e.setSubject = function (t, r) {
                            v(t),
                                (e.subject.attributes = t),
                                delete e.subject.uniqueId,
                                r && (e.subject.uniqueId = r),
                                (e.subject.hash = null)
                        }),
                        (e.setIssuer = function (t, r) {
                            v(t),
                                (e.issuer.attributes = t),
                                delete e.issuer.uniqueId,
                                r && (e.issuer.uniqueId = r),
                                (e.issuer.hash = null)
                        }),
                        (e.setExtensions = function (t) {
                            for (var r = 0; r < t.length; ++r) b(t[r], { cert: e })
                            e.extensions = t
                        }),
                        (e.getExtension = function (t) {
                            'string' == typeof t && (t = { name: t })
                            for (
                                var r, i = null, n = 0;
                                null === i && n < e.extensions.length;
                                ++n
                            )
                                (r = e.extensions[n]),
                                    ((t.id && r.id === t.id) || (t.name && r.name === t.name)) &&
                                    (i = r)
                            return i
                        }),
                        (e.sign = function (t, r) {
                            e.md = r || i.md.sha1.create()
                            var a = o[e.md.algorithm + 'WithRSAEncryption']
                            if (!a) {
                                var u = new Error(
                                    'Could not compute certificate digest. Unknown message digest algorithm OID.'
                                )
                                throw ((u.algorithm = e.md.algorithm), u)
                            }
                            ; (e.signatureOid = e.siginfo.algorithmOid = a),
                                (e.tbsCertificate = s.getTBSCertificate(e))
                            var c = n.toDer(e.tbsCertificate)
                            e.md.update(c.getBytes()), (e.signature = t.sign(e.md))
                        }),
                        (e.verify = function (t) {
                            var r = !1
                            if (!e.issued(t)) {
                                var i = t.issuer,
                                    o = e.subject,
                                    a = new Error(
                                        "The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject."
                                    )
                                throw (
                                    ((a.expectedIssuer = o.attributes),
                                        (a.actualIssuer = i.attributes),
                                        a)
                                )
                            }
                            var u = t.md
                            if (null === u) {
                                u = g({ signatureOid: t.signatureOid, type: 'certificate' })
                                var c = t.tbsCertificate || s.getTBSCertificate(t),
                                    d = n.toDer(c)
                                u.update(d.getBytes())
                            }
                            return (
                                null !== u &&
                                (r = y({ certificate: e, md: u, signature: t.signature })),
                                r
                            )
                        }),
                        (e.isIssuer = function (t) {
                            var r = !1,
                                i = e.issuer,
                                n = t.subject
                            if (i.hash && n.hash) r = i.hash === n.hash
                            else if (i.attributes.length === n.attributes.length) {
                                var s, o
                                r = !0
                                for (var a = 0; r && a < i.attributes.length; ++a)
                                    (s = i.attributes[a]),
                                        (o = n.attributes[a]),
                                        (s.type === o.type && s.value === o.value) || (r = !1)
                            }
                            return r
                        }),
                        (e.issued = function (t) {
                            return t.isIssuer(e)
                        }),
                        (e.generateSubjectKeyIdentifier = function () {
                            return s.getPublicKeyFingerprint(e.publicKey, {
                                type: 'RSAPublicKey',
                            })
                        }),
                        (e.verifySubjectKeyIdentifier = function () {
                            for (
                                var t = o.subjectKeyIdentifier, r = 0;
                                r < e.extensions.length;
                                ++r
                            ) {
                                var n = e.extensions[r]
                                if (n.id === t) {
                                    var s = e.generateSubjectKeyIdentifier().getBytes()
                                    return i.util.hexToBytes(n.subjectKeyIdentifier) === s
                                }
                            }
                            return !1
                        }),
                        e
                    )
                }),
                (s.certificateFromAsn1 = function (e, t) {
                    var r = {},
                        o = []
                    if (!n.validate(e, c, r, o)) {
                        var a = new Error(
                            'Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate.'
                        )
                        throw ((a.errors = o), a)
                    }
                    if (n.derToOid(r.publicKeyOid) !== s.oids.rsaEncryption)
                        throw new Error('Cannot read public key. OID is not RSA.')
                    var u = s.createCertificate()
                    u.version = r.certVersion ? r.certVersion.charCodeAt(0) : 0
                    var d = i.util.createBuffer(r.certSerialNumber)
                        ; (u.serialNumber = d.toHex()),
                            (u.signatureOid = i.asn1.derToOid(r.certSignatureOid)),
                            (u.signatureParameters = h(
                                u.signatureOid,
                                r.certSignatureParams,
                                !0
                            )),
                            (u.siginfo.algorithmOid = i.asn1.derToOid(r.certinfoSignatureOid)),
                            (u.siginfo.parameters = h(
                                u.siginfo.algorithmOid,
                                r.certinfoSignatureParams,
                                !1
                            )),
                            (u.signature = r.certSignature)
                    var p = []
                    if (
                        (void 0 !== r.certValidity1UTCTime &&
                            p.push(n.utcTimeToDate(r.certValidity1UTCTime)),
                            void 0 !== r.certValidity2GeneralizedTime &&
                            p.push(n.generalizedTimeToDate(r.certValidity2GeneralizedTime)),
                            void 0 !== r.certValidity3UTCTime &&
                            p.push(n.utcTimeToDate(r.certValidity3UTCTime)),
                            void 0 !== r.certValidity4GeneralizedTime &&
                            p.push(n.generalizedTimeToDate(r.certValidity4GeneralizedTime)),
                            p.length > 2)
                    )
                        throw new Error(
                            'Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.'
                        )
                    if (p.length < 2)
                        throw new Error(
                            'Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.'
                        )
                    if (
                        ((u.validity.notBefore = p[0]),
                            (u.validity.notAfter = p[1]),
                            (u.tbsCertificate = r.tbsCertificate),
                            t)
                    ) {
                        u.md = g({ signatureOid: u.signatureOid, type: 'certificate' })
                        var f = n.toDer(u.tbsCertificate)
                        u.md.update(f.getBytes())
                    }
                    var y = i.md.sha1.create(),
                        m = n.toDer(r.certIssuer)
                    y.update(m.getBytes()),
                        (u.issuer.getField = function (e) {
                            return l(u.issuer, e)
                        }),
                        (u.issuer.addField = function (e) {
                            v([e]), u.issuer.attributes.push(e)
                        }),
                        (u.issuer.attributes = s.RDNAttributesAsArray(r.certIssuer)),
                        r.certIssuerUniqueId && (u.issuer.uniqueId = r.certIssuerUniqueId),
                        (u.issuer.hash = y.digest().toHex())
                    var b = i.md.sha1.create(),
                        w = n.toDer(r.certSubject)
                    return (
                        b.update(w.getBytes()),
                        (u.subject.getField = function (e) {
                            return l(u.subject, e)
                        }),
                        (u.subject.addField = function (e) {
                            v([e]), u.subject.attributes.push(e)
                        }),
                        (u.subject.attributes = s.RDNAttributesAsArray(r.certSubject)),
                        r.certSubjectUniqueId &&
                        (u.subject.uniqueId = r.certSubjectUniqueId),
                        (u.subject.hash = b.digest().toHex()),
                        r.certExtensions
                            ? (u.extensions = s.certificateExtensionsFromAsn1(
                                r.certExtensions
                            ))
                            : (u.extensions = []),
                        (u.publicKey = s.publicKeyFromAsn1(r.subjectPublicKeyInfo)),
                        u
                    )
                }),
                (s.certificateExtensionsFromAsn1 = function (e) {
                    for (var t = [], r = 0; r < e.value.length; ++r)
                        for (var i = e.value[r], n = 0; n < i.value.length; ++n)
                            t.push(s.certificateExtensionFromAsn1(i.value[n]))
                    return t
                }),
                (s.certificateExtensionFromAsn1 = function (e) {
                    var t = {}
                    if (
                        ((t.id = n.derToOid(e.value[0].value)),
                            (t.critical = !1),
                            e.value[1].type === n.Type.BOOLEAN
                                ? ((t.critical = 0 !== e.value[1].value.charCodeAt(0)),
                                    (t.value = e.value[2].value))
                                : (t.value = e.value[1].value),
                            t.id in o)
                    )
                        if (((t.name = o[t.id]), 'keyUsage' === t.name)) {
                            var r = 0,
                                s = 0
                                ; (u = n.fromDer(t.value)).value.length > 1 &&
                                    ((r = u.value.charCodeAt(1)),
                                        (s = u.value.length > 2 ? u.value.charCodeAt(2) : 0)),
                                    (t.digitalSignature = 128 == (128 & r)),
                                    (t.nonRepudiation = 64 == (64 & r)),
                                    (t.keyEncipherment = 32 == (32 & r)),
                                    (t.dataEncipherment = 16 == (16 & r)),
                                    (t.keyAgreement = 8 == (8 & r)),
                                    (t.keyCertSign = 4 == (4 & r)),
                                    (t.cRLSign = 2 == (2 & r)),
                                    (t.encipherOnly = 1 == (1 & r)),
                                    (t.decipherOnly = 128 == (128 & s))
                        } else if ('basicConstraints' === t.name) {
                            ; (u = n.fromDer(t.value)).value.length > 0 &&
                                u.value[0].type === n.Type.BOOLEAN
                                ? (t.cA = 0 !== u.value[0].value.charCodeAt(0))
                                : (t.cA = !1)
                            var a = null
                            u.value.length > 0 && u.value[0].type === n.Type.INTEGER
                                ? (a = u.value[0].value)
                                : u.value.length > 1 && (a = u.value[1].value),
                                null !== a && (t.pathLenConstraint = n.derToInteger(a))
                        } else if ('extKeyUsage' === t.name)
                            for (var u = n.fromDer(t.value), c = 0; c < u.value.length; ++c) {
                                var d = n.derToOid(u.value[c].value)
                                d in o ? (t[o[d]] = !0) : (t[d] = !0)
                            }
                        else if ('nsCertType' === t.name) {
                            r = 0
                                ; (u = n.fromDer(t.value)).value.length > 1 &&
                                    (r = u.value.charCodeAt(1)),
                                    (t.client = 128 == (128 & r)),
                                    (t.server = 64 == (64 & r)),
                                    (t.email = 32 == (32 & r)),
                                    (t.objsign = 16 == (16 & r)),
                                    (t.reserved = 8 == (8 & r)),
                                    (t.sslCA = 4 == (4 & r)),
                                    (t.emailCA = 2 == (2 & r)),
                                    (t.objCA = 1 == (1 & r))
                        } else if (
                            'subjectAltName' === t.name ||
                            'issuerAltName' === t.name
                        ) {
                            var p
                            t.altNames = []
                            u = n.fromDer(t.value)
                            for (var f = 0; f < u.value.length; ++f) {
                                var l = { type: (p = u.value[f]).type, value: p.value }
                                switch ((t.altNames.push(l), p.type)) {
                                    case 1:
                                    case 2:
                                    case 6:
                                        break
                                    case 7:
                                        l.ip = i.util.bytesToIP(p.value)
                                        break
                                    case 8:
                                        l.oid = n.derToOid(p.value)
                                }
                            }
                        } else if ('subjectKeyIdentifier' === t.name) {
                            u = n.fromDer(t.value)
                            t.subjectKeyIdentifier = i.util.bytesToHex(u.value)
                        }
                    return t
                }),
                (s.certificationRequestFromAsn1 = function (e, t) {
                    var r = {},
                        o = []
                    if (!n.validate(e, f, r, o)) {
                        var a = new Error(
                            'Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest.'
                        )
                        throw ((a.errors = o), a)
                    }
                    if (n.derToOid(r.publicKeyOid) !== s.oids.rsaEncryption)
                        throw new Error('Cannot read public key. OID is not RSA.')
                    var u = s.createCertificationRequest()
                    if (
                        ((u.version = r.csrVersion ? r.csrVersion.charCodeAt(0) : 0),
                            (u.signatureOid = i.asn1.derToOid(r.csrSignatureOid)),
                            (u.signatureParameters = h(
                                u.signatureOid,
                                r.csrSignatureParams,
                                !0
                            )),
                            (u.siginfo.algorithmOid = i.asn1.derToOid(r.csrSignatureOid)),
                            (u.siginfo.parameters = h(
                                u.siginfo.algorithmOid,
                                r.csrSignatureParams,
                                !1
                            )),
                            (u.signature = r.csrSignature),
                            (u.certificationRequestInfo = r.certificationRequestInfo),
                            t)
                    ) {
                        u.md = g({
                            signatureOid: u.signatureOid,
                            type: 'certification request',
                        })
                        var c = n.toDer(u.certificationRequestInfo)
                        u.md.update(c.getBytes())
                    }
                    var d = i.md.sha1.create()
                    return (
                        (u.subject.getField = function (e) {
                            return l(u.subject, e)
                        }),
                        (u.subject.addField = function (e) {
                            v([e]), u.subject.attributes.push(e)
                        }),
                        (u.subject.attributes = s.RDNAttributesAsArray(
                            r.certificationRequestInfoSubject,
                            d
                        )),
                        (u.subject.hash = d.digest().toHex()),
                        (u.publicKey = s.publicKeyFromAsn1(r.subjectPublicKeyInfo)),
                        (u.getAttribute = function (e) {
                            return l(u, e)
                        }),
                        (u.addAttribute = function (e) {
                            v([e]), u.attributes.push(e)
                        }),
                        (u.attributes = s.CRIAttributesAsArray(
                            r.certificationRequestInfoAttributes || []
                        )),
                        u
                    )
                }),
                (s.createCertificationRequest = function () {
                    var e = {
                        version: 0,
                        signatureOid: null,
                        signature: null,
                        siginfo: {},
                    }
                    return (
                        (e.siginfo.algorithmOid = null),
                        (e.subject = {}),
                        (e.subject.getField = function (t) {
                            return l(e.subject, t)
                        }),
                        (e.subject.addField = function (t) {
                            v([t]), e.subject.attributes.push(t)
                        }),
                        (e.subject.attributes = []),
                        (e.subject.hash = null),
                        (e.publicKey = null),
                        (e.attributes = []),
                        (e.getAttribute = function (t) {
                            return l(e, t)
                        }),
                        (e.addAttribute = function (t) {
                            v([t]), e.attributes.push(t)
                        }),
                        (e.md = null),
                        (e.setSubject = function (t) {
                            v(t), (e.subject.attributes = t), (e.subject.hash = null)
                        }),
                        (e.setAttributes = function (t) {
                            v(t), (e.attributes = t)
                        }),
                        (e.sign = function (t, r) {
                            e.md = r || i.md.sha1.create()
                            var a = o[e.md.algorithm + 'WithRSAEncryption']
                            if (!a) {
                                var u = new Error(
                                    'Could not compute certification request digest. Unknown message digest algorithm OID.'
                                )
                                throw ((u.algorithm = e.md.algorithm), u)
                            }
                            ; (e.signatureOid = e.siginfo.algorithmOid = a),
                                (e.certificationRequestInfo = s.getCertificationRequestInfo(e))
                            var c = n.toDer(e.certificationRequestInfo)
                            e.md.update(c.getBytes()), (e.signature = t.sign(e.md))
                        }),
                        (e.verify = function () {
                            var t = !1,
                                r = e.md
                            if (null === r) {
                                r = g({
                                    signatureOid: e.signatureOid,
                                    type: 'certification request',
                                })
                                var i =
                                    e.certificationRequestInfo ||
                                    s.getCertificationRequestInfo(e),
                                    o = n.toDer(i)
                                r.update(o.getBytes())
                            }
                            return (
                                null !== r &&
                                (t = y({ certificate: e, md: r, signature: e.signature })),
                                t
                            )
                        }),
                        e
                    )
                })
            var I = new Date('1950-01-01T00:00:00Z'),
                C = new Date('2050-01-01T00:00:00Z')
            function S(e) {
                return e >= I && e < C
                    ? n.create(n.Class.UNIVERSAL, n.Type.UTCTIME, !1, n.dateToUtcTime(e))
                    : n.create(
                        n.Class.UNIVERSAL,
                        n.Type.GENERALIZEDTIME,
                        !1,
                        n.dateToGeneralizedTime(e)
                    )
            }
            ; (s.getTBSCertificate = function (e) {
                var t = S(e.validity.notBefore),
                    r = S(e.validity.notAfter),
                    o = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        n.create(n.Class.CONTEXT_SPECIFIC, 0, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.INTEGER,
                                !1,
                                n.integerToDer(e.version).getBytes()
                            ),
                        ]),
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.INTEGER,
                            !1,
                            i.util.hexToBytes(e.serialNumber)
                        ),
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.OID,
                                !1,
                                n.oidToDer(e.siginfo.algorithmOid).getBytes()
                            ),
                            w(e.siginfo.algorithmOid, e.siginfo.parameters),
                        ]),
                        m(e.issuer),
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [t, r]),
                        m(e.subject),
                        s.publicKeyToAsn1(e.publicKey),
                    ])
                return (
                    e.issuer.uniqueId &&
                    o.value.push(
                        n.create(n.Class.CONTEXT_SPECIFIC, 1, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.BITSTRING,
                                !1,
                                String.fromCharCode(0) + e.issuer.uniqueId
                            ),
                        ])
                    ),
                    e.subject.uniqueId &&
                    o.value.push(
                        n.create(n.Class.CONTEXT_SPECIFIC, 2, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.BITSTRING,
                                !1,
                                String.fromCharCode(0) + e.subject.uniqueId
                            ),
                        ])
                    ),
                    e.extensions.length > 0 &&
                    o.value.push(s.certificateExtensionsToAsn1(e.extensions)),
                    o
                )
            }),
                (s.getCertificationRequestInfo = function (e) {
                    return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.INTEGER,
                            !1,
                            n.integerToDer(e.version).getBytes()
                        ),
                        m(e.subject),
                        s.publicKeyToAsn1(e.publicKey),
                        E(e),
                    ])
                }),
                (s.distinguishedNameToAsn1 = function (e) {
                    return m(e)
                }),
                (s.certificateToAsn1 = function (e) {
                    var t = e.tbsCertificate || s.getTBSCertificate(e)
                    return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        t,
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.OID,
                                !1,
                                n.oidToDer(e.signatureOid).getBytes()
                            ),
                            w(e.signatureOid, e.signatureParameters),
                        ]),
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.BITSTRING,
                            !1,
                            String.fromCharCode(0) + e.signature
                        ),
                    ])
                }),
                (s.certificateExtensionsToAsn1 = function (e) {
                    var t = n.create(n.Class.CONTEXT_SPECIFIC, 3, !0, []),
                        r = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    t.value.push(r)
                    for (var i = 0; i < e.length; ++i)
                        r.value.push(s.certificateExtensionToAsn1(e[i]))
                    return t
                }),
                (s.certificateExtensionToAsn1 = function (e) {
                    var t = n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [])
                    t.value.push(
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.OID,
                            !1,
                            n.oidToDer(e.id).getBytes()
                        )
                    ),
                        e.critical &&
                        t.value.push(
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.BOOLEAN,
                                !1,
                                String.fromCharCode(255)
                            )
                        )
                    var r = e.value
                    return (
                        'string' != typeof e.value && (r = n.toDer(r).getBytes()),
                        t.value.push(
                            n.create(n.Class.UNIVERSAL, n.Type.OCTETSTRING, !1, r)
                        ),
                        t
                    )
                }),
                (s.certificationRequestToAsn1 = function (e) {
                    var t = e.certificationRequestInfo || s.getCertificationRequestInfo(e)
                    return n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                        t,
                        n.create(n.Class.UNIVERSAL, n.Type.SEQUENCE, !0, [
                            n.create(
                                n.Class.UNIVERSAL,
                                n.Type.OID,
                                !1,
                                n.oidToDer(e.signatureOid).getBytes()
                            ),
                            w(e.signatureOid, e.signatureParameters),
                        ]),
                        n.create(
                            n.Class.UNIVERSAL,
                            n.Type.BITSTRING,
                            !1,
                            String.fromCharCode(0) + e.signature
                        ),
                    ])
                }),
                (s.createCaStore = function (e) {
                    var t = { certs: {} }
                    function r(e) {
                        return o(e), t.certs[e.hash] || null
                    }
                    function o(e) {
                        if (!e.hash) {
                            var t = i.md.sha1.create()
                                ; (e.attributes = s.RDNAttributesAsArray(m(e), t)),
                                    (e.hash = t.digest().toHex())
                        }
                    }
                    if (
                        ((t.getIssuer = function (e) {
                            return r(e.issuer)
                        }),
                            (t.addCertificate = function (e) {
                                if (
                                    ('string' == typeof e && (e = i.pki.certificateFromPem(e)),
                                        o(e.subject),
                                        !t.hasCertificate(e))
                                )
                                    if (e.subject.hash in t.certs) {
                                        var r = t.certs[e.subject.hash]
                                        i.util.isArray(r) || (r = [r]),
                                            r.push(e),
                                            (t.certs[e.subject.hash] = r)
                                    } else t.certs[e.subject.hash] = e
                            }),
                            (t.hasCertificate = function (e) {
                                'string' == typeof e && (e = i.pki.certificateFromPem(e))
                                var t = r(e.subject)
                                if (!t) return !1
                                i.util.isArray(t) || (t = [t])
                                for (
                                    var o = n.toDer(s.certificateToAsn1(e)).getBytes(), a = 0;
                                    a < t.length;
                                    ++a
                                ) {
                                    if (o === n.toDer(s.certificateToAsn1(t[a])).getBytes())
                                        return !0
                                }
                                return !1
                            }),
                            (t.listAllCertificates = function () {
                                var e = []
                                for (var r in t.certs)
                                    if (t.certs.hasOwnProperty(r)) {
                                        var n = t.certs[r]
                                        if (i.util.isArray(n))
                                            for (var s = 0; s < n.length; ++s) e.push(n[s])
                                        else e.push(n)
                                    }
                                return e
                            }),
                            (t.removeCertificate = function (e) {
                                var a
                                if (
                                    ('string' == typeof e && (e = i.pki.certificateFromPem(e)),
                                        o(e.subject),
                                        !t.hasCertificate(e))
                                )
                                    return null
                                var u = r(e.subject)
                                if (!i.util.isArray(u))
                                    return (
                                        (a = t.certs[e.subject.hash]),
                                        delete t.certs[e.subject.hash],
                                        a
                                    )
                                for (
                                    var c = n.toDer(s.certificateToAsn1(e)).getBytes(), d = 0;
                                    d < u.length;
                                    ++d
                                ) {
                                    c === n.toDer(s.certificateToAsn1(u[d])).getBytes() &&
                                        ((a = u[d]), u.splice(d, 1))
                                }
                                return 0 === u.length && delete t.certs[e.subject.hash], a
                            }),
                            e)
                    )
                        for (var a = 0; a < e.length; ++a) {
                            var u = e[a]
                            t.addCertificate(u)
                        }
                    return t
                }),
                (s.certificateError = {
                    bad_certificate: 'forge.pki.BadCertificate',
                    unsupported_certificate: 'forge.pki.UnsupportedCertificate',
                    certificate_revoked: 'forge.pki.CertificateRevoked',
                    certificate_expired: 'forge.pki.CertificateExpired',
                    certificate_unknown: 'forge.pki.CertificateUnknown',
                    unknown_ca: 'forge.pki.UnknownCertificateAuthority',
                }),
                (s.verifyCertificateChain = function (e, t, r) {
                    'function' == typeof r && (r = { verify: r }), (r = r || {})
                    var n = (t = t.slice(0)).slice(0),
                        o = r.validityCheckDate
                    void 0 === o && (o = new Date())
                    var a = !0,
                        u = null,
                        c = 0
                    do {
                        var d = t.shift(),
                            p = null,
                            f = !1
                        if (
                            (o &&
                                (o < d.validity.notBefore || o > d.validity.notAfter) &&
                                (u = {
                                    message: 'Certificate is not valid yet or has expired.',
                                    error: s.certificateError.certificate_expired,
                                    notBefore: d.validity.notBefore,
                                    notAfter: d.validity.notAfter,
                                    now: o,
                                }),
                                null === u)
                        ) {
                            if (
                                (null === (p = t[0] || e.getIssuer(d)) &&
                                    d.isIssuer(d) &&
                                    ((f = !0), (p = d)),
                                    p)
                            ) {
                                var l = p
                                i.util.isArray(l) || (l = [l])
                                for (var h = !1; !h && l.length > 0;) {
                                    p = l.shift()
                                    try {
                                        h = p.verify(d)
                                    } catch (I) { }
                                }
                                h ||
                                    (u = {
                                        message: 'Certificate signature is invalid.',
                                        error: s.certificateError.bad_certificate,
                                    })
                            }
                            null !== u ||
                                (p && !f) ||
                                e.hasCertificate(d) ||
                                (u = {
                                    message: 'Certificate is not trusted.',
                                    error: s.certificateError.unknown_ca,
                                })
                        }
                        if (
                            (null === u &&
                                p &&
                                !d.isIssuer(p) &&
                                (u = {
                                    message: 'Certificate issuer is invalid.',
                                    error: s.certificateError.bad_certificate,
                                }),
                                null === u)
                        )
                            for (
                                var g = { keyUsage: !0, basicConstraints: !0 }, y = 0;
                                null === u && y < d.extensions.length;
                                ++y
                            ) {
                                var m = d.extensions[y]
                                m.critical &&
                                    !(m.name in g) &&
                                    (u = {
                                        message:
                                            'Certificate has an unsupported critical extension.',
                                        error: s.certificateError.unsupported_certificate,
                                    })
                            }
                        if (null === u && (!a || (0 === t.length && (!p || f)))) {
                            var v = d.getExtension('basicConstraints'),
                                b = d.getExtension('keyUsage')
                            if (
                                (null !== b &&
                                    ((b.keyCertSign && null !== v) ||
                                        (u = {
                                            message:
                                                "Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.",
                                            error: s.certificateError.bad_certificate,
                                        })),
                                    null !== u ||
                                    null === v ||
                                    v.cA ||
                                    (u = {
                                        message:
                                            'Certificate basicConstraints indicates the certificate is not a CA.',
                                        error: s.certificateError.bad_certificate,
                                    }),
                                    null === u && null !== b && 'pathLenConstraint' in v)
                            )
                                c - 1 > v.pathLenConstraint &&
                                    (u = {
                                        message:
                                            'Certificate basicConstraints pathLenConstraint violated.',
                                        error: s.certificateError.bad_certificate,
                                    })
                        }
                        var w = null === u || u.error,
                            E = r.verify ? r.verify(w, c, n) : w
                        if (!0 !== E)
                            throw (
                                (!0 === w &&
                                    (u = {
                                        message: 'The application rejected the certificate.',
                                        error: s.certificateError.bad_certificate,
                                    }),
                                    (E || 0 === E) &&
                                    ('object' != typeof E || i.util.isArray(E)
                                        ? 'string' == typeof E && (u.error = E)
                                        : (E.message && (u.message = E.message),
                                            E.error && (u.error = E.error))),
                                    u)
                            )
                            ; (u = null), (a = !1), ++c
                    } while (t.length > 0)
                    return !0
                })
        },
        60936: (e, t, r) => {
            'use strict'
            r.d(t, { yg: () => Qr, G4: () => Gr, kd: () => Wr, ut: () => Hr })
            const i = {
                'urn:miot-spec-v2:property:air-cooler:000000EB': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:alarm:00000012': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:anion:00000025': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:anti-fake:00000130': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:arrhythmia:000000B4': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:auto-cleanup:00000124': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:auto-deodorization:00000125': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:auto-keep-warm:0000002B': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:automatic-feeding:000000F0': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:blow:000000CD': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:card-insertion-state:00000106': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:contact-state:0000007C': {
                    true: '接触',
                    false: '分离',
                },
                'urn:miot-spec-v2:property:current-physical-control-lock:00000099': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:delay:0000014F': { true: '是', false: '否' },
                'urn:miot-spec-v2:property:deodorization:000000C6': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:dns-auto-mode:000000DC': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:driving-status:000000B9': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:dryer:00000027': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:eco:00000024': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:glimmer-full-color:00000089': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:guard-mode:000000B6': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:heater:00000026': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:heating:000000C7': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:horizontal-swing:00000017': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:hot-water-recirculation:0000011C': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:image-distortion-correction:0000010F': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:local-storage:0000011E': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:motion-detection:00000056': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:motion-state:0000007D': {
                    true: '有人',
                    false: '无人',
                },
                'urn:miot-spec-v2:property:motion-tracking:0000008A': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:motor-reverse:00000072': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:off-delay:00000053': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:on:00000006': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:physical-controls-locked:0000001D': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:plasma:00000132': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:preheat:00000103': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:seating-state:000000B8': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:silent-execution:000000FB': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:sleep-aid-mode:0000010B': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:sleep-mode:00000028': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:snore-state:0000012A': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:soft-wind:000000CF': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:speed-control:000000E8': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:submersion-state:0000007E': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:time-watermark:00000087': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:un-straight-blowing:00000100': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:uv:00000029': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:valve-switch:000000FE': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:ventilation:000000CE': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:vertical-swing:00000018': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:wake-up-mode:00000107': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:water-pump:000000F2': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:watering:000000CC': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:wdr-mode:00000088': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:wet:0000002A': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:wifi-band-combine:000000E0': {
                    true: '开启',
                    false: '关闭',
                },
                'urn:miot-spec-v2:property:wifi-ssid-hidden:000000E3': {
                    true: '是',
                    false: '否',
                },
                'urn:miot-spec-v2:property:wind-reverse:00000117': {
                    true: '是',
                    false: '否',
                },
            }
            class n {
                #e
                #t = new Map()
                #r = new Map()
                #i = []
                constructor(e) {
                    this.#e = e.poolSize
                }
                async req(e, t, ...r) {
                    const i = this.#t.get(e)
                    if (void 0 !== i) return await i
                    const n = this.#r.get(e)
                    if (void 0 !== n) return await n.promise
                    let s = { func: t, params: r }
                    return (
                        (s.promise = new Promise((e, t) => {
                            ; (s.resolve = e), (s.reject = t)
                        })),
                        this.#r.set(e, s),
                        this.#i.push(e),
                        this.#n(),
                        await s.promise
                    )
                }
                async #n() {
                    if (this.#t.size >= this.#e) return
                    const e = this.#i.shift()
                    if (void 0 === e) return
                    const t = this.#r.get(e)
                    if (void 0 !== t) {
                        this.#r.delete(e), this.#t.set(e, t.promise)
                        try {
                            const e = await t.func(...t.params)
                            t.resolve(e)
                        } catch (r) {
                            t.reject(r)
                        }
                        this.#t.delete(e), this.#n()
                    }
                }
            }
            const s = {
                seconds: '秒',
                minutes: '分',
                pascal: 'Pa',
                percentage: '%',
                days: '天',
                ppm: 'ppm',
                rgb: 'RGB(十进制)',
                kelvin: 'K',
                hours: '小时',
                L: 'L',
                watt: 'W',
                metre: 'm',
                'mg/m3': 'mg/m³',
                lux: 'lux',
                arcdegrees: '°',
                celsius: '℃',
            }
            class o {
                static VERSION = 1
                #s
                #o = new n({ poolSize: 10 })
                #a = new Map()
                #u = !1
                #c
                constructor(e) {
                    try {
                        void 0 !== globalThis.window?.localStorage && (this.#u = !0)
                    } catch (t) { }
                    this.#s = this.#d()
                }
                async #p(e) {
                    const t = `https://miot-spec.org/miot-spec-v2/instance?type=${e}`
                    let r = await fetch(t)
                    if (!r.ok) throw new Error(`HTTP request error, status: ${r.status}`)
                    let i = await (await r.blob()).text()
                    return JSON.parse(i)
                }
                async #f(e) {
                    const t = `https://miot-spec.org/instance/v2/multiLanguage?urn=${e}`
                    let r = await fetch(t)
                    if (!r.ok) throw new Error(`HTTP request error, status: ${r.status}`)
                    let i = await (await r.blob()).text()
                    return JSON.parse(i)
                }
                #l(e) {
                    return (
                        { string: 'string', bool: 'boolean', float: 'float' }[e] ?? 'int'
                    )
                }
                #h(e, t) {
                    return this.#c[e][t]
                }
                #g(e, t) {
                    this.#u
                        ? localStorage.setItem(e, JSON.stringify(t))
                        : this.#a.set(e, t)
                }
                #y(e) {
                    if (!this.#u) return this.#a.get(e)
                    {
                        let t = localStorage.getItem(e)
                        if (null !== t) {
                            let e = JSON.parse(t)
                            if (e.version === o.VERSION) return e
                        }
                    }
                }
                #m() {
                    if ((this.#a.clear(), this.#u)) {
                        let e = Object.keys(localStorage)
                        for (const t in e)
                            t.startsWith('urn:') && localStorage.removeItem(t)
                    }
                }
                #v(e = 6e4) {
                    this.#u &&
                        setTimeout(() => {
                            let e = Object.keys(localStorage)
                            for (const r of e)
                                if (r.startsWith('urn:'))
                                    try {
                                        this.parse(r, !0)
                                    } catch (t) { }
                        }, e)
                }
                async #d() {
                    if (void 0 === this.#c) {
                        let e = await Promise.all([
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/normalization/list/property_value'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description &&
                                            '' !== e.description &&
                                            (t[`${e.urn}|${e.proName}|${e.normalization}`] =
                                                e.description)
                                    }),
                                    t
                                )
                            })(),
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/template/list/service'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description.zh_cn &&
                                            '' !== e.description.zh_cn &&
                                            (t[e.type] = e.description.zh_cn)
                                    }),
                                    t
                                )
                            })(),
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/template/list/property'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description.zh_cn &&
                                            '' !== e.description.zh_cn &&
                                            (t[e.type] = e.description.zh_cn)
                                    }),
                                    t
                                )
                            })(),
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/template/list/event'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description.zh_cn &&
                                            '' !== e.description.zh_cn &&
                                            (t[e.type] = e.description.zh_cn)
                                    }),
                                    t
                                )
                            })(),
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/template/list/action'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description.zh_cn &&
                                            '' !== e.description.zh_cn &&
                                            (t[e.type] = e.description.zh_cn)
                                    }),
                                    t
                                )
                            })(),
                            (async () => {
                                let e = await (
                                    await fetch(
                                        'https://miot-spec.org/miot-spec-v2/template/list/device'
                                    )
                                ).json(),
                                    t = {}
                                return (
                                    e.result.forEach((e) => {
                                        'string' == typeof e.description?.zh_cn &&
                                            '' !== e.description.zh_cn &&
                                            (t[e.type.split(':')[3]] = e.description.zh_cn)
                                    }),
                                    t
                                )
                            })(),
                        ])
                            ; (this.#c = {
                                values: e[0],
                                services: e[1],
                                properties: e[2],
                                events: e[3],
                                actions: e[4],
                                devices: e[5],
                            }),
                                this.#v()
                    }
                }
                async init() {
                    await this.#s
                }
                async #b(e) {
                    let t = await this.#p(e),
                        r = new Map()
                    try {
                        let t = await this.#f(e)
                        for (const e in t.data.zh_cn) {
                            let i = t.data.zh_cn[e]
                            if ('' === i || null == i) continue
                            let n = e.split(':')
                            if (2 === n.length) {
                                let i = `s:${Number(n[1])}`
                                r.set(i, t.data.zh_cn[e])
                            } else if (4 === n.length) {
                                let i = `${'property' === n[2] ? 'p' : 'action' === n[2] ? 'a' : 'e'
                                    }:${Number(n[1])}:${Number(n[3])}`
                                r.set(i, t.data.zh_cn[e])
                            } else if (6 === n.length) {
                                let i = `v:${Number(n[1])}:${Number(n[3])}:${Number(n[5])}`
                                r.set(i, t.data.zh_cn[e])
                            }
                        }
                    } catch (d) { }
                    let n = {
                        propertyNotify: new Map(),
                        event: new Map(),
                        propertySet: new Map(),
                        propertyGet: new Map(),
                        action: new Map(),
                    }
                    for (const o of t.services) {
                        let e = !1,
                            t = o.type.split(':')
                        if ('device-information' === t[3]) continue
                        'miot-spec-v2' !== t[1] && (e = !0)
                        let a = `s:${o.iid}`,
                            u = r.get(a)
                        if (
                            ((u =
                                u ??
                                this.#h('services', o.type.split(':').slice(0, 5).join(':'))),
                                (u = u ?? o.description),
                                void 0 !== o.properties)
                        )
                            for (const c of o.properties) {
                                let t = !1
                                'miot-spec-v2' !== c.type.split(':')[1] && (t = !0)
                                let a = `p:${o.iid}:${c.iid}`,
                                    d = r.get(a)
                                    ; (d =
                                        d ??
                                        this.#h(
                                            'properties',
                                            c.type.split(':').slice(0, 5).join(':')
                                        )),
                                        (d = d ?? c.description)
                                let p,
                                    f = this.#l(c.format)
                                if ('value-range' in c)
                                    p = {
                                        siid: o.iid,
                                        piid: c.iid,
                                        valueRange: {
                                            min: c['value-range'][0],
                                            max: c['value-range'][1],
                                            step: c['value-range'][2],
                                        },
                                        sDescription: u,
                                        description: d,
                                        dtype: f,
                                        unit: s[c.unit] ?? c.unit,
                                    }
                                else if ('value-list' in c) {
                                    let e = c['value-list']
                                    for (let t = 0; t < e.length; t++) {
                                        const i = e[t]
                                        let n = r.get(`v:${o.iid}:${c.iid}:${t}`),
                                            s = `${o.type.split(':').slice(0, 5).join(':')}|${c.type.split(':')[3]
                                                }|${i.description}`
                                            ; (n = n ?? this.#h('values', s)),
                                                (i.description = n ?? i.description)
                                    }
                                    'float' === f && (f = 'int'),
                                        (p = {
                                            siid: o.iid,
                                            piid: c.iid,
                                            valueList: e,
                                            sDescription: u,
                                            description: d,
                                            dtype: f,
                                        })
                                } else if ('bool' === c.format) {
                                    let e = c.type.split(':').slice(0, 5).join(':'),
                                        t = i[e],
                                        r = t?.true ?? 'true',
                                        n = t?.false ?? 'false'
                                    p = {
                                        siid: o.iid,
                                        piid: c.iid,
                                        valueList: [
                                            { value: !0, description: r },
                                            { value: !1, description: n },
                                        ],
                                        dtype: 'boolean',
                                        sDescription: u,
                                        description: d,
                                    }
                                } else
                                    p = {
                                        siid: o.iid,
                                        piid: c.iid,
                                        sDescription: u,
                                        description: d,
                                        dtype: f,
                                    }
                                        ; (p.proprietary = e || t),
                                            c.access.includes('notify') && n.propertyNotify.set(a, p),
                                            c.access.includes('write') && n.propertySet.set(a, p),
                                            c.access.includes('read') && n.propertyGet.set(a, p)
                            }
                        if (void 0 !== o.events)
                            for (const c of o.events) {
                                let t = !1
                                'miot-spec-v2' !== c.type.split(':')[1] && (t = !0)
                                let a = `e:${o.iid}:${c.iid}`,
                                    d = r.get(a)
                                    ; (d =
                                        d ??
                                        this.#h('events', c.type.split(':').slice(0, 5).join(':'))),
                                        (d = d ?? c.description)
                                let p = c.arguments?.map((e) => {
                                    let t = o.properties?.find((t) => t.iid === e)
                                    if (void 0 === t) throw new Error('No properties')
                                    let n = `p:${o.iid}:${e}`,
                                        a = r.get(n)
                                        ; (a =
                                            a ??
                                            this.#h(
                                                'properties',
                                                t.type.split(':').slice(0, 5).join(':')
                                            )),
                                            (a = a ?? t.description)
                                    let c = this.#l(t.format)
                                    if ('value-range' in t)
                                        return {
                                            piid: t.iid,
                                            sDescription: u,
                                            description: a,
                                            dtype: c,
                                            unit: s[t.unit] ?? t.unit,
                                            valueRange: {
                                                min: t['value-range'][0],
                                                max: t['value-range'][1],
                                                step: t['value-range'][2],
                                            },
                                        }
                                    if ('value-list' in t) {
                                        let e = t['value-list']
                                        for (let i = 0; i < e.length; i++) {
                                            const n = e[i]
                                            let s = r.get(`v:${o.iid}:${t.iid}:${i}`),
                                                a = `${o.type.split(':').slice(0, 5).join(':')}|${t.type.split(':')[3]
                                                    }|${n.description}`
                                                ; (s = s ?? this.#h('values', a)),
                                                    (n.description = s ?? n.description)
                                        }
                                        return (
                                            'float' === c && (c = 'int'),
                                            {
                                                piid: t.iid,
                                                sDescription: u,
                                                description: a,
                                                dtype: c,
                                                valueList: e,
                                            }
                                        )
                                    }
                                    if ('bool' === t.format) {
                                        let e = t.type.split(':').slice(0, 5).join(':'),
                                            r = i[e],
                                            n = r?.true ?? 'true',
                                            s = r?.false ?? 'false'
                                        return {
                                            piid: t.iid,
                                            valueList: [
                                                { value: !0, description: n },
                                                { value: !1, description: s },
                                            ],
                                            dtype: 'boolean',
                                            sDescription: u,
                                            description: a,
                                        }
                                    }
                                    return {
                                        piid: t.iid,
                                        sDescription: u,
                                        description: a,
                                        dtype: c,
                                    }
                                })
                                n.event.set(a, {
                                    siid: o.iid,
                                    eiid: c.iid,
                                    sDescription: u,
                                    description: d,
                                    proprietary: e || t,
                                    arguments: p,
                                })
                            }
                        if (void 0 !== o.actions)
                            for (const c of o.actions) {
                                let t = !1
                                'miot-spec-v2' !== c.type.split(':')[1] && (t = !0)
                                let a = `a:${o.iid}:${c.iid}`,
                                    d = r.get(a) ?? c.description
                                    ; (d =
                                        d ??
                                        this.#h('actions', c.type.split(':').slice(0, 5).join(':'))),
                                        (d = d ?? c.description)
                                let p = c.in?.map((e) => {
                                    let t = o.properties?.find((t) => t.iid === e)
                                    if (void 0 === t) throw new Error('No properties')
                                    let n = `p:${o.iid}:${e}`,
                                        a = r.get(n) ?? t.description,
                                        c = this.#l(t.format)
                                    if ('value-range' in t)
                                        return {
                                            piid: t.iid,
                                            sDescription: u,
                                            description: a,
                                            dtype: c,
                                            unit: s[t.unit] ?? t.unit,
                                            valueRange: {
                                                min: t['value-range'][0],
                                                max: t['value-range'][1],
                                                step: t['value-range'][2],
                                            },
                                        }
                                    if ('value-list' in t) {
                                        let e = t['value-list']
                                        for (let i = 0; i < e.length; i++) {
                                            const n = e[i]
                                            let s = r.get(`v:${o.iid}:${t.iid}:${i}`),
                                                a = `${o.type.split(':').slice(0, 5).join(':')}|${t.type.split(':')[3]
                                                    }|${n.description}`
                                                ; (s = s ?? this.#h('values', a)),
                                                    (n.description = s ?? n.description)
                                        }
                                        return (
                                            'float' === c && (c = 'int'),
                                            {
                                                piid: t.iid,
                                                sDescription: u,
                                                description: a,
                                                dtype: c,
                                                valueList: e,
                                            }
                                        )
                                    }
                                    if ('bool' === t.format) {
                                        let e = t.type.split(':').slice(0, 5).join(':'),
                                            r = i[e],
                                            n = r?.true ?? 'true',
                                            s = r?.false ?? 'false'
                                        return {
                                            piid: t.iid,
                                            valueList: [
                                                { value: !0, description: n },
                                                { value: !1, description: s },
                                            ],
                                            dtype: 'boolean',
                                            sDescription: u,
                                            description: a,
                                        }
                                    }
                                    return {
                                        piid: t.iid,
                                        sDescription: u,
                                        description: a,
                                        dtype: c,
                                    }
                                })
                                n.action.set(a, {
                                    siid: o.iid,
                                    aiid: c.iid,
                                    sDescription: u,
                                    description: d,
                                    proprietary: e || t,
                                    in: p,
                                })
                            }
                    }
                    let a = e.split(':')[3],
                        u = this.#c.devices[a] ?? a,
                        c = {
                            version: o.VERSION,
                            deviceType: a,
                            deviceTypeDescription: u,
                            propertyNotify: Array.from(n.propertyNotify.values()),
                            event: Array.from(n.event.values()),
                            propertySet: Array.from(n.propertySet.values()),
                            propertyGet: Array.from(n.propertyGet.values()),
                            action: Array.from(n.action.values()),
                        }
                    return this.#g(e, c), c
                }
                async parse(e, t = !1) {
                    if ((await this.init(), !t)) {
                        let t = this.#y(e)
                        if (void 0 !== t) return t
                    }
                    return this.#o.req(e, this.#b.bind(this), e)
                }
                getDeviceType(e) {
                    let t = e.split(':')[3]
                    return {
                        deviceType: t,
                        deviceTypeDescription: this.#c.devices[t] ?? t,
                    }
                }
            }
            const a = new o()
            var u = r(22079),
                c = r(13550),
                d = r(86266)
            class p {
                #w
                #E
                #I
                #C
                #S
                #A
                #T
                #N
                #_
                #B = !1
                #k = !1
                #R = !1
                #L = !1
                #M = !1
                constructor(e) {
                    if ('server' !== e.role && 'client' !== e.role)
                        throw new TypeError('role must be "client" or "server"')
                    if ('string' != typeof e.secret)
                        throw new TypeError('secret must be a string')
                        ; (this.#w = e.role),
                            (this.#E = 'client' === this.#w ? 'server' : 'client')
                    let t = new TextEncoder()
                        ; (this.#S = new c(t.encode(e.secret))),
                            (this.#I = 'secp256k1'),
                            (this.#C = 22)
                }
                writeRoundOne() {
                    if (this.#B)
                        throw new Error('Reusing failed ECJPAKE context is insecure.')
                    if (this.#k || this.#L || this.#M) throw new Error('Wrong step')
                    this.#k = !0
                    const e = new d.ec(this.#I)
                    this.#A = e.genKeyPair()
                    const t = this.#x(
                        this.#I,
                        e.g,
                        this.#A.getPublic(),
                        this.#A.getPrivate(),
                        this.#w
                    )
                    this.#T = e.genKeyPair()
                    const r = this.#x(
                        this.#I,
                        e.g,
                        this.#T.getPublic(),
                        this.#T.getPrivate(),
                        this.#w
                    ),
                        i = this.#D(this.#A.getPublic()),
                        n = this.#D(this.#T.getPublic()),
                        s = this.#P(t),
                        o = this.#P(r),
                        a = new Uint8Array(i.length + s.length + n.length + o.length)
                    let u = 0
                    return (
                        a.set(i, u),
                        (u += i.length),
                        a.set(s, u),
                        (u += s.length),
                        a.set(n, u),
                        (u += n.length),
                        a.set(o, u),
                        (u += o.length),
                        a
                    )
                }
                readRoundOne(e) {
                    if (this.#B)
                        throw new Error('Reusing failed ECJPAKE context is insecure.')
                    if (this.#R || this.#L || this.#M) throw new Error('Wrong step')
                    this.#R = !0
                    const t = new d.ec(this.#I)
                    let r = 0
                    const i = e[r]
                    r++
                    const n = e.slice(r, r + i)
                        ; (r += i), (this.#N = t.keyFromPublic(n).getPublic())
                    const s = e[r],
                        o = 1 + s + 1 + e[r + 1 + s],
                        a = e.slice(r, r + o)
                    r += o
                    const u = this.#U(a)
                    if (!this.#O(this.#I, t.g, this.#N, u.V, u.r, this.#E))
                        throw ((this.#B = !0), new Error('ECJPAKE round one failed'))
                    const c = e[r]
                    r++
                    const p = e.slice(r, r + c)
                        ; (r += c), (this.#_ = t.keyFromPublic(p).getPublic())
                    const f = e[r],
                        l = 1 + f + 1 + e[r + 1 + f],
                        h = e.slice(r, r + l)
                    r += l
                    const g = this.#U(h)
                    if (!this.#O(this.#I, t.g, this.#_, g.V, g.r, this.#E))
                        throw ((this.#B = !0), new Error('ECJPAKE round one failed'))
                }
                writeRoundTwo() {
                    if (this.#B)
                        throw new Error('Reusing failed ECJPAKE context is insecure.')
                    if (this.#L || !this.#k || !this.#R) throw new Error('Wrong step')
                    this.#L = !0
                    const e = new d.ec(this.#I)
                    let t = this.#A.getPublic().add(this.#N).add(this.#_)
                    e.g = t
                    const r = u.random.getBytesSync(16)
                    let i = new Uint8Array(16)
                    for (let u = 0; u < r.length; u++) i[u] = r.charCodeAt(u)
                    let n = new c(i)
                    if (null === e.n || void 0 === e.n) throw new Error('EC error')
                    n = n.mul(e.n).add(this.#S)
                    let s,
                        o = this.#T.getPrivate().mul(n).umod(e.n),
                        a = t.mul(o),
                        p = this.#x(this.#I, t, a, o, this.#w),
                        f = this.#V(),
                        l = this.#D(a),
                        h = this.#P(p),
                        g = 0
                    return (
                        'server' === this.#w
                            ? ((s = new Uint8Array(f.length + l.length + h.length)),
                                s.set(f, g),
                                (g += f.length))
                            : (s = new Uint8Array(l.length + h.length)),
                        s.set(l, g),
                        (g += l.length),
                        s.set(h, g),
                        (g += h.length),
                        s
                    )
                }
                readRoundTwo(e) {
                    if (this.#B)
                        throw new Error('Reusing failed ECJPAKE context is insecure.')
                    if (this.#M || !this.#k || !this.#R) throw new Error('Wrong step')
                    this.#M = !0
                    const t = new d.ec(this.#I)
                    let r = this.#A.getPublic().add(this.#T.getPublic()).add(this.#N),
                        i = 0
                    'client' === this.#w && (i += 3)
                    const n = e[i]
                    i++
                    const s = e.slice(i, i + n)
                    i += n
                    let o = t.keyFromPublic(s).getPublic()
                    const a = e[i],
                        p = 1 + a + 1 + e[i + 1 + a],
                        f = e.slice(i, i + p)
                    i += p
                    const l = this.#U(f)
                    if (!this.#O(this.#I, r, o, l.V, l.r, this.#E))
                        throw ((this.#B = !0), new Error('ECJPAKE round two failed'))
                    const h = u.random.getBytesSync(16)
                    let g = new Uint8Array(16)
                    for (let u = 0; u < h.length; u++) g[u] = h.charCodeAt(u)
                    let y = new c(g)
                    if (null === t.n || void 0 === t.n) throw new Error('EC error')
                    y = y.mul(t.n).add(this.#S)
                    let m = this.#T.getPrivate().mul(y).umod(t.n),
                        v = o.add(this.#_.mul(m).neg()).mul(this.#T.getPrivate())
                    const b = u.md.sha256.create()
                    b.update(String.fromCharCode(...v.getX().toArray('be', 32)), 'raw')
                    const w = b.digest().bytes(32)
                    let E = new Uint8Array(32)
                    for (let u = 0; u < w.length; u++) E[u] = w.charCodeAt(u)
                    return E
                }
                #K(e) {
                    let t = new Uint8Array(69)
                    t.fill(0)
                    let r = new DataView(t.buffer)
                    r.setUint32(0, 65, !1), r.setUint8(4, 4)
                    const i = new Uint8Array(e.getX().toArray('be', 32)),
                        n = new Uint8Array(e.getY().toArray('be', 32))
                    return t.set(i, 5), t.set(n, 37), t
                }
                #D(e) {
                    let t = new Uint8Array(66)
                    t.fill(0)
                    let r = new DataView(t.buffer)
                    r.setUint8(0, 65), r.setUint8(1, 4)
                    const i = new Uint8Array(e.getX().toArray('be', 32)),
                        n = new Uint8Array(e.getY().toArray('be', 32))
                    return t.set(i, 2), t.set(n, 34), t
                }
                #V() {
                    let e = new Uint8Array(3)
                    return (e[0] = 3), new DataView(e.buffer).setUint16(1, this.#C, !1), e
                }
                #z(e, t, r, i, n) {
                    const s = this.#K(e),
                        o = this.#K(t),
                        a = this.#K(r)
                    const d = new TextEncoder().encode(i),
                        p = new Uint8Array(4)
                    new DataView(p.buffer).setUint32(0, d.length, !1)
                    let f = new Uint8Array(
                        s.length + o.length + a.length + p.length + d.length
                    )
                    f.fill(0)
                    let l = 0
                    f.set(s, l),
                        (l += s.length),
                        f.set(o, l),
                        (l += o.length),
                        f.set(a, l),
                        (l += a.length),
                        f.set(p, l),
                        (l += p.length),
                        f.set(d, l),
                        (l += d.length)
                    const h = u.md.sha256.create()
                    h.update(String.fromCharCode(...f), 'raw')
                    const g = h.digest().toHex()
                    let y = new c(g, 'hex', 'be')
                    return (y = y.umod(n)), y
                }
                #x(e, t, r, i, n) {
                    const s = new d.ec(e)
                    s.g = t
                    let o = s.genKeyPair()
                    if (null === s.n || void 0 === s.n) throw new Error('EC error')
                    let a = this.#z(s.g, o.getPublic(), r, n, s.n),
                        u = o.getPrivate().sub(a.mul(i)).umod(s.n)
                    return { V: o.getPublic(), r: u }
                }
                #P(e) {
                    const t = new Uint8Array(99)
                    return (
                        t.fill(0),
                        t.set(this.#D(e.V), 0),
                        (t[66] = 32),
                        t.set(e.r.toArray('be', 32), 67),
                        t
                    )
                }
                #U(e) {
                    if (!(e instanceof Uint8Array))
                        throw new TypeError(
                            'ZKPArray should be an Uint8Array with length===99'
                        )
                    const t = new d.ec(this.#I),
                        r = e[0],
                        i = t.keyFromPublic(e.slice(1, 1 + r)).getPublic(),
                        n = e[1 + r]
                    return { V: i, r: new c(e.slice(1 + r + 1, 1 + r + 1 + n)) }
                }
                #O(e, t, r, i, n, s) {
                    const o = new d.ec(e)
                    if (((o.g = t), null === o.n || void 0 === o.n))
                        throw new Error('EC error')
                    let a = this.#z(t, i, r, s, o.n)
                    return r.mul(a).add(t.mul(n)).eq(i)
                }
            }
            class f {
                #F
                #q = !1
                constructor() {
                    const e = new d.ec('curve25519')
                    this.#F = e.genKeyPair()
                }
                writeSelfPub() {
                    return new Uint8Array(this.#F.getPublic().getX().toArray('be', 32))
                }
                readPeerPub(e) {
                    if (this.#q) throw new Error('Reusing ecdh context')
                    this.#q = !0
                    const t = new d.ec('curve25519')
                    return new Uint8Array(
                        this.#F.derive(t.keyFromPublic(e).getPublic()).toArray('be', 32)
                    )
                }
            }
            function l(e) {
                let t = new Uint8Array(e.length())
                for (let r = 0; r < t.length; r++) t[r] = e.at(r)
                return t
            }
            class h {
                #$
                #j
                #H
                #G = 1
                #W = 0
                constructor(e, t) {
                    if (!(e instanceof Uint8Array) || 16 !== e?.length)
                        throw new TypeError("key's length is not 16")
                    if (!(t instanceof Uint8Array) || 8 !== t.length)
                        throw new TypeError("salt's length is not 8")
                        ; (this.#$ = u.cipher.createCipher('AES-GCM', u.util.createBuffer(e))),
                            (this.#j = u.cipher.createDecipher(
                                'AES-GCM',
                                u.util.createBuffer(e)
                            )),
                            (this.#H = t)
                }
                encrypt(e) {
                    if (this.#G > 4294967295) throw new Error('self counter overflow')
                    const t = this.#G++,
                        r = new Uint8Array(12)
                    r.set(this.#H, 0)
                    if (
                        (new DataView(r.buffer).setUint32(8, t, !0),
                            this.#$.start({ iv: u.util.createBuffer(r), tagLength: 128 }),
                            this.#$.update(u.util.createBuffer(e)),
                            !this.#$.finish())
                    )
                        throw new Error('forge encryption error')
                    const i = l(this.#$.output),
                        n = l(this.#$.mode.tag)
                    let s = new Uint8Array(4 + i.length + n.length)
                    return (
                        new DataView(s.buffer).setUint32(0, t, !0),
                        s.set(i, 4),
                        s.set(n, 4 + i.length),
                        s.buffer
                    )
                }
                decrypt(e) {
                    let t = new DataView(e).getUint32(0, !0)
                    if (t <= this.#W) throw new Error('Replay attack!')
                    this.#W = t
                    const r = new Uint8Array(e.slice(4, e.byteLength - 16)),
                        i = new Uint8Array(e.slice(4 + r.length)),
                        n = new Uint8Array(12)
                    n.set(this.#H)
                    if (
                        (new DataView(n.buffer).setUint32(8, t, !0),
                            this.#j.start({
                                iv: u.util.createBuffer(n),
                                tagLength: 128,
                                tag: u.util.createBuffer(i),
                            }),
                            this.#j.update(u.util.createBuffer(r)),
                            !this.#j.finish())
                    )
                        throw new Error('authentication or decryption failed')
                    return l(this.#j.output).buffer
                }
            }
            function g(e) {
                let t = e.length
                for (; --t >= 0;) e[t] = 0
            }
            const y = 256,
                m = 286,
                v = 30,
                b = 15,
                w = new Uint8Array([
                    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,
                    4, 5, 5, 5, 5, 0,
                ]),
                E = new Uint8Array([
                    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
                    10, 11, 11, 12, 12, 13, 13,
                ]),
                I = new Uint8Array([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7,
                ]),
                C = new Uint8Array([
                    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
                ]),
                S = new Array(576)
            g(S)
            const A = new Array(60)
            g(A)
            const T = new Array(512)
            g(T)
            const N = new Array(256)
            g(N)
            const _ = new Array(29)
            g(_)
            const B = new Array(v)
            function k(e, t, r, i, n) {
                ; (this.static_tree = e),
                    (this.extra_bits = t),
                    (this.extra_base = r),
                    (this.elems = i),
                    (this.max_length = n),
                    (this.has_stree = e && e.length)
            }
            let R, L, M
            function x(e, t) {
                ; (this.dyn_tree = e), (this.max_code = 0), (this.stat_desc = t)
            }
            g(B)
            const D = (e) => (e < 256 ? T[e] : T[256 + (e >>> 7)]),
                P = (e, t) => {
                    ; (e.pending_buf[e.pending++] = 255 & t),
                        (e.pending_buf[e.pending++] = (t >>> 8) & 255)
                },
                U = (e, t, r) => {
                    e.bi_valid > 16 - r
                        ? ((e.bi_buf |= (t << e.bi_valid) & 65535),
                            P(e, e.bi_buf),
                            (e.bi_buf = t >> (16 - e.bi_valid)),
                            (e.bi_valid += r - 16))
                        : ((e.bi_buf |= (t << e.bi_valid) & 65535), (e.bi_valid += r))
                },
                O = (e, t, r) => {
                    U(e, r[2 * t], r[2 * t + 1])
                },
                V = (e, t) => {
                    let r = 0
                    do {
                        ; (r |= 1 & e), (e >>>= 1), (r <<= 1)
                    } while (--t > 0)
                    return r >>> 1
                },
                K = (e, t, r) => {
                    const i = new Array(16)
                    let n,
                        s,
                        o = 0
                    for (n = 1; n <= b; n++) (o = (o + r[n - 1]) << 1), (i[n] = o)
                    for (s = 0; s <= t; s++) {
                        let t = e[2 * s + 1]
                        0 !== t && (e[2 * s] = V(i[t]++, t))
                    }
                },
                z = (e) => {
                    let t
                    for (t = 0; t < m; t++) e.dyn_ltree[2 * t] = 0
                    for (t = 0; t < v; t++) e.dyn_dtree[2 * t] = 0
                    for (t = 0; t < 19; t++) e.bl_tree[2 * t] = 0
                        ; (e.dyn_ltree[512] = 1),
                            (e.opt_len = e.static_len = 0),
                            (e.sym_next = e.matches = 0)
                },
                F = (e) => {
                    e.bi_valid > 8
                        ? P(e, e.bi_buf)
                        : e.bi_valid > 0 && (e.pending_buf[e.pending++] = e.bi_buf),
                        (e.bi_buf = 0),
                        (e.bi_valid = 0)
                },
                q = (e, t, r, i) => {
                    const n = 2 * t,
                        s = 2 * r
                    return e[n] < e[s] || (e[n] === e[s] && i[t] <= i[r])
                },
                $ = (e, t, r) => {
                    const i = e.heap[r]
                    let n = r << 1
                    for (
                        ;
                        n <= e.heap_len &&
                        (n < e.heap_len && q(t, e.heap[n + 1], e.heap[n], e.depth) && n++,
                            !q(t, i, e.heap[n], e.depth));

                    )
                        (e.heap[r] = e.heap[n]), (r = n), (n <<= 1)
                    e.heap[r] = i
                },
                j = (e, t, r) => {
                    let i,
                        n,
                        s,
                        o,
                        a = 0
                    if (0 !== e.sym_next)
                        do {
                            ; (i = 255 & e.pending_buf[e.sym_buf + a++]),
                                (i += (255 & e.pending_buf[e.sym_buf + a++]) << 8),
                                (n = e.pending_buf[e.sym_buf + a++]),
                                0 === i
                                    ? O(e, n, t)
                                    : ((s = N[n]),
                                        O(e, s + y + 1, t),
                                        (o = w[s]),
                                        0 !== o && ((n -= _[s]), U(e, n, o)),
                                        i--,
                                        (s = D(i)),
                                        O(e, s, r),
                                        (o = E[s]),
                                        0 !== o && ((i -= B[s]), U(e, i, o)))
                        } while (a < e.sym_next)
                    O(e, 256, t)
                },
                H = (e, t) => {
                    const r = t.dyn_tree,
                        i = t.stat_desc.static_tree,
                        n = t.stat_desc.has_stree,
                        s = t.stat_desc.elems
                    let o,
                        a,
                        u,
                        c = -1
                    for (e.heap_len = 0, e.heap_max = 573, o = 0; o < s; o++)
                        0 !== r[2 * o]
                            ? ((e.heap[++e.heap_len] = c = o), (e.depth[o] = 0))
                            : (r[2 * o + 1] = 0)
                    for (; e.heap_len < 2;)
                        (u = e.heap[++e.heap_len] = c < 2 ? ++c : 0),
                            (r[2 * u] = 1),
                            (e.depth[u] = 0),
                            e.opt_len--,
                            n && (e.static_len -= i[2 * u + 1])
                    for (t.max_code = c, o = e.heap_len >> 1; o >= 1; o--) $(e, r, o)
                    u = s
                    do {
                        ; (o = e.heap[1]),
                            (e.heap[1] = e.heap[e.heap_len--]),
                            $(e, r, 1),
                            (a = e.heap[1]),
                            (e.heap[--e.heap_max] = o),
                            (e.heap[--e.heap_max] = a),
                            (r[2 * u] = r[2 * o] + r[2 * a]),
                            (e.depth[u] =
                                (e.depth[o] >= e.depth[a] ? e.depth[o] : e.depth[a]) + 1),
                            (r[2 * o + 1] = r[2 * a + 1] = u),
                            (e.heap[1] = u++),
                            $(e, r, 1)
                    } while (e.heap_len >= 2)
                        ; (e.heap[--e.heap_max] = e.heap[1]),
                            ((e, t) => {
                                const r = t.dyn_tree,
                                    i = t.max_code,
                                    n = t.stat_desc.static_tree,
                                    s = t.stat_desc.has_stree,
                                    o = t.stat_desc.extra_bits,
                                    a = t.stat_desc.extra_base,
                                    u = t.stat_desc.max_length
                                let c,
                                    d,
                                    p,
                                    f,
                                    l,
                                    h,
                                    g = 0
                                for (f = 0; f <= b; f++) e.bl_count[f] = 0
                                for (
                                    r[2 * e.heap[e.heap_max] + 1] = 0, c = e.heap_max + 1;
                                    c < 573;
                                    c++
                                )
                                    (d = e.heap[c]),
                                        (f = r[2 * r[2 * d + 1] + 1] + 1),
                                        f > u && ((f = u), g++),
                                        (r[2 * d + 1] = f),
                                        d > i ||
                                        (e.bl_count[f]++,
                                            (l = 0),
                                            d >= a && (l = o[d - a]),
                                            (h = r[2 * d]),
                                            (e.opt_len += h * (f + l)),
                                            s && (e.static_len += h * (n[2 * d + 1] + l)))
                                if (0 !== g) {
                                    do {
                                        for (f = u - 1; 0 === e.bl_count[f];) f--
                                        e.bl_count[f]--,
                                            (e.bl_count[f + 1] += 2),
                                            e.bl_count[u]--,
                                            (g -= 2)
                                    } while (g > 0)
                                    for (f = u; 0 !== f; f--)
                                        for (d = e.bl_count[f]; 0 !== d;)
                                            (p = e.heap[--c]),
                                                p > i ||
                                                (r[2 * p + 1] !== f &&
                                                    ((e.opt_len += (f - r[2 * p + 1]) * r[2 * p]),
                                                        (r[2 * p + 1] = f)),
                                                    d--)
                                }
                            })(e, t),
                            K(r, c, e.bl_count)
                },
                G = (e, t, r) => {
                    let i,
                        n,
                        s = -1,
                        o = t[1],
                        a = 0,
                        u = 7,
                        c = 4
                    for (
                        0 === o && ((u = 138), (c = 3)), t[2 * (r + 1) + 1] = 65535, i = 0;
                        i <= r;
                        i++
                    )
                        (n = o),
                            (o = t[2 * (i + 1) + 1]),
                            (++a < u && n === o) ||
                            (a < c
                                ? (e.bl_tree[2 * n] += a)
                                : 0 !== n
                                    ? (n !== s && e.bl_tree[2 * n]++, e.bl_tree[32]++)
                                    : a <= 10
                                        ? e.bl_tree[34]++
                                        : e.bl_tree[36]++,
                                (a = 0),
                                (s = n),
                                0 === o
                                    ? ((u = 138), (c = 3))
                                    : n === o
                                        ? ((u = 6), (c = 3))
                                        : ((u = 7), (c = 4)))
                },
                W = (e, t, r) => {
                    let i,
                        n,
                        s = -1,
                        o = t[1],
                        a = 0,
                        u = 7,
                        c = 4
                    for (0 === o && ((u = 138), (c = 3)), i = 0; i <= r; i++)
                        if (((n = o), (o = t[2 * (i + 1) + 1]), !(++a < u && n === o))) {
                            if (a < c)
                                do {
                                    O(e, n, e.bl_tree)
                                } while (0 != --a)
                            else
                                0 !== n
                                    ? (n !== s && (O(e, n, e.bl_tree), a--),
                                        O(e, 16, e.bl_tree),
                                        U(e, a - 3, 2))
                                    : a <= 10
                                        ? (O(e, 17, e.bl_tree), U(e, a - 3, 3))
                                        : (O(e, 18, e.bl_tree), U(e, a - 11, 7))
                                    ; (a = 0),
                                        (s = n),
                                        0 === o
                                            ? ((u = 138), (c = 3))
                                            : n === o
                                                ? ((u = 6), (c = 3))
                                                : ((u = 7), (c = 4))
                        }
                }
            let Q = !1
            const Z = (e, t, r, i) => {
                U(e, 0 + (i ? 1 : 0), 3),
                    F(e),
                    P(e, r),
                    P(e, ~r),
                    r && e.pending_buf.set(e.window.subarray(t, t + r), e.pending),
                    (e.pending += r)
            }
            var X = (e, t, r, i) => {
                let n,
                    s,
                    o = 0
                e.level > 0
                    ? (2 === e.strm.data_type &&
                        (e.strm.data_type = ((e) => {
                            let t,
                                r = 4093624447
                            for (t = 0; t <= 31; t++, r >>>= 1)
                                if (1 & r && 0 !== e.dyn_ltree[2 * t]) return 0
                            if (
                                0 !== e.dyn_ltree[18] ||
                                0 !== e.dyn_ltree[20] ||
                                0 !== e.dyn_ltree[26]
                            )
                                return 1
                            for (t = 32; t < y; t++)
                                if (0 !== e.dyn_ltree[2 * t]) return 1
                            return 0
                        })(e)),
                        H(e, e.l_desc),
                        H(e, e.d_desc),
                        (o = ((e) => {
                            let t
                            for (
                                G(e, e.dyn_ltree, e.l_desc.max_code),
                                G(e, e.dyn_dtree, e.d_desc.max_code),
                                H(e, e.bl_desc),
                                t = 18;
                                t >= 3 && 0 === e.bl_tree[2 * C[t] + 1];
                                t--
                            );
                            return (e.opt_len += 3 * (t + 1) + 5 + 5 + 4), t
                        })(e)),
                        (n = (e.opt_len + 3 + 7) >>> 3),
                        (s = (e.static_len + 3 + 7) >>> 3),
                        s <= n && (n = s))
                    : (n = s = r + 5),
                    r + 4 <= n && -1 !== t
                        ? Z(e, t, r, i)
                        : 4 === e.strategy || s === n
                            ? (U(e, 2 + (i ? 1 : 0), 3), j(e, S, A))
                            : (U(e, 4 + (i ? 1 : 0), 3),
                                ((e, t, r, i) => {
                                    let n
                                    for (
                                        U(e, t - 257, 5), U(e, r - 1, 5), U(e, i - 4, 4), n = 0;
                                        n < i;
                                        n++
                                    )
                                        U(e, e.bl_tree[2 * C[n] + 1], 3)
                                    W(e, e.dyn_ltree, t - 1), W(e, e.dyn_dtree, r - 1)
                                })(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, o + 1),
                                j(e, e.dyn_ltree, e.dyn_dtree)),
                    z(e),
                    i && F(e)
            },
                Y = {
                    _tr_init: (e) => {
                        Q ||
                            ((() => {
                                let e, t, r, i, n
                                const s = new Array(16)
                                for (r = 0, i = 0; i < 28; i++)
                                    for (_[i] = r, e = 0; e < 1 << w[i]; e++) N[r++] = i
                                for (N[r - 1] = i, n = 0, i = 0; i < 16; i++)
                                    for (B[i] = n, e = 0; e < 1 << E[i]; e++) T[n++] = i
                                for (n >>= 7; i < v; i++)
                                    for (B[i] = n << 7, e = 0; e < 1 << (E[i] - 7); e++)
                                        T[256 + n++] = i
                                for (t = 0; t <= b; t++) s[t] = 0
                                for (e = 0; e <= 143;) (S[2 * e + 1] = 8), e++, s[8]++
                                for (; e <= 255;) (S[2 * e + 1] = 9), e++, s[9]++
                                for (; e <= 279;) (S[2 * e + 1] = 7), e++, s[7]++
                                for (; e <= 287;) (S[2 * e + 1] = 8), e++, s[8]++
                                for (K(S, 287, s), e = 0; e < v; e++)
                                    (A[2 * e + 1] = 5), (A[2 * e] = V(e, 5))
                                        ; (R = new k(S, w, 257, m, b)),
                                            (L = new k(A, E, 0, v, b)),
                                            (M = new k(new Array(0), I, 0, 19, 7))
                            })(),
                                (Q = !0)),
                            (e.l_desc = new x(e.dyn_ltree, R)),
                            (e.d_desc = new x(e.dyn_dtree, L)),
                            (e.bl_desc = new x(e.bl_tree, M)),
                            (e.bi_buf = 0),
                            (e.bi_valid = 0),
                            z(e)
                    },
                    _tr_stored_block: Z,
                    _tr_flush_block: X,
                    _tr_tally: (e, t, r) => (
                        (e.pending_buf[e.sym_buf + e.sym_next++] = t),
                        (e.pending_buf[e.sym_buf + e.sym_next++] = t >> 8),
                        (e.pending_buf[e.sym_buf + e.sym_next++] = r),
                        0 === t
                            ? e.dyn_ltree[2 * r]++
                            : (e.matches++,
                                t--,
                                e.dyn_ltree[2 * (N[r] + y + 1)]++,
                                e.dyn_dtree[2 * D(t)]++),
                        e.sym_next === e.sym_end
                    ),
                    _tr_align: (e) => {
                        U(e, 2, 3),
                            O(e, 256, S),
                            ((e) => {
                                16 === e.bi_valid
                                    ? (P(e, e.bi_buf), (e.bi_buf = 0), (e.bi_valid = 0))
                                    : e.bi_valid >= 8 &&
                                    ((e.pending_buf[e.pending++] = 255 & e.bi_buf),
                                        (e.bi_buf >>= 8),
                                        (e.bi_valid -= 8))
                            })(e)
                    },
                }
            var J = (e, t, r, i) => {
                let n = (65535 & e) | 0,
                    s = ((e >>> 16) & 65535) | 0,
                    o = 0
                for (; 0 !== r;) {
                    ; (o = r > 2e3 ? 2e3 : r), (r -= o)
                    do {
                        ; (n = (n + t[i++]) | 0), (s = (s + n) | 0)
                    } while (--o)
                        ; (n %= 65521), (s %= 65521)
                }
                return n | (s << 16) | 0
            }
            const ee = new Uint32Array(
                (() => {
                    let e,
                        t = []
                    for (var r = 0; r < 256; r++) {
                        e = r
                        for (var i = 0; i < 8; i++)
                            e = 1 & e ? 3988292384 ^ (e >>> 1) : e >>> 1
                        t[r] = e
                    }
                    return t
                })()
            )
            var te = (e, t, r, i) => {
                const n = ee,
                    s = i + r
                e ^= -1
                for (let o = i; o < s; o++) e = (e >>> 8) ^ n[255 & (e ^ t[o])]
                return -1 ^ e
            },
                re = {
                    2: 'need dictionary',
                    1: 'stream end',
                    0: '',
                    '-1': 'file error',
                    '-2': 'stream error',
                    '-3': 'data error',
                    '-4': 'insufficient memory',
                    '-5': 'buffer error',
                    '-6': 'incompatible version',
                },
                ie = {
                    Z_NO_FLUSH: 0,
                    Z_PARTIAL_FLUSH: 1,
                    Z_SYNC_FLUSH: 2,
                    Z_FULL_FLUSH: 3,
                    Z_FINISH: 4,
                    Z_BLOCK: 5,
                    Z_TREES: 6,
                    Z_OK: 0,
                    Z_STREAM_END: 1,
                    Z_NEED_DICT: 2,
                    Z_ERRNO: -1,
                    Z_STREAM_ERROR: -2,
                    Z_DATA_ERROR: -3,
                    Z_MEM_ERROR: -4,
                    Z_BUF_ERROR: -5,
                    Z_NO_COMPRESSION: 0,
                    Z_BEST_SPEED: 1,
                    Z_BEST_COMPRESSION: 9,
                    Z_DEFAULT_COMPRESSION: -1,
                    Z_FILTERED: 1,
                    Z_HUFFMAN_ONLY: 2,
                    Z_RLE: 3,
                    Z_FIXED: 4,
                    Z_DEFAULT_STRATEGY: 0,
                    Z_BINARY: 0,
                    Z_TEXT: 1,
                    Z_UNKNOWN: 2,
                    Z_DEFLATED: 8,
                }
            const {
                _tr_init: ne,
                _tr_stored_block: se,
                _tr_flush_block: oe,
                _tr_tally: ae,
                _tr_align: ue,
            } = Y,
                {
                    Z_NO_FLUSH: ce,
                    Z_PARTIAL_FLUSH: de,
                    Z_FULL_FLUSH: pe,
                    Z_FINISH: fe,
                    Z_BLOCK: le,
                    Z_OK: he,
                    Z_STREAM_END: ge,
                    Z_STREAM_ERROR: ye,
                    Z_DATA_ERROR: me,
                    Z_BUF_ERROR: ve,
                    Z_DEFAULT_COMPRESSION: be,
                    Z_FILTERED: we,
                    Z_HUFFMAN_ONLY: Ee,
                    Z_RLE: Ie,
                    Z_FIXED: Ce,
                    Z_DEFAULT_STRATEGY: Se,
                    Z_UNKNOWN: Ae,
                    Z_DEFLATED: Te,
                } = ie,
                Ne = 258,
                _e = 262,
                Be = 42,
                ke = 113,
                Re = 666,
                Le = (e, t) => ((e.msg = re[t]), t),
                Me = (e) => 2 * e - (e > 4 ? 9 : 0),
                xe = (e) => {
                    let t = e.length
                    for (; --t >= 0;) e[t] = 0
                },
                De = (e) => {
                    let t,
                        r,
                        i,
                        n = e.w_size
                        ; (t = e.hash_size), (i = t)
                    do {
                        ; (r = e.head[--i]), (e.head[i] = r >= n ? r - n : 0)
                    } while (--t)
                        ; (t = n), (i = t)
                    do {
                        ; (r = e.prev[--i]), (e.prev[i] = r >= n ? r - n : 0)
                    } while (--t)
                }
            let Pe = (e, t, r) => ((t << e.hash_shift) ^ r) & e.hash_mask
            const Ue = (e) => {
                const t = e.state
                let r = t.pending
                r > e.avail_out && (r = e.avail_out),
                    0 !== r &&
                    (e.output.set(
                        t.pending_buf.subarray(t.pending_out, t.pending_out + r),
                        e.next_out
                    ),
                        (e.next_out += r),
                        (t.pending_out += r),
                        (e.total_out += r),
                        (e.avail_out -= r),
                        (t.pending -= r),
                        0 === t.pending && (t.pending_out = 0))
            },
                Oe = (e, t) => {
                    oe(
                        e,
                        e.block_start >= 0 ? e.block_start : -1,
                        e.strstart - e.block_start,
                        t
                    ),
                        (e.block_start = e.strstart),
                        Ue(e.strm)
                },
                Ve = (e, t) => {
                    e.pending_buf[e.pending++] = t
                },
                Ke = (e, t) => {
                    ; (e.pending_buf[e.pending++] = (t >>> 8) & 255),
                        (e.pending_buf[e.pending++] = 255 & t)
                },
                ze = (e, t, r, i) => {
                    let n = e.avail_in
                    return (
                        n > i && (n = i),
                        0 === n
                            ? 0
                            : ((e.avail_in -= n),
                                t.set(e.input.subarray(e.next_in, e.next_in + n), r),
                                1 === e.state.wrap
                                    ? (e.adler = J(e.adler, t, n, r))
                                    : 2 === e.state.wrap && (e.adler = te(e.adler, t, n, r)),
                                (e.next_in += n),
                                (e.total_in += n),
                                n)
                    )
                },
                Fe = (e, t) => {
                    let r,
                        i,
                        n = e.max_chain_length,
                        s = e.strstart,
                        o = e.prev_length,
                        a = e.nice_match
                    const u =
                        e.strstart > e.w_size - _e ? e.strstart - (e.w_size - _e) : 0,
                        c = e.window,
                        d = e.w_mask,
                        p = e.prev,
                        f = e.strstart + Ne
                    let l = c[s + o - 1],
                        h = c[s + o]
                    e.prev_length >= e.good_match && (n >>= 2),
                        a > e.lookahead && (a = e.lookahead)
                    do {
                        if (
                            ((r = t),
                                c[r + o] === h &&
                                c[r + o - 1] === l &&
                                c[r] === c[s] &&
                                c[++r] === c[s + 1])
                        ) {
                            ; (s += 2), r++
                            do { } while (
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                c[++s] === c[++r] &&
                                s < f
                            )
                            if (((i = Ne - (f - s)), (s = f - Ne), i > o)) {
                                if (((e.match_start = t), (o = i), i >= a)) break
                                    ; (l = c[s + o - 1]), (h = c[s + o])
                            }
                        }
                    } while ((t = p[t & d]) > u && 0 != --n)
                    return o <= e.lookahead ? o : e.lookahead
                },
                qe = (e) => {
                    const t = e.w_size
                    let r, i, n
                    do {
                        if (
                            ((i = e.window_size - e.lookahead - e.strstart),
                                e.strstart >= t + (t - _e) &&
                                (e.window.set(e.window.subarray(t, t + t - i), 0),
                                    (e.match_start -= t),
                                    (e.strstart -= t),
                                    (e.block_start -= t),
                                    e.insert > e.strstart && (e.insert = e.strstart),
                                    De(e),
                                    (i += t)),
                                0 === e.strm.avail_in)
                        )
                            break
                        if (
                            ((r = ze(e.strm, e.window, e.strstart + e.lookahead, i)),
                                (e.lookahead += r),
                                e.lookahead + e.insert >= 3)
                        )
                            for (
                                n = e.strstart - e.insert,
                                e.ins_h = e.window[n],
                                e.ins_h = Pe(e, e.ins_h, e.window[n + 1]);
                                e.insert &&
                                ((e.ins_h = Pe(e, e.ins_h, e.window[n + 3 - 1])),
                                    (e.prev[n & e.w_mask] = e.head[e.ins_h]),
                                    (e.head[e.ins_h] = n),
                                    n++,
                                    e.insert--,
                                    !(e.lookahead + e.insert < 3));

                            );
                    } while (e.lookahead < _e && 0 !== e.strm.avail_in)
                },
                $e = (e, t) => {
                    let r,
                        i,
                        n,
                        s =
                            e.pending_buf_size - 5 > e.w_size
                                ? e.w_size
                                : e.pending_buf_size - 5,
                        o = 0,
                        a = e.strm.avail_in
                    do {
                        if (
                            ((r = 65535), (n = (e.bi_valid + 42) >> 3), e.strm.avail_out < n)
                        )
                            break
                        if (
                            ((n = e.strm.avail_out - n),
                                (i = e.strstart - e.block_start),
                                r > i + e.strm.avail_in && (r = i + e.strm.avail_in),
                                r > n && (r = n),
                                r < s &&
                                ((0 === r && t !== fe) ||
                                    t === ce ||
                                    r !== i + e.strm.avail_in))
                        )
                            break
                            ; (o = t === fe && r === i + e.strm.avail_in ? 1 : 0),
                                se(e, 0, 0, o),
                                (e.pending_buf[e.pending - 4] = r),
                                (e.pending_buf[e.pending - 3] = r >> 8),
                                (e.pending_buf[e.pending - 2] = ~r),
                                (e.pending_buf[e.pending - 1] = ~r >> 8),
                                Ue(e.strm),
                                i &&
                                (i > r && (i = r),
                                    e.strm.output.set(
                                        e.window.subarray(e.block_start, e.block_start + i),
                                        e.strm.next_out
                                    ),
                                    (e.strm.next_out += i),
                                    (e.strm.avail_out -= i),
                                    (e.strm.total_out += i),
                                    (e.block_start += i),
                                    (r -= i)),
                                r &&
                                (ze(e.strm, e.strm.output, e.strm.next_out, r),
                                    (e.strm.next_out += r),
                                    (e.strm.avail_out -= r),
                                    (e.strm.total_out += r))
                    } while (0 === o)
                    return (
                        (a -= e.strm.avail_in),
                        a &&
                        (a >= e.w_size
                            ? ((e.matches = 2),
                                e.window.set(
                                    e.strm.input.subarray(
                                        e.strm.next_in - e.w_size,
                                        e.strm.next_in
                                    ),
                                    0
                                ),
                                (e.strstart = e.w_size),
                                (e.insert = e.strstart))
                            : (e.window_size - e.strstart <= a &&
                                ((e.strstart -= e.w_size),
                                    e.window.set(
                                        e.window.subarray(e.w_size, e.w_size + e.strstart),
                                        0
                                    ),
                                    e.matches < 2 && e.matches++,
                                    e.insert > e.strstart && (e.insert = e.strstart)),
                                e.window.set(
                                    e.strm.input.subarray(e.strm.next_in - a, e.strm.next_in),
                                    e.strstart
                                ),
                                (e.strstart += a),
                                (e.insert +=
                                    a > e.w_size - e.insert ? e.w_size - e.insert : a)),
                            (e.block_start = e.strstart)),
                        e.high_water < e.strstart && (e.high_water = e.strstart),
                        o
                            ? 4
                            : t !== ce &&
                                t !== fe &&
                                0 === e.strm.avail_in &&
                                e.strstart === e.block_start
                                ? 2
                                : ((n = e.window_size - e.strstart),
                                    e.strm.avail_in > n &&
                                    e.block_start >= e.w_size &&
                                    ((e.block_start -= e.w_size),
                                        (e.strstart -= e.w_size),
                                        e.window.set(
                                            e.window.subarray(e.w_size, e.w_size + e.strstart),
                                            0
                                        ),
                                        e.matches < 2 && e.matches++,
                                        (n += e.w_size),
                                        e.insert > e.strstart && (e.insert = e.strstart)),
                                    n > e.strm.avail_in && (n = e.strm.avail_in),
                                    n &&
                                    (ze(e.strm, e.window, e.strstart, n),
                                        (e.strstart += n),
                                        (e.insert +=
                                            n > e.w_size - e.insert ? e.w_size - e.insert : n)),
                                    e.high_water < e.strstart && (e.high_water = e.strstart),
                                    (n = (e.bi_valid + 42) >> 3),
                                    (n =
                                        e.pending_buf_size - n > 65535
                                            ? 65535
                                            : e.pending_buf_size - n),
                                    (s = n > e.w_size ? e.w_size : n),
                                    (i = e.strstart - e.block_start),
                                    (i >= s ||
                                        ((i || t === fe) &&
                                            t !== ce &&
                                            0 === e.strm.avail_in &&
                                            i <= n)) &&
                                    ((r = i > n ? n : i),
                                        (o = t === fe && 0 === e.strm.avail_in && r === i ? 1 : 0),
                                        se(e, e.block_start, r, o),
                                        (e.block_start += r),
                                        Ue(e.strm)),
                                    o ? 3 : 1)
                    )
                },
                je = (e, t) => {
                    let r, i
                    for (; ;) {
                        if (e.lookahead < _e) {
                            if ((qe(e), e.lookahead < _e && t === ce)) return 1
                            if (0 === e.lookahead) break
                        }
                        if (
                            ((r = 0),
                                e.lookahead >= 3 &&
                                ((e.ins_h = Pe(e, e.ins_h, e.window[e.strstart + 3 - 1])),
                                    (r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h]),
                                    (e.head[e.ins_h] = e.strstart)),
                                0 !== r &&
                                e.strstart - r <= e.w_size - _e &&
                                (e.match_length = Fe(e, r)),
                                e.match_length >= 3)
                        )
                            if (
                                ((i = ae(e, e.strstart - e.match_start, e.match_length - 3)),
                                    (e.lookahead -= e.match_length),
                                    e.match_length <= e.max_lazy_match && e.lookahead >= 3)
                            ) {
                                e.match_length--
                                do {
                                    e.strstart++,
                                        (e.ins_h = Pe(e, e.ins_h, e.window[e.strstart + 3 - 1])),
                                        (r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h]),
                                        (e.head[e.ins_h] = e.strstart)
                                } while (0 != --e.match_length)
                                e.strstart++
                            } else
                                (e.strstart += e.match_length),
                                    (e.match_length = 0),
                                    (e.ins_h = e.window[e.strstart]),
                                    (e.ins_h = Pe(e, e.ins_h, e.window[e.strstart + 1]))
                        else
                            (i = ae(e, 0, e.window[e.strstart])), e.lookahead--, e.strstart++
                        if (i && (Oe(e, !1), 0 === e.strm.avail_out)) return 1
                    }
                    return (
                        (e.insert = e.strstart < 2 ? e.strstart : 2),
                        t === fe
                            ? (Oe(e, !0), 0 === e.strm.avail_out ? 3 : 4)
                            : e.sym_next && (Oe(e, !1), 0 === e.strm.avail_out)
                                ? 1
                                : 2
                    )
                },
                He = (e, t) => {
                    let r, i, n
                    for (; ;) {
                        if (e.lookahead < _e) {
                            if ((qe(e), e.lookahead < _e && t === ce)) return 1
                            if (0 === e.lookahead) break
                        }
                        if (
                            ((r = 0),
                                e.lookahead >= 3 &&
                                ((e.ins_h = Pe(e, e.ins_h, e.window[e.strstart + 3 - 1])),
                                    (r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h]),
                                    (e.head[e.ins_h] = e.strstart)),
                                (e.prev_length = e.match_length),
                                (e.prev_match = e.match_start),
                                (e.match_length = 2),
                                0 !== r &&
                                e.prev_length < e.max_lazy_match &&
                                e.strstart - r <= e.w_size - _e &&
                                ((e.match_length = Fe(e, r)),
                                    e.match_length <= 5 &&
                                    (e.strategy === we ||
                                        (3 === e.match_length &&
                                            e.strstart - e.match_start > 4096)) &&
                                    (e.match_length = 2)),
                                e.prev_length >= 3 && e.match_length <= e.prev_length)
                        ) {
                            ; (n = e.strstart + e.lookahead - 3),
                                (i = ae(e, e.strstart - 1 - e.prev_match, e.prev_length - 3)),
                                (e.lookahead -= e.prev_length - 1),
                                (e.prev_length -= 2)
                            do {
                                ++e.strstart <= n &&
                                    ((e.ins_h = Pe(e, e.ins_h, e.window[e.strstart + 3 - 1])),
                                        (r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h]),
                                        (e.head[e.ins_h] = e.strstart))
                            } while (0 != --e.prev_length)
                            if (
                                ((e.match_available = 0),
                                    (e.match_length = 2),
                                    e.strstart++,
                                    i && (Oe(e, !1), 0 === e.strm.avail_out))
                            )
                                return 1
                        } else if (e.match_available) {
                            if (
                                ((i = ae(e, 0, e.window[e.strstart - 1])),
                                    i && Oe(e, !1),
                                    e.strstart++,
                                    e.lookahead--,
                                    0 === e.strm.avail_out)
                            )
                                return 1
                        } else (e.match_available = 1), e.strstart++, e.lookahead--
                    }
                    return (
                        e.match_available &&
                        ((i = ae(e, 0, e.window[e.strstart - 1])),
                            (e.match_available = 0)),
                        (e.insert = e.strstart < 2 ? e.strstart : 2),
                        t === fe
                            ? (Oe(e, !0), 0 === e.strm.avail_out ? 3 : 4)
                            : e.sym_next && (Oe(e, !1), 0 === e.strm.avail_out)
                                ? 1
                                : 2
                    )
                }
            function Ge(e, t, r, i, n) {
                ; (this.good_length = e),
                    (this.max_lazy = t),
                    (this.nice_length = r),
                    (this.max_chain = i),
                    (this.func = n)
            }
            const We = [
                new Ge(0, 0, 0, 0, $e),
                new Ge(4, 4, 8, 4, je),
                new Ge(4, 5, 16, 8, je),
                new Ge(4, 6, 32, 32, je),
                new Ge(4, 4, 16, 16, He),
                new Ge(8, 16, 32, 32, He),
                new Ge(8, 16, 128, 128, He),
                new Ge(8, 32, 128, 256, He),
                new Ge(32, 128, 258, 1024, He),
                new Ge(32, 258, 258, 4096, He),
            ]
            function Qe() {
                ; (this.strm = null),
                    (this.status = 0),
                    (this.pending_buf = null),
                    (this.pending_buf_size = 0),
                    (this.pending_out = 0),
                    (this.pending = 0),
                    (this.wrap = 0),
                    (this.gzhead = null),
                    (this.gzindex = 0),
                    (this.method = Te),
                    (this.last_flush = -1),
                    (this.w_size = 0),
                    (this.w_bits = 0),
                    (this.w_mask = 0),
                    (this.window = null),
                    (this.window_size = 0),
                    (this.prev = null),
                    (this.head = null),
                    (this.ins_h = 0),
                    (this.hash_size = 0),
                    (this.hash_bits = 0),
                    (this.hash_mask = 0),
                    (this.hash_shift = 0),
                    (this.block_start = 0),
                    (this.match_length = 0),
                    (this.prev_match = 0),
                    (this.match_available = 0),
                    (this.strstart = 0),
                    (this.match_start = 0),
                    (this.lookahead = 0),
                    (this.prev_length = 0),
                    (this.max_chain_length = 0),
                    (this.max_lazy_match = 0),
                    (this.level = 0),
                    (this.strategy = 0),
                    (this.good_match = 0),
                    (this.nice_match = 0),
                    (this.dyn_ltree = new Uint16Array(1146)),
                    (this.dyn_dtree = new Uint16Array(122)),
                    (this.bl_tree = new Uint16Array(78)),
                    xe(this.dyn_ltree),
                    xe(this.dyn_dtree),
                    xe(this.bl_tree),
                    (this.l_desc = null),
                    (this.d_desc = null),
                    (this.bl_desc = null),
                    (this.bl_count = new Uint16Array(16)),
                    (this.heap = new Uint16Array(573)),
                    xe(this.heap),
                    (this.heap_len = 0),
                    (this.heap_max = 0),
                    (this.depth = new Uint16Array(573)),
                    xe(this.depth),
                    (this.sym_buf = 0),
                    (this.lit_bufsize = 0),
                    (this.sym_next = 0),
                    (this.sym_end = 0),
                    (this.opt_len = 0),
                    (this.static_len = 0),
                    (this.matches = 0),
                    (this.insert = 0),
                    (this.bi_buf = 0),
                    (this.bi_valid = 0)
            }
            const Ze = (e) => {
                if (!e) return 1
                const t = e.state
                return !t ||
                    t.strm !== e ||
                    (t.status !== Be &&
                        57 !== t.status &&
                        69 !== t.status &&
                        73 !== t.status &&
                        91 !== t.status &&
                        103 !== t.status &&
                        t.status !== ke &&
                        t.status !== Re)
                    ? 1
                    : 0
            },
                Xe = (e) => {
                    if (Ze(e)) return Le(e, ye)
                        ; (e.total_in = e.total_out = 0), (e.data_type = Ae)
                    const t = e.state
                    return (
                        (t.pending = 0),
                        (t.pending_out = 0),
                        t.wrap < 0 && (t.wrap = -t.wrap),
                        (t.status = 2 === t.wrap ? 57 : t.wrap ? Be : ke),
                        (e.adler = 2 === t.wrap ? 0 : 1),
                        (t.last_flush = -2),
                        ne(t),
                        he
                    )
                },
                Ye = (e) => {
                    const t = Xe(e)
                    var r
                    return (
                        t === he &&
                        (((r = e.state).window_size = 2 * r.w_size),
                            xe(r.head),
                            (r.max_lazy_match = We[r.level].max_lazy),
                            (r.good_match = We[r.level].good_length),
                            (r.nice_match = We[r.level].nice_length),
                            (r.max_chain_length = We[r.level].max_chain),
                            (r.strstart = 0),
                            (r.block_start = 0),
                            (r.lookahead = 0),
                            (r.insert = 0),
                            (r.match_length = r.prev_length = 2),
                            (r.match_available = 0),
                            (r.ins_h = 0)),
                        t
                    )
                },
                Je = (e, t, r, i, n, s) => {
                    if (!e) return ye
                    let o = 1
                    if (
                        (t === be && (t = 6),
                            i < 0 ? ((o = 0), (i = -i)) : i > 15 && ((o = 2), (i -= 16)),
                            n < 1 ||
                            n > 9 ||
                            r !== Te ||
                            i < 8 ||
                            i > 15 ||
                            t < 0 ||
                            t > 9 ||
                            s < 0 ||
                            s > Ce ||
                            (8 === i && 1 !== o))
                    )
                        return Le(e, ye)
                    8 === i && (i = 9)
                    const a = new Qe()
                    return (
                        (e.state = a),
                        (a.strm = e),
                        (a.status = Be),
                        (a.wrap = o),
                        (a.gzhead = null),
                        (a.w_bits = i),
                        (a.w_size = 1 << a.w_bits),
                        (a.w_mask = a.w_size - 1),
                        (a.hash_bits = n + 7),
                        (a.hash_size = 1 << a.hash_bits),
                        (a.hash_mask = a.hash_size - 1),
                        (a.hash_shift = ~~((a.hash_bits + 3 - 1) / 3)),
                        (a.window = new Uint8Array(2 * a.w_size)),
                        (a.head = new Uint16Array(a.hash_size)),
                        (a.prev = new Uint16Array(a.w_size)),
                        (a.lit_bufsize = 1 << (n + 6)),
                        (a.pending_buf_size = 4 * a.lit_bufsize),
                        (a.pending_buf = new Uint8Array(a.pending_buf_size)),
                        (a.sym_buf = a.lit_bufsize),
                        (a.sym_end = 3 * (a.lit_bufsize - 1)),
                        (a.level = t),
                        (a.strategy = s),
                        (a.method = r),
                        Ye(e)
                    )
                }
            var et = {
                deflateInit: (e, t) => Je(e, t, Te, 15, 8, Se),
                deflateInit2: Je,
                deflateReset: Ye,
                deflateResetKeep: Xe,
                deflateSetHeader: (e, t) =>
                    Ze(e) || 2 !== e.state.wrap ? ye : ((e.state.gzhead = t), he),
                deflate: (e, t) => {
                    if (Ze(e) || t > le || t < 0) return e ? Le(e, ye) : ye
                    const r = e.state
                    if (
                        !e.output ||
                        (0 !== e.avail_in && !e.input) ||
                        (r.status === Re && t !== fe)
                    )
                        return Le(e, 0 === e.avail_out ? ve : ye)
                    const i = r.last_flush
                    if (((r.last_flush = t), 0 !== r.pending)) {
                        if ((Ue(e), 0 === e.avail_out)) return (r.last_flush = -1), he
                    } else if (0 === e.avail_in && Me(t) <= Me(i) && t !== fe)
                        return Le(e, ve)
                    if (r.status === Re && 0 !== e.avail_in) return Le(e, ve)
                    if (
                        (r.status === Be && 0 === r.wrap && (r.status = ke),
                            r.status === Be)
                    ) {
                        let t = (Te + ((r.w_bits - 8) << 4)) << 8,
                            i = -1
                        if (
                            ((i =
                                r.strategy >= Ee || r.level < 2
                                    ? 0
                                    : r.level < 6
                                        ? 1
                                        : 6 === r.level
                                            ? 2
                                            : 3),
                                (t |= i << 6),
                                0 !== r.strstart && (t |= 32),
                                (t += 31 - (t % 31)),
                                Ke(r, t),
                                0 !== r.strstart &&
                                (Ke(r, e.adler >>> 16), Ke(r, 65535 & e.adler)),
                                (e.adler = 1),
                                (r.status = ke),
                                Ue(e),
                                0 !== r.pending)
                        )
                            return (r.last_flush = -1), he
                    }
                    if (57 === r.status)
                        if (((e.adler = 0), Ve(r, 31), Ve(r, 139), Ve(r, 8), r.gzhead))
                            Ve(
                                r,
                                (r.gzhead.text ? 1 : 0) +
                                (r.gzhead.hcrc ? 2 : 0) +
                                (r.gzhead.extra ? 4 : 0) +
                                (r.gzhead.name ? 8 : 0) +
                                (r.gzhead.comment ? 16 : 0)
                            ),
                                Ve(r, 255 & r.gzhead.time),
                                Ve(r, (r.gzhead.time >> 8) & 255),
                                Ve(r, (r.gzhead.time >> 16) & 255),
                                Ve(r, (r.gzhead.time >> 24) & 255),
                                Ve(
                                    r,
                                    9 === r.level ? 2 : r.strategy >= Ee || r.level < 2 ? 4 : 0
                                ),
                                Ve(r, 255 & r.gzhead.os),
                                r.gzhead.extra &&
                                r.gzhead.extra.length &&
                                (Ve(r, 255 & r.gzhead.extra.length),
                                    Ve(r, (r.gzhead.extra.length >> 8) & 255)),
                                r.gzhead.hcrc &&
                                (e.adler = te(e.adler, r.pending_buf, r.pending, 0)),
                                (r.gzindex = 0),
                                (r.status = 69)
                        else if (
                            (Ve(r, 0),
                                Ve(r, 0),
                                Ve(r, 0),
                                Ve(r, 0),
                                Ve(r, 0),
                                Ve(
                                    r,
                                    9 === r.level ? 2 : r.strategy >= Ee || r.level < 2 ? 4 : 0
                                ),
                                Ve(r, 3),
                                (r.status = ke),
                                Ue(e),
                                0 !== r.pending)
                        )
                            return (r.last_flush = -1), he
                    if (69 === r.status) {
                        if (r.gzhead.extra) {
                            let t = r.pending,
                                i = (65535 & r.gzhead.extra.length) - r.gzindex
                            for (; r.pending + i > r.pending_buf_size;) {
                                let n = r.pending_buf_size - r.pending
                                if (
                                    (r.pending_buf.set(
                                        r.gzhead.extra.subarray(r.gzindex, r.gzindex + n),
                                        r.pending
                                    ),
                                        (r.pending = r.pending_buf_size),
                                        r.gzhead.hcrc &&
                                        r.pending > t &&
                                        (e.adler = te(e.adler, r.pending_buf, r.pending - t, t)),
                                        (r.gzindex += n),
                                        Ue(e),
                                        0 !== r.pending)
                                )
                                    return (r.last_flush = -1), he
                                        ; (t = 0), (i -= n)
                            }
                            let n = new Uint8Array(r.gzhead.extra)
                            r.pending_buf.set(
                                n.subarray(r.gzindex, r.gzindex + i),
                                r.pending
                            ),
                                (r.pending += i),
                                r.gzhead.hcrc &&
                                r.pending > t &&
                                (e.adler = te(e.adler, r.pending_buf, r.pending - t, t)),
                                (r.gzindex = 0)
                        }
                        r.status = 73
                    }
                    if (73 === r.status) {
                        if (r.gzhead.name) {
                            let t,
                                i = r.pending
                            do {
                                if (r.pending === r.pending_buf_size) {
                                    if (
                                        (r.gzhead.hcrc &&
                                            r.pending > i &&
                                            (e.adler = te(e.adler, r.pending_buf, r.pending - i, i)),
                                            Ue(e),
                                            0 !== r.pending)
                                    )
                                        return (r.last_flush = -1), he
                                    i = 0
                                }
                                ; (t =
                                    r.gzindex < r.gzhead.name.length
                                        ? 255 & r.gzhead.name.charCodeAt(r.gzindex++)
                                        : 0),
                                    Ve(r, t)
                            } while (0 !== t)
                            r.gzhead.hcrc &&
                                r.pending > i &&
                                (e.adler = te(e.adler, r.pending_buf, r.pending - i, i)),
                                (r.gzindex = 0)
                        }
                        r.status = 91
                    }
                    if (91 === r.status) {
                        if (r.gzhead.comment) {
                            let t,
                                i = r.pending
                            do {
                                if (r.pending === r.pending_buf_size) {
                                    if (
                                        (r.gzhead.hcrc &&
                                            r.pending > i &&
                                            (e.adler = te(e.adler, r.pending_buf, r.pending - i, i)),
                                            Ue(e),
                                            0 !== r.pending)
                                    )
                                        return (r.last_flush = -1), he
                                    i = 0
                                }
                                ; (t =
                                    r.gzindex < r.gzhead.comment.length
                                        ? 255 & r.gzhead.comment.charCodeAt(r.gzindex++)
                                        : 0),
                                    Ve(r, t)
                            } while (0 !== t)
                            r.gzhead.hcrc &&
                                r.pending > i &&
                                (e.adler = te(e.adler, r.pending_buf, r.pending - i, i))
                        }
                        r.status = 103
                    }
                    if (103 === r.status) {
                        if (r.gzhead.hcrc) {
                            if (
                                r.pending + 2 > r.pending_buf_size &&
                                (Ue(e), 0 !== r.pending)
                            )
                                return (r.last_flush = -1), he
                            Ve(r, 255 & e.adler), Ve(r, (e.adler >> 8) & 255), (e.adler = 0)
                        }
                        if (((r.status = ke), Ue(e), 0 !== r.pending))
                            return (r.last_flush = -1), he
                    }
                    if (
                        0 !== e.avail_in ||
                        0 !== r.lookahead ||
                        (t !== ce && r.status !== Re)
                    ) {
                        let i =
                            0 === r.level
                                ? $e(r, t)
                                : r.strategy === Ee
                                    ? ((e, t) => {
                                        let r
                                        for (; ;) {
                                            if (0 === e.lookahead && (qe(e), 0 === e.lookahead)) {
                                                if (t === ce) return 1
                                                break
                                            }
                                            if (
                                                ((e.match_length = 0),
                                                    (r = ae(e, 0, e.window[e.strstart])),
                                                    e.lookahead--,
                                                    e.strstart++,
                                                    r && (Oe(e, !1), 0 === e.strm.avail_out))
                                            )
                                                return 1
                                        }
                                        return (
                                            (e.insert = 0),
                                            t === fe
                                                ? (Oe(e, !0), 0 === e.strm.avail_out ? 3 : 4)
                                                : e.sym_next && (Oe(e, !1), 0 === e.strm.avail_out)
                                                    ? 1
                                                    : 2
                                        )
                                    })(r, t)
                                    : r.strategy === Ie
                                        ? ((e, t) => {
                                            let r, i, n, s
                                            const o = e.window
                                            for (; ;) {
                                                if (e.lookahead <= Ne) {
                                                    if ((qe(e), e.lookahead <= Ne && t === ce)) return 1
                                                    if (0 === e.lookahead) break
                                                }
                                                if (
                                                    ((e.match_length = 0),
                                                        e.lookahead >= 3 &&
                                                        e.strstart > 0 &&
                                                        ((n = e.strstart - 1),
                                                            (i = o[n]),
                                                            i === o[++n] && i === o[++n] && i === o[++n]))
                                                ) {
                                                    s = e.strstart + Ne
                                                    do { } while (
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        i === o[++n] &&
                                                        n < s
                                                    )
                                                        ; (e.match_length = Ne - (s - n)),
                                                            e.match_length > e.lookahead &&
                                                            (e.match_length = e.lookahead)
                                                }
                                                if (
                                                    (e.match_length >= 3
                                                        ? ((r = ae(e, 1, e.match_length - 3)),
                                                            (e.lookahead -= e.match_length),
                                                            (e.strstart += e.match_length),
                                                            (e.match_length = 0))
                                                        : ((r = ae(e, 0, e.window[e.strstart])),
                                                            e.lookahead--,
                                                            e.strstart++),
                                                        r && (Oe(e, !1), 0 === e.strm.avail_out))
                                                )
                                                    return 1
                                            }
                                            return (
                                                (e.insert = 0),
                                                t === fe
                                                    ? (Oe(e, !0), 0 === e.strm.avail_out ? 3 : 4)
                                                    : e.sym_next && (Oe(e, !1), 0 === e.strm.avail_out)
                                                        ? 1
                                                        : 2
                                            )
                                        })(r, t)
                                        : We[r.level].func(r, t)
                        if (((3 !== i && 4 !== i) || (r.status = Re), 1 === i || 3 === i))
                            return 0 === e.avail_out && (r.last_flush = -1), he
                        if (
                            2 === i &&
                            (t === de
                                ? ue(r)
                                : t !== le &&
                                (se(r, 0, 0, !1),
                                    t === pe &&
                                    (xe(r.head),
                                        0 === r.lookahead &&
                                        ((r.strstart = 0), (r.block_start = 0), (r.insert = 0)))),
                                Ue(e),
                                0 === e.avail_out)
                        )
                            return (r.last_flush = -1), he
                    }
                    return t !== fe
                        ? he
                        : r.wrap <= 0
                            ? ge
                            : (2 === r.wrap
                                ? (Ve(r, 255 & e.adler),
                                    Ve(r, (e.adler >> 8) & 255),
                                    Ve(r, (e.adler >> 16) & 255),
                                    Ve(r, (e.adler >> 24) & 255),
                                    Ve(r, 255 & e.total_in),
                                    Ve(r, (e.total_in >> 8) & 255),
                                    Ve(r, (e.total_in >> 16) & 255),
                                    Ve(r, (e.total_in >> 24) & 255))
                                : (Ke(r, e.adler >>> 16), Ke(r, 65535 & e.adler)),
                                Ue(e),
                                r.wrap > 0 && (r.wrap = -r.wrap),
                                0 !== r.pending ? he : ge)
                },
                deflateEnd: (e) => {
                    if (Ze(e)) return ye
                    const t = e.state.status
                    return (e.state = null), t === ke ? Le(e, me) : he
                },
                deflateSetDictionary: (e, t) => {
                    let r = t.length
                    if (Ze(e)) return ye
                    const i = e.state,
                        n = i.wrap
                    if (2 === n || (1 === n && i.status !== Be) || i.lookahead) return ye
                    if (
                        (1 === n && (e.adler = J(e.adler, t, r, 0)),
                            (i.wrap = 0),
                            r >= i.w_size)
                    ) {
                        0 === n &&
                            (xe(i.head),
                                (i.strstart = 0),
                                (i.block_start = 0),
                                (i.insert = 0))
                        let e = new Uint8Array(i.w_size)
                        e.set(t.subarray(r - i.w_size, r), 0), (t = e), (r = i.w_size)
                    }
                    const s = e.avail_in,
                        o = e.next_in,
                        a = e.input
                    for (
                        e.avail_in = r, e.next_in = 0, e.input = t, qe(i);
                        i.lookahead >= 3;

                    ) {
                        let e = i.strstart,
                            t = i.lookahead - 2
                        do {
                            ; (i.ins_h = Pe(i, i.ins_h, i.window[e + 3 - 1])),
                                (i.prev[e & i.w_mask] = i.head[i.ins_h]),
                                (i.head[i.ins_h] = e),
                                e++
                        } while (--t)
                            ; (i.strstart = e), (i.lookahead = 2), qe(i)
                    }
                    return (
                        (i.strstart += i.lookahead),
                        (i.block_start = i.strstart),
                        (i.insert = i.lookahead),
                        (i.lookahead = 0),
                        (i.match_length = i.prev_length = 2),
                        (i.match_available = 0),
                        (e.next_in = o),
                        (e.input = a),
                        (e.avail_in = s),
                        (i.wrap = n),
                        he
                    )
                },
                deflateInfo: 'pako deflate (from Nodeca project)',
            }
            const tt = (e, t) => Object.prototype.hasOwnProperty.call(e, t)
            var rt = {
                assign: function (e) {
                    const t = Array.prototype.slice.call(arguments, 1)
                    for (; t.length;) {
                        const r = t.shift()
                        if (r) {
                            if ('object' != typeof r)
                                throw new TypeError(r + 'must be non-object')
                            for (const t in r) tt(r, t) && (e[t] = r[t])
                        }
                    }
                    return e
                },
                flattenChunks: (e) => {
                    let t = 0
                    for (let i = 0, n = e.length; i < n; i++) t += e[i].length
                    const r = new Uint8Array(t)
                    for (let i = 0, n = 0, s = e.length; i < s; i++) {
                        let t = e[i]
                        r.set(t, n), (n += t.length)
                    }
                    return r
                },
            }
            let it = !0
            try {
                String.fromCharCode.apply(null, new Uint8Array(1))
            } catch (Zr) {
                it = !1
            }
            const nt = new Uint8Array(256)
            for (let Xr = 0; Xr < 256; Xr++)
                nt[Xr] =
                    Xr >= 252
                        ? 6
                        : Xr >= 248
                            ? 5
                            : Xr >= 240
                                ? 4
                                : Xr >= 224
                                    ? 3
                                    : Xr >= 192
                                        ? 2
                                        : 1
            nt[254] = nt[254] = 1
            var st = {
                string2buf: (e) => {
                    if ('function' == typeof TextEncoder && TextEncoder.prototype.encode)
                        return new TextEncoder().encode(e)
                    let t,
                        r,
                        i,
                        n,
                        s,
                        o = e.length,
                        a = 0
                    for (n = 0; n < o; n++)
                        (r = e.charCodeAt(n)),
                            55296 == (64512 & r) &&
                            n + 1 < o &&
                            ((i = e.charCodeAt(n + 1)),
                                56320 == (64512 & i) &&
                                ((r = 65536 + ((r - 55296) << 10) + (i - 56320)), n++)),
                            (a += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4)
                    for (t = new Uint8Array(a), s = 0, n = 0; s < a; n++)
                        (r = e.charCodeAt(n)),
                            55296 == (64512 & r) &&
                            n + 1 < o &&
                            ((i = e.charCodeAt(n + 1)),
                                56320 == (64512 & i) &&
                                ((r = 65536 + ((r - 55296) << 10) + (i - 56320)), n++)),
                            r < 128
                                ? (t[s++] = r)
                                : r < 2048
                                    ? ((t[s++] = 192 | (r >>> 6)), (t[s++] = 128 | (63 & r)))
                                    : r < 65536
                                        ? ((t[s++] = 224 | (r >>> 12)),
                                            (t[s++] = 128 | ((r >>> 6) & 63)),
                                            (t[s++] = 128 | (63 & r)))
                                        : ((t[s++] = 240 | (r >>> 18)),
                                            (t[s++] = 128 | ((r >>> 12) & 63)),
                                            (t[s++] = 128 | ((r >>> 6) & 63)),
                                            (t[s++] = 128 | (63 & r)))
                    return t
                },
                buf2string: (e, t) => {
                    const r = t || e.length
                    if ('function' == typeof TextDecoder && TextDecoder.prototype.decode)
                        return new TextDecoder().decode(e.subarray(0, t))
                    let i, n
                    const s = new Array(2 * r)
                    for (n = 0, i = 0; i < r;) {
                        let t = e[i++]
                        if (t < 128) {
                            s[n++] = t
                            continue
                        }
                        let o = nt[t]
                        if (o > 4) (s[n++] = 65533), (i += o - 1)
                        else {
                            for (t &= 2 === o ? 31 : 3 === o ? 15 : 7; o > 1 && i < r;)
                                (t = (t << 6) | (63 & e[i++])), o--
                            o > 1
                                ? (s[n++] = 65533)
                                : t < 65536
                                    ? (s[n++] = t)
                                    : ((t -= 65536),
                                        (s[n++] = 55296 | ((t >> 10) & 1023)),
                                        (s[n++] = 56320 | (1023 & t)))
                        }
                    }
                    return ((e, t) => {
                        if (t < 65534 && e.subarray && it)
                            return String.fromCharCode.apply(
                                null,
                                e.length === t ? e : e.subarray(0, t)
                            )
                        let r = ''
                        for (let i = 0; i < t; i++) r += String.fromCharCode(e[i])
                        return r
                    })(s, n)
                },
                utf8border: (e, t) => {
                    ; (t = t || e.length) > e.length && (t = e.length)
                    let r = t - 1
                    for (; r >= 0 && 128 == (192 & e[r]);) r--
                    return r < 0 || 0 === r ? t : r + nt[e[r]] > t ? r : t
                },
            }
            var ot = function () {
                ; (this.input = null),
                    (this.next_in = 0),
                    (this.avail_in = 0),
                    (this.total_in = 0),
                    (this.output = null),
                    (this.next_out = 0),
                    (this.avail_out = 0),
                    (this.total_out = 0),
                    (this.msg = ''),
                    (this.state = null),
                    (this.data_type = 2),
                    (this.adler = 0)
            }
            const at = Object.prototype.toString,
                {
                    Z_NO_FLUSH: ut,
                    Z_SYNC_FLUSH: ct,
                    Z_FULL_FLUSH: dt,
                    Z_FINISH: pt,
                    Z_OK: ft,
                    Z_STREAM_END: lt,
                    Z_DEFAULT_COMPRESSION: ht,
                    Z_DEFAULT_STRATEGY: gt,
                    Z_DEFLATED: yt,
                } = ie
            function mt(e) {
                this.options = rt.assign(
                    {
                        level: ht,
                        method: yt,
                        chunkSize: 16384,
                        windowBits: 15,
                        memLevel: 8,
                        strategy: gt,
                    },
                    e || {}
                )
                let t = this.options
                t.raw && t.windowBits > 0
                    ? (t.windowBits = -t.windowBits)
                    : t.gzip &&
                    t.windowBits > 0 &&
                    t.windowBits < 16 &&
                    (t.windowBits += 16),
                    (this.err = 0),
                    (this.msg = ''),
                    (this.ended = !1),
                    (this.chunks = []),
                    (this.strm = new ot()),
                    (this.strm.avail_out = 0)
                let r = et.deflateInit2(
                    this.strm,
                    t.level,
                    t.method,
                    t.windowBits,
                    t.memLevel,
                    t.strategy
                )
                if (r !== ft) throw new Error(re[r])
                if (
                    (t.header && et.deflateSetHeader(this.strm, t.header), t.dictionary)
                ) {
                    let e
                    if (
                        ((e =
                            'string' == typeof t.dictionary
                                ? st.string2buf(t.dictionary)
                                : '[object ArrayBuffer]' === at.call(t.dictionary)
                                    ? new Uint8Array(t.dictionary)
                                    : t.dictionary),
                            (r = et.deflateSetDictionary(this.strm, e)),
                            r !== ft)
                    )
                        throw new Error(re[r])
                    this._dict_set = !0
                }
            }
            function vt(e, t) {
                const r = new mt(t)
                if ((r.push(e, !0), r.err)) throw r.msg || re[r.err]
                return r.result
            }
            ; (mt.prototype.push = function (e, t) {
                const r = this.strm,
                    i = this.options.chunkSize
                let n, s
                if (this.ended) return !1
                for (
                    s = t === ~~t ? t : !0 === t ? pt : ut,
                    'string' == typeof e
                        ? (r.input = st.string2buf(e))
                        : '[object ArrayBuffer]' === at.call(e)
                            ? (r.input = new Uint8Array(e))
                            : (r.input = e),
                    r.next_in = 0,
                    r.avail_in = r.input.length;
                    ;

                )
                    if (
                        (0 === r.avail_out &&
                            ((r.output = new Uint8Array(i)),
                                (r.next_out = 0),
                                (r.avail_out = i)),
                            (s === ct || s === dt) && r.avail_out <= 6)
                    )
                        this.onData(r.output.subarray(0, r.next_out)), (r.avail_out = 0)
                    else {
                        if (((n = et.deflate(r, s)), n === lt))
                            return (
                                r.next_out > 0 && this.onData(r.output.subarray(0, r.next_out)),
                                (n = et.deflateEnd(this.strm)),
                                this.onEnd(n),
                                (this.ended = !0),
                                n === ft
                            )
                        if (0 !== r.avail_out) {
                            if (s > 0 && r.next_out > 0)
                                this.onData(r.output.subarray(0, r.next_out)), (r.avail_out = 0)
                            else if (0 === r.avail_in) break
                        } else this.onData(r.output)
                    }
                return !0
            }),
                (mt.prototype.onData = function (e) {
                    this.chunks.push(e)
                }),
                (mt.prototype.onEnd = function (e) {
                    e === ft && (this.result = rt.flattenChunks(this.chunks)),
                        (this.chunks = []),
                        (this.err = e),
                        (this.msg = this.strm.msg)
                })
            var bt = {
                Deflate: mt,
                deflate: vt,
                deflateRaw: function (e, t) {
                    return ((t = t || {}).raw = !0), vt(e, t)
                },
                gzip: function (e, t) {
                    return ((t = t || {}).gzip = !0), vt(e, t)
                },
                constants: ie,
            }
            const wt = 16209
            var Et = function (e, t) {
                let r,
                    i,
                    n,
                    s,
                    o,
                    a,
                    u,
                    c,
                    d,
                    p,
                    f,
                    l,
                    h,
                    g,
                    y,
                    m,
                    v,
                    b,
                    w,
                    E,
                    I,
                    C,
                    S,
                    A
                const T = e.state
                    ; (r = e.next_in),
                        (S = e.input),
                        (i = r + (e.avail_in - 5)),
                        (n = e.next_out),
                        (A = e.output),
                        (s = n - (t - e.avail_out)),
                        (o = n + (e.avail_out - 257)),
                        (a = T.dmax),
                        (u = T.wsize),
                        (c = T.whave),
                        (d = T.wnext),
                        (p = T.window),
                        (f = T.hold),
                        (l = T.bits),
                        (h = T.lencode),
                        (g = T.distcode),
                        (y = (1 << T.lenbits) - 1),
                        (m = (1 << T.distbits) - 1)
                e: do {
                    l < 15 &&
                        ((f += S[r++] << l), (l += 8), (f += S[r++] << l), (l += 8)),
                        (v = h[f & y])
                    t: for (; ;) {
                        if (
                            ((b = v >>> 24),
                                (f >>>= b),
                                (l -= b),
                                (b = (v >>> 16) & 255),
                                0 === b)
                        )
                            A[n++] = 65535 & v
                        else {
                            if (!(16 & b)) {
                                if (0 == (64 & b)) {
                                    v = h[(65535 & v) + (f & ((1 << b) - 1))]
                                    continue t
                                }
                                if (32 & b) {
                                    T.mode = 16191
                                    break e
                                }
                                ; (e.msg = 'invalid literal/length code'), (T.mode = wt)
                                break e
                            }
                            ; (w = 65535 & v),
                                (b &= 15),
                                b &&
                                (l < b && ((f += S[r++] << l), (l += 8)),
                                    (w += f & ((1 << b) - 1)),
                                    (f >>>= b),
                                    (l -= b)),
                                l < 15 &&
                                ((f += S[r++] << l), (l += 8), (f += S[r++] << l), (l += 8)),
                                (v = g[f & m])
                            r: for (; ;) {
                                if (
                                    ((b = v >>> 24),
                                        (f >>>= b),
                                        (l -= b),
                                        (b = (v >>> 16) & 255),
                                        !(16 & b))
                                ) {
                                    if (0 == (64 & b)) {
                                        v = g[(65535 & v) + (f & ((1 << b) - 1))]
                                        continue r
                                    }
                                    ; (e.msg = 'invalid distance code'), (T.mode = wt)
                                    break e
                                }
                                if (
                                    ((E = 65535 & v),
                                        (b &= 15),
                                        l < b &&
                                        ((f += S[r++] << l),
                                            (l += 8),
                                            l < b && ((f += S[r++] << l), (l += 8))),
                                        (E += f & ((1 << b) - 1)),
                                        E > a)
                                ) {
                                    ; (e.msg = 'invalid distance too far back'), (T.mode = wt)
                                    break e
                                }
                                if (((f >>>= b), (l -= b), (b = n - s), E > b)) {
                                    if (((b = E - b), b > c && T.sane)) {
                                        ; (e.msg = 'invalid distance too far back'), (T.mode = wt)
                                        break e
                                    }
                                    if (((I = 0), (C = p), 0 === d)) {
                                        if (((I += u - b), b < w)) {
                                            w -= b
                                            do {
                                                A[n++] = p[I++]
                                            } while (--b)
                                                ; (I = n - E), (C = A)
                                        }
                                    } else if (d < b) {
                                        if (((I += u + d - b), (b -= d), b < w)) {
                                            w -= b
                                            do {
                                                A[n++] = p[I++]
                                            } while (--b)
                                            if (((I = 0), d < w)) {
                                                ; (b = d), (w -= b)
                                                do {
                                                    A[n++] = p[I++]
                                                } while (--b)
                                                    ; (I = n - E), (C = A)
                                            }
                                        }
                                    } else if (((I += d - b), b < w)) {
                                        w -= b
                                        do {
                                            A[n++] = p[I++]
                                        } while (--b)
                                            ; (I = n - E), (C = A)
                                    }
                                    for (; w > 2;)
                                        (A[n++] = C[I++]),
                                            (A[n++] = C[I++]),
                                            (A[n++] = C[I++]),
                                            (w -= 3)
                                    w && ((A[n++] = C[I++]), w > 1 && (A[n++] = C[I++]))
                                } else {
                                    I = n - E
                                    do {
                                        ; (A[n++] = A[I++]),
                                            (A[n++] = A[I++]),
                                            (A[n++] = A[I++]),
                                            (w -= 3)
                                    } while (w > 2)
                                    w && ((A[n++] = A[I++]), w > 1 && (A[n++] = A[I++]))
                                }
                                break
                            }
                        }
                        break
                    }
                } while (r < i && n < o)
                    ; (w = l >> 3),
                        (r -= w),
                        (l -= w << 3),
                        (f &= (1 << l) - 1),
                        (e.next_in = r),
                        (e.next_out = n),
                        (e.avail_in = r < i ? i - r + 5 : 5 - (r - i)),
                        (e.avail_out = n < o ? o - n + 257 : 257 - (n - o)),
                        (T.hold = f),
                        (T.bits = l)
            }
            const It = 15,
                Ct = new Uint16Array([
                    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51,
                    59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
                ]),
                St = new Uint8Array([
                    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19,
                    19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
                ]),
                At = new Uint16Array([
                    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385,
                    513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385,
                    24577, 0, 0,
                ]),
                Tt = new Uint8Array([
                    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23,
                    23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
                ])
            var Nt = (e, t, r, i, n, s, o, a) => {
                const u = a.bits
                let c,
                    d,
                    p,
                    f,
                    l,
                    h,
                    g = 0,
                    y = 0,
                    m = 0,
                    v = 0,
                    b = 0,
                    w = 0,
                    E = 0,
                    I = 0,
                    C = 0,
                    S = 0,
                    A = null
                const T = new Uint16Array(16),
                    N = new Uint16Array(16)
                let _,
                    B,
                    k,
                    R = null
                for (g = 0; g <= It; g++) T[g] = 0
                for (y = 0; y < i; y++) T[t[r + y]]++
                for (b = u, v = It; v >= 1 && 0 === T[v]; v--);
                if ((b > v && (b = v), 0 === v))
                    return (n[s++] = 20971520), (n[s++] = 20971520), (a.bits = 1), 0
                for (m = 1; m < v && 0 === T[m]; m++);
                for (b < m && (b = m), I = 1, g = 1; g <= It; g++)
                    if (((I <<= 1), (I -= T[g]), I < 0)) return -1
                if (I > 0 && (0 === e || 1 !== v)) return -1
                for (N[1] = 0, g = 1; g < It; g++) N[g + 1] = N[g] + T[g]
                for (y = 0; y < i; y++) 0 !== t[r + y] && (o[N[t[r + y]]++] = y)
                if (
                    (0 === e
                        ? ((A = R = o), (h = 20))
                        : 1 === e
                            ? ((A = Ct), (R = St), (h = 257))
                            : ((A = At), (R = Tt), (h = 0)),
                        (S = 0),
                        (y = 0),
                        (g = m),
                        (l = s),
                        (w = b),
                        (E = 0),
                        (p = -1),
                        (C = 1 << b),
                        (f = C - 1),
                        (1 === e && C > 852) || (2 === e && C > 592))
                )
                    return 1
                for (; ;) {
                    ; (_ = g - E),
                        o[y] + 1 < h
                            ? ((B = 0), (k = o[y]))
                            : o[y] >= h
                                ? ((B = R[o[y] - h]), (k = A[o[y] - h]))
                                : ((B = 96), (k = 0)),
                        (c = 1 << (g - E)),
                        (d = 1 << w),
                        (m = d)
                    do {
                        ; (d -= c), (n[l + (S >> E) + d] = (_ << 24) | (B << 16) | k | 0)
                    } while (0 !== d)
                    for (c = 1 << (g - 1); S & c;) c >>= 1
                    if (
                        (0 !== c ? ((S &= c - 1), (S += c)) : (S = 0), y++, 0 == --T[g])
                    ) {
                        if (g === v) break
                        g = t[r + o[y]]
                    }
                    if (g > b && (S & f) !== p) {
                        for (
                            0 === E && (E = b), l += m, w = g - E, I = 1 << w;
                            w + E < v && ((I -= T[w + E]), !(I <= 0));

                        )
                            w++, (I <<= 1)
                        if (((C += 1 << w), (1 === e && C > 852) || (2 === e && C > 592)))
                            return 1
                                ; (p = S & f), (n[p] = (b << 24) | (w << 16) | (l - s) | 0)
                    }
                }
                return (
                    0 !== S && (n[l + S] = ((g - E) << 24) | (64 << 16) | 0),
                    (a.bits = b),
                    0
                )
            }
            const {
                Z_FINISH: _t,
                Z_BLOCK: Bt,
                Z_TREES: kt,
                Z_OK: Rt,
                Z_STREAM_END: Lt,
                Z_NEED_DICT: Mt,
                Z_STREAM_ERROR: xt,
                Z_DATA_ERROR: Dt,
                Z_MEM_ERROR: Pt,
                Z_BUF_ERROR: Ut,
                Z_DEFLATED: Ot,
            } = ie,
                Vt = 16180,
                Kt = 16190,
                zt = 16191,
                Ft = 16192,
                qt = 16194,
                $t = 16199,
                jt = 16200,
                Ht = 16206,
                Gt = 16209,
                Wt = (e) =>
                    ((e >>> 24) & 255) +
                    ((e >>> 8) & 65280) +
                    ((65280 & e) << 8) +
                    ((255 & e) << 24)
            function Qt() {
                ; (this.strm = null),
                    (this.mode = 0),
                    (this.last = !1),
                    (this.wrap = 0),
                    (this.havedict = !1),
                    (this.flags = 0),
                    (this.dmax = 0),
                    (this.check = 0),
                    (this.total = 0),
                    (this.head = null),
                    (this.wbits = 0),
                    (this.wsize = 0),
                    (this.whave = 0),
                    (this.wnext = 0),
                    (this.window = null),
                    (this.hold = 0),
                    (this.bits = 0),
                    (this.length = 0),
                    (this.offset = 0),
                    (this.extra = 0),
                    (this.lencode = null),
                    (this.distcode = null),
                    (this.lenbits = 0),
                    (this.distbits = 0),
                    (this.ncode = 0),
                    (this.nlen = 0),
                    (this.ndist = 0),
                    (this.have = 0),
                    (this.next = null),
                    (this.lens = new Uint16Array(320)),
                    (this.work = new Uint16Array(288)),
                    (this.lendyn = null),
                    (this.distdyn = null),
                    (this.sane = 0),
                    (this.back = 0),
                    (this.was = 0)
            }
            const Zt = (e) => {
                if (!e) return 1
                const t = e.state
                return !t || t.strm !== e || t.mode < Vt || t.mode > 16211 ? 1 : 0
            },
                Xt = (e) => {
                    if (Zt(e)) return xt
                    const t = e.state
                    return (
                        (e.total_in = e.total_out = t.total = 0),
                        (e.msg = ''),
                        t.wrap && (e.adler = 1 & t.wrap),
                        (t.mode = Vt),
                        (t.last = 0),
                        (t.havedict = 0),
                        (t.flags = -1),
                        (t.dmax = 32768),
                        (t.head = null),
                        (t.hold = 0),
                        (t.bits = 0),
                        (t.lencode = t.lendyn = new Int32Array(852)),
                        (t.distcode = t.distdyn = new Int32Array(592)),
                        (t.sane = 1),
                        (t.back = -1),
                        Rt
                    )
                },
                Yt = (e) => {
                    if (Zt(e)) return xt
                    const t = e.state
                    return (t.wsize = 0), (t.whave = 0), (t.wnext = 0), Xt(e)
                },
                Jt = (e, t) => {
                    let r
                    if (Zt(e)) return xt
                    const i = e.state
                    return (
                        t < 0
                            ? ((r = 0), (t = -t))
                            : ((r = 5 + (t >> 4)), t < 48 && (t &= 15)),
                        t && (t < 8 || t > 15)
                            ? xt
                            : (null !== i.window && i.wbits !== t && (i.window = null),
                                (i.wrap = r),
                                (i.wbits = t),
                                Yt(e))
                    )
                },
                er = (e, t) => {
                    if (!e) return xt
                    const r = new Qt()
                        ; (e.state = r), (r.strm = e), (r.window = null), (r.mode = Vt)
                    const i = Jt(e, t)
                    return i !== Rt && (e.state = null), i
                }
            let tr,
                rr,
                ir = !0
            const nr = (e) => {
                if (ir) {
                    ; (tr = new Int32Array(512)), (rr = new Int32Array(32))
                    let t = 0
                    for (; t < 144;) e.lens[t++] = 8
                    for (; t < 256;) e.lens[t++] = 9
                    for (; t < 280;) e.lens[t++] = 7
                    for (; t < 288;) e.lens[t++] = 8
                    for (
                        Nt(1, e.lens, 0, 288, tr, 0, e.work, { bits: 9 }), t = 0;
                        t < 32;

                    )
                        e.lens[t++] = 5
                    Nt(2, e.lens, 0, 32, rr, 0, e.work, { bits: 5 }), (ir = !1)
                }
                ; (e.lencode = tr),
                    (e.lenbits = 9),
                    (e.distcode = rr),
                    (e.distbits = 5)
            },
                sr = (e, t, r, i) => {
                    let n
                    const s = e.state
                    return (
                        null === s.window &&
                        ((s.wsize = 1 << s.wbits),
                            (s.wnext = 0),
                            (s.whave = 0),
                            (s.window = new Uint8Array(s.wsize))),
                        i >= s.wsize
                            ? (s.window.set(t.subarray(r - s.wsize, r), 0),
                                (s.wnext = 0),
                                (s.whave = s.wsize))
                            : ((n = s.wsize - s.wnext),
                                n > i && (n = i),
                                s.window.set(t.subarray(r - i, r - i + n), s.wnext),
                                (i -= n)
                                    ? (s.window.set(t.subarray(r - i, r), 0),
                                        (s.wnext = i),
                                        (s.whave = s.wsize))
                                    : ((s.wnext += n),
                                        s.wnext === s.wsize && (s.wnext = 0),
                                        s.whave < s.wsize && (s.whave += n))),
                        0
                    )
                }
            var or = {
                inflateReset: Yt,
                inflateReset2: Jt,
                inflateResetKeep: Xt,
                inflateInit: (e) => er(e, 15),
                inflateInit2: er,
                inflate: (e, t) => {
                    let r,
                        i,
                        n,
                        s,
                        o,
                        a,
                        u,
                        c,
                        d,
                        p,
                        f,
                        l,
                        h,
                        g,
                        y,
                        m,
                        v,
                        b,
                        w,
                        E,
                        I,
                        C,
                        S = 0
                    const A = new Uint8Array(4)
                    let T, N
                    const _ = new Uint8Array([
                        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
                    ])
                    if (Zt(e) || !e.output || (!e.input && 0 !== e.avail_in)) return xt
                        ; (r = e.state),
                            r.mode === zt && (r.mode = Ft),
                            (o = e.next_out),
                            (n = e.output),
                            (u = e.avail_out),
                            (s = e.next_in),
                            (i = e.input),
                            (a = e.avail_in),
                            (c = r.hold),
                            (d = r.bits),
                            (p = a),
                            (f = u),
                            (C = Rt)
                    e: for (; ;)
                        switch (r.mode) {
                            case Vt:
                                if (0 === r.wrap) {
                                    r.mode = Ft
                                    break
                                }
                                for (; d < 16;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if (2 & r.wrap && 35615 === c) {
                                    0 === r.wbits && (r.wbits = 15),
                                        (r.check = 0),
                                        (A[0] = 255 & c),
                                        (A[1] = (c >>> 8) & 255),
                                        (r.check = te(r.check, A, 2, 0)),
                                        (c = 0),
                                        (d = 0),
                                        (r.mode = 16181)
                                    break
                                }
                                if (
                                    (r.head && (r.head.done = !1),
                                        !(1 & r.wrap) || (((255 & c) << 8) + (c >> 8)) % 31)
                                ) {
                                    ; (e.msg = 'incorrect header check'), (r.mode = Gt)
                                    break
                                }
                                if ((15 & c) !== Ot) {
                                    ; (e.msg = 'unknown compression method'), (r.mode = Gt)
                                    break
                                }
                                if (
                                    ((c >>>= 4),
                                        (d -= 4),
                                        (I = 8 + (15 & c)),
                                        0 === r.wbits && (r.wbits = I),
                                        I > 15 || I > r.wbits)
                                ) {
                                    ; (e.msg = 'invalid window size'), (r.mode = Gt)
                                    break
                                }
                                ; (r.dmax = 1 << r.wbits),
                                    (r.flags = 0),
                                    (e.adler = r.check = 1),
                                    (r.mode = 512 & c ? 16189 : zt),
                                    (c = 0),
                                    (d = 0)
                                break
                            case 16181:
                                for (; d < 16;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if (((r.flags = c), (255 & r.flags) !== Ot)) {
                                    ; (e.msg = 'unknown compression method'), (r.mode = Gt)
                                    break
                                }
                                if (57344 & r.flags) {
                                    ; (e.msg = 'unknown header flags set'), (r.mode = Gt)
                                    break
                                }
                                r.head && (r.head.text = (c >> 8) & 1),
                                    512 & r.flags &&
                                    4 & r.wrap &&
                                    ((A[0] = 255 & c),
                                        (A[1] = (c >>> 8) & 255),
                                        (r.check = te(r.check, A, 2, 0))),
                                    (c = 0),
                                    (d = 0),
                                    (r.mode = 16182)
                            case 16182:
                                for (; d < 32;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                r.head && (r.head.time = c),
                                    512 & r.flags &&
                                    4 & r.wrap &&
                                    ((A[0] = 255 & c),
                                        (A[1] = (c >>> 8) & 255),
                                        (A[2] = (c >>> 16) & 255),
                                        (A[3] = (c >>> 24) & 255),
                                        (r.check = te(r.check, A, 4, 0))),
                                    (c = 0),
                                    (d = 0),
                                    (r.mode = 16183)
                            case 16183:
                                for (; d < 16;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                r.head && ((r.head.xflags = 255 & c), (r.head.os = c >> 8)),
                                    512 & r.flags &&
                                    4 & r.wrap &&
                                    ((A[0] = 255 & c),
                                        (A[1] = (c >>> 8) & 255),
                                        (r.check = te(r.check, A, 2, 0))),
                                    (c = 0),
                                    (d = 0),
                                    (r.mode = 16184)
                            case 16184:
                                if (1024 & r.flags) {
                                    for (; d < 16;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (r.length = c),
                                        r.head && (r.head.extra_len = c),
                                        512 & r.flags &&
                                        4 & r.wrap &&
                                        ((A[0] = 255 & c),
                                            (A[1] = (c >>> 8) & 255),
                                            (r.check = te(r.check, A, 2, 0))),
                                        (c = 0),
                                        (d = 0)
                                } else r.head && (r.head.extra = null)
                                r.mode = 16185
                            case 16185:
                                if (
                                    1024 & r.flags &&
                                    ((l = r.length),
                                        l > a && (l = a),
                                        l &&
                                        (r.head &&
                                            ((I = r.head.extra_len - r.length),
                                                r.head.extra ||
                                                (r.head.extra = new Uint8Array(r.head.extra_len)),
                                                r.head.extra.set(i.subarray(s, s + l), I)),
                                            512 & r.flags &&
                                            4 & r.wrap &&
                                            (r.check = te(r.check, i, l, s)),
                                            (a -= l),
                                            (s += l),
                                            (r.length -= l)),
                                        r.length)
                                )
                                    break e
                                    ; (r.length = 0), (r.mode = 16186)
                            case 16186:
                                if (2048 & r.flags) {
                                    if (0 === a) break e
                                    l = 0
                                    do {
                                        ; (I = i[s + l++]),
                                            r.head &&
                                            I &&
                                            r.length < 65536 &&
                                            (r.head.name += String.fromCharCode(I))
                                    } while (I && l < a)
                                    if (
                                        (512 & r.flags &&
                                            4 & r.wrap &&
                                            (r.check = te(r.check, i, l, s)),
                                            (a -= l),
                                            (s += l),
                                            I)
                                    )
                                        break e
                                } else r.head && (r.head.name = null)
                                    ; (r.length = 0), (r.mode = 16187)
                            case 16187:
                                if (4096 & r.flags) {
                                    if (0 === a) break e
                                    l = 0
                                    do {
                                        ; (I = i[s + l++]),
                                            r.head &&
                                            I &&
                                            r.length < 65536 &&
                                            (r.head.comment += String.fromCharCode(I))
                                    } while (I && l < a)
                                    if (
                                        (512 & r.flags &&
                                            4 & r.wrap &&
                                            (r.check = te(r.check, i, l, s)),
                                            (a -= l),
                                            (s += l),
                                            I)
                                    )
                                        break e
                                } else r.head && (r.head.comment = null)
                                r.mode = 16188
                            case 16188:
                                if (512 & r.flags) {
                                    for (; d < 16;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    if (4 & r.wrap && c !== (65535 & r.check)) {
                                        ; (e.msg = 'header crc mismatch'), (r.mode = Gt)
                                        break
                                    }
                                    ; (c = 0), (d = 0)
                                }
                                r.head &&
                                    ((r.head.hcrc = (r.flags >> 9) & 1), (r.head.done = !0)),
                                    (e.adler = r.check = 0),
                                    (r.mode = zt)
                                break
                            case 16189:
                                for (; d < 32;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                ; (e.adler = r.check = Wt(c)), (c = 0), (d = 0), (r.mode = Kt)
                            case Kt:
                                if (0 === r.havedict)
                                    return (
                                        (e.next_out = o),
                                        (e.avail_out = u),
                                        (e.next_in = s),
                                        (e.avail_in = a),
                                        (r.hold = c),
                                        (r.bits = d),
                                        Mt
                                    )
                                        ; (e.adler = r.check = 1), (r.mode = zt)
                            case zt:
                                if (t === Bt || t === kt) break e
                            case Ft:
                                if (r.last) {
                                    ; (c >>>= 7 & d), (d -= 7 & d), (r.mode = Ht)
                                    break
                                }
                                for (; d < 3;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                switch (((r.last = 1 & c), (c >>>= 1), (d -= 1), 3 & c)) {
                                    case 0:
                                        r.mode = 16193
                                        break
                                    case 1:
                                        if ((nr(r), (r.mode = $t), t === kt)) {
                                            ; (c >>>= 2), (d -= 2)
                                            break e
                                        }
                                        break
                                    case 2:
                                        r.mode = 16196
                                        break
                                    case 3:
                                        ; (e.msg = 'invalid block type'), (r.mode = Gt)
                                }
                                ; (c >>>= 2), (d -= 2)
                                break
                            case 16193:
                                for (c >>>= 7 & d, d -= 7 & d; d < 32;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if ((65535 & c) != ((c >>> 16) ^ 65535)) {
                                    ; (e.msg = 'invalid stored block lengths'), (r.mode = Gt)
                                    break
                                }
                                if (
                                    ((r.length = 65535 & c),
                                        (c = 0),
                                        (d = 0),
                                        (r.mode = qt),
                                        t === kt)
                                )
                                    break e
                            case qt:
                                r.mode = 16195
                            case 16195:
                                if (((l = r.length), l)) {
                                    if ((l > a && (l = a), l > u && (l = u), 0 === l)) break e
                                    n.set(i.subarray(s, s + l), o),
                                        (a -= l),
                                        (s += l),
                                        (u -= l),
                                        (o += l),
                                        (r.length -= l)
                                    break
                                }
                                r.mode = zt
                                break
                            case 16196:
                                for (; d < 14;) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if (
                                    ((r.nlen = 257 + (31 & c)),
                                        (c >>>= 5),
                                        (d -= 5),
                                        (r.ndist = 1 + (31 & c)),
                                        (c >>>= 5),
                                        (d -= 5),
                                        (r.ncode = 4 + (15 & c)),
                                        (c >>>= 4),
                                        (d -= 4),
                                        r.nlen > 286 || r.ndist > 30)
                                ) {
                                    ; (e.msg = 'too many length or distance symbols'),
                                        (r.mode = Gt)
                                    break
                                }
                                ; (r.have = 0), (r.mode = 16197)
                            case 16197:
                                for (; r.have < r.ncode;) {
                                    for (; d < 3;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (r.lens[_[r.have++]] = 7 & c), (c >>>= 3), (d -= 3)
                                }
                                for (; r.have < 19;) r.lens[_[r.have++]] = 0
                                if (
                                    ((r.lencode = r.lendyn),
                                        (r.lenbits = 7),
                                        (T = { bits: r.lenbits }),
                                        (C = Nt(0, r.lens, 0, 19, r.lencode, 0, r.work, T)),
                                        (r.lenbits = T.bits),
                                        C)
                                ) {
                                    ; (e.msg = 'invalid code lengths set'), (r.mode = Gt)
                                    break
                                }
                                ; (r.have = 0), (r.mode = 16198)
                            case 16198:
                                for (; r.have < r.nlen + r.ndist;) {
                                    for (
                                        ;
                                        (S = r.lencode[c & ((1 << r.lenbits) - 1)]),
                                        (y = S >>> 24),
                                        (m = (S >>> 16) & 255),
                                        (v = 65535 & S),
                                        !(y <= d);

                                    ) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    if (v < 16) (c >>>= y), (d -= y), (r.lens[r.have++] = v)
                                    else {
                                        if (16 === v) {
                                            for (N = y + 2; d < N;) {
                                                if (0 === a) break e
                                                a--, (c += i[s++] << d), (d += 8)
                                            }
                                            if (((c >>>= y), (d -= y), 0 === r.have)) {
                                                ; (e.msg = 'invalid bit length repeat'), (r.mode = Gt)
                                                break
                                            }
                                            ; (I = r.lens[r.have - 1]),
                                                (l = 3 + (3 & c)),
                                                (c >>>= 2),
                                                (d -= 2)
                                        } else if (17 === v) {
                                            for (N = y + 3; d < N;) {
                                                if (0 === a) break e
                                                a--, (c += i[s++] << d), (d += 8)
                                            }
                                            ; (c >>>= y),
                                                (d -= y),
                                                (I = 0),
                                                (l = 3 + (7 & c)),
                                                (c >>>= 3),
                                                (d -= 3)
                                        } else {
                                            for (N = y + 7; d < N;) {
                                                if (0 === a) break e
                                                a--, (c += i[s++] << d), (d += 8)
                                            }
                                            ; (c >>>= y),
                                                (d -= y),
                                                (I = 0),
                                                (l = 11 + (127 & c)),
                                                (c >>>= 7),
                                                (d -= 7)
                                        }
                                        if (r.have + l > r.nlen + r.ndist) {
                                            ; (e.msg = 'invalid bit length repeat'), (r.mode = Gt)
                                            break
                                        }
                                        for (; l--;) r.lens[r.have++] = I
                                    }
                                }
                                if (r.mode === Gt) break
                                if (0 === r.lens[256]) {
                                    ; (e.msg = 'invalid code -- missing end-of-block'),
                                        (r.mode = Gt)
                                    break
                                }
                                if (
                                    ((r.lenbits = 9),
                                        (T = { bits: r.lenbits }),
                                        (C = Nt(1, r.lens, 0, r.nlen, r.lencode, 0, r.work, T)),
                                        (r.lenbits = T.bits),
                                        C)
                                ) {
                                    ; (e.msg = 'invalid literal/lengths set'), (r.mode = Gt)
                                    break
                                }
                                if (
                                    ((r.distbits = 6),
                                        (r.distcode = r.distdyn),
                                        (T = { bits: r.distbits }),
                                        (C = Nt(
                                            2,
                                            r.lens,
                                            r.nlen,
                                            r.ndist,
                                            r.distcode,
                                            0,
                                            r.work,
                                            T
                                        )),
                                        (r.distbits = T.bits),
                                        C)
                                ) {
                                    ; (e.msg = 'invalid distances set'), (r.mode = Gt)
                                    break
                                }
                                if (((r.mode = $t), t === kt)) break e
                            case $t:
                                r.mode = jt
                            case jt:
                                if (a >= 6 && u >= 258) {
                                    ; (e.next_out = o),
                                        (e.avail_out = u),
                                        (e.next_in = s),
                                        (e.avail_in = a),
                                        (r.hold = c),
                                        (r.bits = d),
                                        Et(e, f),
                                        (o = e.next_out),
                                        (n = e.output),
                                        (u = e.avail_out),
                                        (s = e.next_in),
                                        (i = e.input),
                                        (a = e.avail_in),
                                        (c = r.hold),
                                        (d = r.bits),
                                        r.mode === zt && (r.back = -1)
                                    break
                                }
                                for (
                                    r.back = 0;
                                    (S = r.lencode[c & ((1 << r.lenbits) - 1)]),
                                    (y = S >>> 24),
                                    (m = (S >>> 16) & 255),
                                    (v = 65535 & S),
                                    !(y <= d);

                                ) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if (m && 0 == (240 & m)) {
                                    for (
                                        b = y, w = m, E = v;
                                        (S = r.lencode[E + ((c & ((1 << (b + w)) - 1)) >> b)]),
                                        (y = S >>> 24),
                                        (m = (S >>> 16) & 255),
                                        (v = 65535 & S),
                                        !(b + y <= d);

                                    ) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (c >>>= b), (d -= b), (r.back += b)
                                }
                                if (
                                    ((c >>>= y), (d -= y), (r.back += y), (r.length = v), 0 === m)
                                ) {
                                    r.mode = 16205
                                    break
                                }
                                if (32 & m) {
                                    ; (r.back = -1), (r.mode = zt)
                                    break
                                }
                                if (64 & m) {
                                    ; (e.msg = 'invalid literal/length code'), (r.mode = Gt)
                                    break
                                }
                                ; (r.extra = 15 & m), (r.mode = 16201)
                            case 16201:
                                if (r.extra) {
                                    for (N = r.extra; d < N;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (r.length += c & ((1 << r.extra) - 1)),
                                        (c >>>= r.extra),
                                        (d -= r.extra),
                                        (r.back += r.extra)
                                }
                                ; (r.was = r.length), (r.mode = 16202)
                            case 16202:
                                for (
                                    ;
                                    (S = r.distcode[c & ((1 << r.distbits) - 1)]),
                                    (y = S >>> 24),
                                    (m = (S >>> 16) & 255),
                                    (v = 65535 & S),
                                    !(y <= d);

                                ) {
                                    if (0 === a) break e
                                    a--, (c += i[s++] << d), (d += 8)
                                }
                                if (0 == (240 & m)) {
                                    for (
                                        b = y, w = m, E = v;
                                        (S = r.distcode[E + ((c & ((1 << (b + w)) - 1)) >> b)]),
                                        (y = S >>> 24),
                                        (m = (S >>> 16) & 255),
                                        (v = 65535 & S),
                                        !(b + y <= d);

                                    ) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (c >>>= b), (d -= b), (r.back += b)
                                }
                                if (((c >>>= y), (d -= y), (r.back += y), 64 & m)) {
                                    ; (e.msg = 'invalid distance code'), (r.mode = Gt)
                                    break
                                }
                                ; (r.offset = v), (r.extra = 15 & m), (r.mode = 16203)
                            case 16203:
                                if (r.extra) {
                                    for (N = r.extra; d < N;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    ; (r.offset += c & ((1 << r.extra) - 1)),
                                        (c >>>= r.extra),
                                        (d -= r.extra),
                                        (r.back += r.extra)
                                }
                                if (r.offset > r.dmax) {
                                    ; (e.msg = 'invalid distance too far back'), (r.mode = Gt)
                                    break
                                }
                                r.mode = 16204
                            case 16204:
                                if (0 === u) break e
                                if (((l = f - u), r.offset > l)) {
                                    if (((l = r.offset - l), l > r.whave && r.sane)) {
                                        ; (e.msg = 'invalid distance too far back'), (r.mode = Gt)
                                        break
                                    }
                                    l > r.wnext
                                        ? ((l -= r.wnext), (h = r.wsize - l))
                                        : (h = r.wnext - l),
                                        l > r.length && (l = r.length),
                                        (g = r.window)
                                } else (g = n), (h = o - r.offset), (l = r.length)
                                l > u && (l = u), (u -= l), (r.length -= l)
                                do {
                                    n[o++] = g[h++]
                                } while (--l)
                                0 === r.length && (r.mode = jt)
                                break
                            case 16205:
                                if (0 === u) break e
                                    ; (n[o++] = r.length), u--, (r.mode = jt)
                                break
                            case Ht:
                                if (r.wrap) {
                                    for (; d < 32;) {
                                        if (0 === a) break e
                                        a--, (c |= i[s++] << d), (d += 8)
                                    }
                                    if (
                                        ((f -= u),
                                            (e.total_out += f),
                                            (r.total += f),
                                            4 & r.wrap &&
                                            f &&
                                            (e.adler = r.check =
                                                r.flags
                                                    ? te(r.check, n, f, o - f)
                                                    : J(r.check, n, f, o - f)),
                                            (f = u),
                                            4 & r.wrap && (r.flags ? c : Wt(c)) !== r.check)
                                    ) {
                                        ; (e.msg = 'incorrect data check'), (r.mode = Gt)
                                        break
                                    }
                                    ; (c = 0), (d = 0)
                                }
                                r.mode = 16207
                            case 16207:
                                if (r.wrap && r.flags) {
                                    for (; d < 32;) {
                                        if (0 === a) break e
                                        a--, (c += i[s++] << d), (d += 8)
                                    }
                                    if (4 & r.wrap && c !== (4294967295 & r.total)) {
                                        ; (e.msg = 'incorrect length check'), (r.mode = Gt)
                                        break
                                    }
                                    ; (c = 0), (d = 0)
                                }
                                r.mode = 16208
                            case 16208:
                                C = Lt
                                break e
                            case Gt:
                                C = Dt
                                break e
                            case 16210:
                                return Pt
                            default:
                                return xt
                        }
                    return (
                        (e.next_out = o),
                        (e.avail_out = u),
                        (e.next_in = s),
                        (e.avail_in = a),
                        (r.hold = c),
                        (r.bits = d),
                        (r.wsize ||
                            (f !== e.avail_out &&
                                r.mode < Gt &&
                                (r.mode < Ht || t !== _t))) &&
                        sr(e, e.output, e.next_out, f - e.avail_out),
                        (p -= e.avail_in),
                        (f -= e.avail_out),
                        (e.total_in += p),
                        (e.total_out += f),
                        (r.total += f),
                        4 & r.wrap &&
                        f &&
                        (e.adler = r.check =
                            r.flags
                                ? te(r.check, n, f, e.next_out - f)
                                : J(r.check, n, f, e.next_out - f)),
                        (e.data_type =
                            r.bits +
                            (r.last ? 64 : 0) +
                            (r.mode === zt ? 128 : 0) +
                            (r.mode === $t || r.mode === qt ? 256 : 0)),
                        ((0 === p && 0 === f) || t === _t) && C === Rt && (C = Ut),
                        C
                    )
                },
                inflateEnd: (e) => {
                    if (Zt(e)) return xt
                    let t = e.state
                    return t.window && (t.window = null), (e.state = null), Rt
                },
                inflateGetHeader: (e, t) => {
                    if (Zt(e)) return xt
                    const r = e.state
                    return 0 == (2 & r.wrap) ? xt : ((r.head = t), (t.done = !1), Rt)
                },
                inflateSetDictionary: (e, t) => {
                    const r = t.length
                    let i, n, s
                    return Zt(e)
                        ? xt
                        : ((i = e.state),
                            0 !== i.wrap && i.mode !== Kt
                                ? xt
                                : i.mode === Kt && ((n = 1), (n = J(n, t, r, 0)), n !== i.check)
                                    ? Dt
                                    : ((s = sr(e, t, r, r)),
                                        s ? ((i.mode = 16210), Pt) : ((i.havedict = 1), Rt)))
                },
                inflateInfo: 'pako inflate (from Nodeca project)',
            }
            var ar = function () {
                ; (this.text = 0),
                    (this.time = 0),
                    (this.xflags = 0),
                    (this.os = 0),
                    (this.extra = null),
                    (this.extra_len = 0),
                    (this.name = ''),
                    (this.comment = ''),
                    (this.hcrc = 0),
                    (this.done = !1)
            }
            const ur = Object.prototype.toString,
                {
                    Z_NO_FLUSH: cr,
                    Z_FINISH: dr,
                    Z_OK: pr,
                    Z_STREAM_END: fr,
                    Z_NEED_DICT: lr,
                    Z_STREAM_ERROR: hr,
                    Z_DATA_ERROR: gr,
                    Z_MEM_ERROR: yr,
                } = ie
            function mr(e) {
                this.options = rt.assign(
                    { chunkSize: 65536, windowBits: 15, to: '' },
                    e || {}
                )
                const t = this.options
                t.raw &&
                    t.windowBits >= 0 &&
                    t.windowBits < 16 &&
                    ((t.windowBits = -t.windowBits),
                        0 === t.windowBits && (t.windowBits = -15)),
                    !(t.windowBits >= 0 && t.windowBits < 16) ||
                    (e && e.windowBits) ||
                    (t.windowBits += 32),
                    t.windowBits > 15 &&
                    t.windowBits < 48 &&
                    0 == (15 & t.windowBits) &&
                    (t.windowBits |= 15),
                    (this.err = 0),
                    (this.msg = ''),
                    (this.ended = !1),
                    (this.chunks = []),
                    (this.strm = new ot()),
                    (this.strm.avail_out = 0)
                let r = or.inflateInit2(this.strm, t.windowBits)
                if (r !== pr) throw new Error(re[r])
                if (
                    ((this.header = new ar()),
                        or.inflateGetHeader(this.strm, this.header),
                        t.dictionary &&
                        ('string' == typeof t.dictionary
                            ? (t.dictionary = st.string2buf(t.dictionary))
                            : '[object ArrayBuffer]' === ur.call(t.dictionary) &&
                            (t.dictionary = new Uint8Array(t.dictionary)),
                            t.raw &&
                            ((r = or.inflateSetDictionary(this.strm, t.dictionary)),
                                r !== pr)))
                )
                    throw new Error(re[r])
            }
            function vr(e, t) {
                const r = new mr(t)
                if ((r.push(e), r.err)) throw r.msg || re[r.err]
                return r.result
            }
            ; (mr.prototype.push = function (e, t) {
                const r = this.strm,
                    i = this.options.chunkSize,
                    n = this.options.dictionary
                let s, o, a
                if (this.ended) return !1
                for (
                    o = t === ~~t ? t : !0 === t ? dr : cr,
                    '[object ArrayBuffer]' === ur.call(e)
                        ? (r.input = new Uint8Array(e))
                        : (r.input = e),
                    r.next_in = 0,
                    r.avail_in = r.input.length;
                    ;

                ) {
                    for (
                        0 === r.avail_out &&
                        ((r.output = new Uint8Array(i)),
                            (r.next_out = 0),
                            (r.avail_out = i)),
                        s = or.inflate(r, o),
                        s === lr &&
                        n &&
                        ((s = or.inflateSetDictionary(r, n)),
                            s === pr ? (s = or.inflate(r, o)) : s === gr && (s = lr));
                        r.avail_in > 0 &&
                        s === fr &&
                        r.state.wrap > 0 &&
                        0 !== e[r.next_in];

                    )
                        or.inflateReset(r), (s = or.inflate(r, o))
                    switch (s) {
                        case hr:
                        case gr:
                        case lr:
                        case yr:
                            return this.onEnd(s), (this.ended = !0), !1
                    }
                    if (
                        ((a = r.avail_out), r.next_out && (0 === r.avail_out || s === fr))
                    )
                        if ('string' === this.options.to) {
                            let e = st.utf8border(r.output, r.next_out),
                                t = r.next_out - e,
                                n = st.buf2string(r.output, e)
                                ; (r.next_out = t),
                                    (r.avail_out = i - t),
                                    t && r.output.set(r.output.subarray(e, e + t), 0),
                                    this.onData(n)
                        } else
                            this.onData(
                                r.output.length === r.next_out
                                    ? r.output
                                    : r.output.subarray(0, r.next_out)
                            )
                    if (s !== pr || 0 !== a) {
                        if (s === fr)
                            return (
                                (s = or.inflateEnd(this.strm)),
                                this.onEnd(s),
                                (this.ended = !0),
                                !0
                            )
                        if (0 === r.avail_in) break
                    }
                }
                return !0
            }),
                (mr.prototype.onData = function (e) {
                    this.chunks.push(e)
                }),
                (mr.prototype.onEnd = function (e) {
                    e === pr &&
                        ('string' === this.options.to
                            ? (this.result = this.chunks.join(''))
                            : (this.result = rt.flattenChunks(this.chunks))),
                        (this.chunks = []),
                        (this.err = e),
                        (this.msg = this.strm.msg)
                })
            var br = {
                Inflate: mr,
                inflate: vr,
                inflateRaw: function (e, t) {
                    return ((t = t || {}).raw = !0), vr(e, t)
                },
                ungzip: vr,
                constants: ie,
            }
            const { Deflate: wr, deflate: Er, deflateRaw: Ir, gzip: Cr } = bt,
                { Inflate: Sr, inflate: Ar, inflateRaw: Tr, ungzip: Nr } = br
            var _r = {
                Deflate: wr,
                deflate: Er,
                deflateRaw: Ir,
                gzip: Cr,
                Inflate: Sr,
                inflate: Ar,
                inflateRaw: Tr,
                ungzip: Nr,
                constants: ie,
            }
            const Br = {
                compress(e) {
                    let t = _r.deflateRaw(new Uint8Array(e)),
                        r = new ArrayBuffer(4 + t.length)
                    new DataView(r).setUint32(0, e.byteLength, !0)
                    let i = new Uint8Array(r)
                    return i.set(t, 4), i.buffer
                },
                decompress: (e) => _r.inflateRaw(new Uint8Array(e.slice(4))).buffer,
            }
            class kr extends Error {
                static ERROR_CODE = {
                    PARSE_ERROR: -32700,
                    INVALID_REQUEST: -32600,
                    METHOD_NOT_FOUND: -32601,
                    INVALID_PARAMS: -32602,
                    INTERNAL_ERROR: -32603,
                }
                constructor(e, t = kr.ERROR_CODE.INTERNAL_ERROR) {
                    super(e), (this.code = t)
                }
            }
            class Rr {
                static DATA_TYPE = {
                    PROTOCOL_LIST: 1,
                    SELECTED_PROTOCOL: 2,
                    SESSION_KEY_EXCHANGE: 3,
                    ERROR: 4,
                    DATA: 5,
                    SERVER_PUB_KEY: 16,
                    ECJPAKE_ROUND_ONE: 32,
                    ECJPAKE_ROUND_TWO: 33,
                }
                static CIPHER_STEPS = {
                    QR: [
                        { name: 'ecdh peer pub', timeout: 6e4 },
                        { name: 'key exchange', timeout: 5e3 },
                    ],
                    passcode: [
                        { name: 'set passcode', timeout: 6e4 },
                        { name: 'ecjpake round one', timeout: 5e3 },
                        { name: 'ecjpake round two', timeout: 5e3 },
                        { name: 'key exchange', timeout: 5e3 },
                    ],
                }
                #Q
                #Z
                #X
                #Y
                #J
                #ee = void 0
                #te = -1
                #re
                #ie
                #ne = !1
                #se = 0
                #oe = new Map()
                #ae = new Map()
                constructor(e) {
                    const t = `ws://${e.host}${e.path ?? '/centrallinkws/'}`
                        ; (this.#Q = new WebSocket(t)),
                            this.#Q.addEventListener('open', (t) => {
                                this.#ue(e.protocols)
                            }),
                            this.#Q.addEventListener('close', (e) => {
                                this.close()
                            }),
                            this.#Q.addEventListener('close', (e) => {
                                this.close()
                            }),
                            this.#Q.addEventListener('message', async (e) => {
                                if ('string' == typeof e.data)
                                    throw new Error('Central link does not accpet ws text data')
                                this.#ce(await e.data.arrayBuffer())
                            })
                }
                close() {
                    this.#de(),
                        (this.#ne = !1),
                        (this.#ie = void 0),
                        (this.#re = void 0),
                        this.#Q.close(),
                        this.onClose?.()
                }
                onClose = () => { }
                onRequestPasscode = () => { }
                setPasscode(e) {
                    try {
                        this.#pe('set passcode', 'passcode'),
                            (this.#Y = new p({ role: 'client', secret: e }))
                        const t = this.#Y.writeRoundOne()
                        let r = new Uint8Array(1 + t.length)
                            ; (r[0] = Rr.DATA_TYPE.ECJPAKE_ROUND_ONE),
                                r.set(t, 1),
                                this.#Q.send(r.buffer)
                    } catch (t) {
                        throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                    }
                }
                onDisplayPubKey = (e, t, r) => { }
                onSecureSessionEstablish = () => { }
                onSecureSessionError = () => { }
                async callAPI(e, t, r = 5e3) {
                    try {
                        if (!this.#ne) throw new Error('secure session not established')
                        const i = this.#le(),
                            n = `${i}`
                        let s = { resolve: void 0, reject: void 0, timeoutHandle: void 0 },
                            o = new Promise((e, t) => {
                                ; (s.resolve = e), (s.reject = t)
                            })
                        return (
                            this.#he({
                                jsonrpc: '2.0',
                                id: i,
                                method: `/api/${e}`,
                                params: t,
                            }),
                            this.#oe.set(n, s),
                            (s.timeoutHandle = setTimeout(() => {
                                s.reject(new Error('Timeout')), this.#oe.delete(n)
                            }, r)),
                            await o
                        )
                    } catch (i) {
                        throw new kr(i?.message ?? `${i}`, i?.code)
                    }
                }
                registerAPI(e, t) {
                    this.#ae.set(`/api/${e}`, { func: t })
                }
                unregisterAPI(e) {
                    this.#ae.delete(`/api/${e}`)
                }
                sendPush(e, t) {
                    try {
                        if (!this.#ne) throw new Error('seucre session not established')
                        this.#he({
                            jsonrpc: '2.0',
                            id: this.#le(),
                            method: `/push/${e}`,
                            params: t,
                        })
                    } catch (r) { }
                }
                registerPush(e, t) {
                    this.#ae.set(`/push/${e}`, { isPushHandler: !0, func: t })
                }
                unregisterPush(e) {
                    this.#ae.delete(`/push/${e}`)
                }
                async #ce(e) {
                    switch (new DataView(e).getUint8(0)) {
                        case Rr.DATA_TYPE.DATA:
                            {
                                if (!this.#ne) throw new Error('Secure sesison not established')
                                const r = this.#ie.decrypt(e.slice(1)),
                                    i = Br.decompress(r),
                                    n = JSON.parse(new TextDecoder().decode(i))
                                if ('number' != typeof n.id)
                                    throw new Error('Invalid json rpc id')
                                if ('result' in n) {
                                    const e = `${n.id}`
                                    let r = this.#oe.get(e)
                                    if (void 0 !== r) {
                                        try {
                                            clearTimeout(r.timeoutHandle)
                                        } catch (t) { }
                                        r.resolve(n.result)
                                    }
                                    this.#oe.delete(e)
                                } else if ('error' in n) {
                                    const e = `${n.id}`
                                    let r = this.#oe.get(e)
                                    if (void 0 !== r) {
                                        try {
                                            clearTimeout(r.timeoutHandle)
                                        } catch (t) { }
                                        r.reject(n.error)
                                    }
                                    this.#oe.delete(e)
                                } else if ('method' in n) {
                                    let e = this.#ae.get(n.method)
                                    if (void 0 === e) break
                                    if (e.isPushHandler) e.func(n.params)
                                    else {
                                        let r = { jsonrpc: '2.0', id: n.id }
                                        try {
                                            r.result = (await e.func(n.params)) ?? {}
                                        } catch (t) {
                                            r.error = {
                                                code: t?.code ?? kr.ERROR_CODE.INTERNAL_ERROR,
                                                message: t?.message ?? `${t}`,
                                            }
                                        }
                                        this.#he(r)
                                    }
                                }
                            }
                            break
                        case Rr.DATA_TYPE.SELECTED_PROTOCOL:
                            try {
                                let t = JSON.parse(new TextDecoder().decode(e.slice(1)))
                                this.#ge(t.protocol),
                                    'QR' === t.protocol
                                        ? ((this.#X = new f()),
                                            this.onDisplayPubKey(
                                                this.#X.writeSelfPub().buffer,
                                                t.params.did,
                                                t.params.id
                                            ))
                                        : 'passcode' === t.protocol && this.onRequestPasscode()
                            } catch (t) {
                                throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                            }
                            break
                        case Rr.DATA_TYPE.SERVER_PUB_KEY:
                            try {
                                this.#pe('ecdh peer pub', 'QR')
                                const t = this.#X.readPeerPub(new Uint8Array(e.slice(1)))
                                this.#ye(t)
                            } catch (t) {
                                throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                            }
                            break
                        case Rr.DATA_TYPE.ECJPAKE_ROUND_ONE:
                            try {
                                this.#pe('ecjpake round one', 'passcode'),
                                    this.#Y.readRoundOne(new Uint8Array(e.slice(1)))
                                const t = this.#Y.writeRoundTwo()
                                let r = new Uint8Array(1 + t.length)
                                    ; (r[0] = Rr.DATA_TYPE.ECJPAKE_ROUND_TWO),
                                        r.set(t, 1),
                                        this.#Q.send(r.buffer)
                            } catch (t) {
                                throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                            }
                            break
                        case Rr.DATA_TYPE.ECJPAKE_ROUND_TWO:
                            try {
                                this.#pe('ecjpake round two', 'passcode')
                                const t = this.#Y.readRoundTwo(new Uint8Array(e.slice(1)))
                                this.#ye(t)
                            } catch (t) {
                                throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                            }
                            break
                        case Rr.DATA_TYPE.SESSION_KEY_EXCHANGE:
                            try {
                                this.#pe('key exchange')
                                const t = new Uint8Array(this.#J.decrypt(e.slice(1))),
                                    r = t.slice(0, 16),
                                    i = t.slice(16, 24)
                                    ; (this.#ie = new h(r, i)),
                                        this.#de(),
                                        (this.#ne = !0),
                                        this.onSecureSessionEstablish?.()
                            } catch (t) {
                                throw (this.#de(), this.#fe(), this.onSecureSessionError?.(), t)
                            }
                            break
                        case Rr.DATA_TYPE.ERROR:
                            this.#de(), this.onSecureSessionError?.()
                    }
                }
                #he(e) {
                    if (!this.#ne) throw new Error('Secure session not established')
                    let t = Br.compress(
                        new TextEncoder().encode(JSON.stringify(e)).buffer
                    ),
                        r = this.#re.encrypt(t),
                        i = new Uint8Array(1 + r.byteLength)
                        ; (i[0] = Rr.DATA_TYPE.DATA),
                            i.set(new Uint8Array(r), 1),
                            this.#Q.send(i.buffer)
                }
                #fe() {
                    let e = new Uint8Array(1)
                        ; (e[0] = Rr.DATA_TYPE.ERROR), this.#Q.send(e.buffer)
                }
                #ue(e) {
                    let t = new TextEncoder().encode(JSON.stringify(e)),
                        r = new Uint8Array(1 + t.length)
                        ; (r[0] = Rr.DATA_TYPE.PROTOCOL_LIST),
                            r.set(t, 1),
                            this.#Q.send(r.buffer),
                            (this.#ee = setTimeout(() => {
                                this.#de(), this.onSecureSessionError?.()
                            }, 5e3))
                }
                #ye(e) {
                    const t = e.slice(0, 16),
                        r = e.slice(16, 24)
                    this.#J = new h(t, r)
                    const i = crypto.getRandomValues(new Uint8Array(24)),
                        n = i.slice(0, 16),
                        s = i.slice(16, 24)
                    this.#re = new h(n, s)
                    const o = this.#J.encrypt(i.buffer)
                    let a = new Uint8Array(1 + o.byteLength)
                        ; (a[0] = Rr.DATA_TYPE.SESSION_KEY_EXCHANGE),
                            a.set(new Uint8Array(o), 1),
                            this.#Q.send(a.buffer)
                }
                #de() {
                    try {
                        clearTimeout(this.#ee)
                    } catch (e) { }
                    ; (this.#Z = void 0),
                        (this.#te = -1),
                        (this.#Y = void 0),
                        (this.#X = void 0),
                        (this.#J = void 0)
                }
                #ge(e) {
                    if ((this.#de(), void 0 === Rr.CIPHER_STEPS[e]))
                        throw new Error(`${e} is not a valid cipher`)
                        ; (this.#Z = e),
                            (this.#te = -1),
                            (this.#ee = setTimeout(() => {
                                this.#de(), this.onSecureSessionError?.()
                            }, Rr.CIPHER_STEPS[e][0].timeout))
                }
                #pe(e, t) {
                    try {
                        if (void 0 === this.#Z)
                            throw new Error('Not in a key exchange session')
                        t = t ?? this.#Z
                        if (void 0 === Rr.CIPHER_STEPS[t])
                            throw new Error(`${t} is not a valid cipher`)
                        if ((this.#te++, Rr.CIPHER_STEPS[t][this.#te].name !== e))
                            throw new Error(
                                `Wrong step ${e}, should be ${Rr.CIPHER_STEPS[t][this.#te].name
                                }`
                            )
                        try {
                            clearTimeout(this.#ee)
                        } catch (r) { }
                        void 0 !== Rr.CIPHER_STEPS[t][this.#te + 1] &&
                            (this.#ee = setTimeout(() => {
                                this.#de(), this.onSecureSessionError?.()
                            }, Rr.CIPHER_STEPS[t][this.#te + 1].timeout))
                    } catch (r) {
                        throw (this.#de(), r)
                    }
                }
                #le() {
                    let e = this.#se
                    return (this.#se = (this.#se + 1) % 4294967295), e
                }
            }
            class Lr {
                static OPS = {
                    comma: { name: 'comma', pri: 0 },
                    add: { name: 'add', pri: 1 },
                    substract: { name: 'substract', pri: 1 },
                    multiply: { name: 'multiply', pri: 2 },
                    devide: { name: 'devide', pri: 2 },
                    modulo: { name: 'modulo', pri: 2 },
                    func: { name: 'func', pri: 3 },
                    number: { name: 'number', pri: 4 },
                }
                static FUNCS = {
                    '': { argc: 1 },
                    abs: { argc: 1 },
                    pow: { argc: 2 },
                    log: { argc: 2 },
                    sin: { argc: 1 },
                    cos: { argc: 1 },
                    tan: { argc: 1 },
                    asin: { argc: 1 },
                    acos: { argc: 1 },
                    atan: { argc: 1 },
                    max: { minArgc: 1 },
                    min: { minArgc: 1 },
                    round: { argc: 1 },
                    floor: { argc: 1 },
                    ceil: { argc: 1 },
                    rand: { argc: 0 },
                    randint: { argc: 2 },
                    now: { argc: 0 },
                    year: { argc: 0 },
                    month: { argc: 0 },
                    date: { argc: 0 },
                    day: { argc: 0 },
                    hours: { argc: 0 },
                    minutes: { argc: 0 },
                    seconds: { argc: 0 },
                    pi: { argc: 0 },
                    e: { argc: 0 },
                }
                check(e) {
                    let t
                    e = e.trim()
                    let r = Lr.OPS.number,
                        i = 0
                    for (let s = 0; s < e.length; s++) {
                        let n = e.charAt(s)
                        if ('(' === n) {
                            0 === i &&
                                r.pri > Lr.OPS.func.pri &&
                                ((r = Lr.OPS.func), (t = s)),
                                i++
                            continue
                        }
                        if (')' === n) {
                            i--
                            continue
                        }
                        if (0 !== i) continue
                        if ('-' === n || '+' === n) {
                            let t = s - 1
                            for (; t >= 0 && ' ' === e.charAt(t);) t--
                            if (['e', '+', '-', '*', '/', '%'].includes(e.charAt(t))) continue
                        }
                        let o = {
                            ',': Lr.OPS.comma,
                            '+': Lr.OPS.add,
                            '-': Lr.OPS.substract,
                            '*': Lr.OPS.multiply,
                            '/': Lr.OPS.devide,
                            '%': Lr.OPS.modulo,
                        }[n]
                        void 0 !== o && o.pri <= r.pri && ((r = o), (t = s))
                    }
                    if (0 !== i) throw new Error('Bracket error')
                    let n = NaN
                    switch (r) {
                        case Lr.OPS.comma:
                            if (void 0 === t) throw new Error('Impossible')
                            return this.check(e.slice(0, t)) + this.check(e.slice(t + 1))
                        case Lr.OPS.add:
                        case Lr.OPS.substract:
                            if (void 0 === t) throw new Error('Impossible')
                            let r = e.slice(0, t),
                                i = 0 === r.trim().length ? 1 : this.check(r),
                                s = this.check(e.slice(t + 1))
                            if (1 !== i) throw new Error('Invalid expression')
                            if (1 !== s) throw new Error('Invalid expression')
                            n = 1
                            break
                        case Lr.OPS.multiply:
                        case Lr.OPS.devide:
                        case Lr.OPS.modulo:
                            {
                                if (void 0 === t) throw new Error('Impossible')
                                let r = this.check(e.slice(0, t)),
                                    i = this.check(e.slice(t + 1))
                                if (1 !== r) throw new Error('Invalid expression')
                                if (1 !== i) throw new Error('Invalid expression')
                                n = 1
                            }
                            break
                        case Lr.OPS.func:
                            {
                                if (void 0 === t) throw new Error('Impossible')
                                let r = e.slice(0, t).trim(),
                                    i = Lr.FUNCS[r]
                                if (void 0 === i) throw new Error('Invalid function')
                                let s = 0
                                if (
                                    (e.slice(t + 1, e.length - 1).match(/^\s*$/) ||
                                        (s = this.check(e.slice(t + 1, e.length - 1))),
                                        'argc' in i && s !== i.argc)
                                )
                                    throw new Error('Invalid arg count')
                                if ('minArgc' in i && s < i.minArgc)
                                    throw new Error('invalid arg count')
                                n = 1
                            }
                            break
                        case Lr.OPS.number:
                            if (e.match(/^\s*$/)) throw new Error('Invalid number')
                            if ('$' !== e && Number.isNaN(Number(e)))
                                throw new Error('Invalid number')
                            n = 1
                    }
                    if (Number.isNaN(n)) throw new Error('Math error')
                    return n
                }
            }
            const Mr = new Lr()
            class xr {
                static checkNode(e) {
                    if ('string' != typeof e.id) throw new Error('Invliad id')
                    if ('object' != typeof e.inputs || null === e.inputs)
                        throw new Error('Invalid inputs')
                    if ('object' != typeof e.outputs || null === e.outputs)
                        throw new Error('Invalid outputs')
                    for (const t in e.outputs) {
                        if (!Array.isArray(e.outputs[t]))
                            throw new Error(`Invalid outputs: ${t}`)
                        for (const r of e.outputs[t])
                            if ('string' != typeof r || 2 !== r.split('.').length)
                                throw new Error(`Invalid connection: ${t}->${r}`)
                    }
                }
            }
            const Dr = {
                property: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid)) throw new Error('Invalid siid')
                        if (!Number.isInteger(e.props.piid)) throw new Error('Invalid piid')
                        if (!['number', 'boolean', 'string'].includes(e.props.dtype))
                            throw new Error('Invalid dtype')
                        if (
                            !Number.isInteger(e.props.loadDelay) &&
                            void 0 !== e.props.loadDelay
                        )
                            throw new Error('Invalid load delay')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                event: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid)) throw new Error('Invalid siid')
                        if (!Number.isInteger(e.props.eiid)) throw new Error('Invalid eiid')
                        for (const t in e.props.dtype)
                            if (!['number', 'boolean', 'string'].includes(e.props.dtype[t]))
                                throw new Error('Invalid dtype')
                        if (!('event' in e.outputs)) throw new Error('No event')
                    }
                },
                holiday: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('boolean' != typeof e.props.inHoliday)
                            throw new Error('Invalid inHoliday')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                sunset: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (
                            'number' != typeof e.props.latitude ||
                            e.props.latitude < -90 ||
                            e.props.latitude > 90
                        )
                            throw new Error('Invalid latitude')
                        if (
                            'number' != typeof e.props.longitude ||
                            e.props.longitude < -180 ||
                            e.props.longitude > 180
                        )
                            throw new Error('Invalid longitude')
                        if ('boolean' != typeof e.props.isSunset)
                            throw new Error('Invalid isSunset')
                        if (
                            'number' != typeof e.props.offset ||
                            !Number.isInteger(e.props.offset)
                        )
                            throw new Error('Invalid offset')
                        if (!Array.isArray(e.props.w) && 'w' in e.props)
                            throw new Error('Invalid w')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                propertyGet: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid)) throw new Error('Invalid siid')
                        if (!Number.isInteger(e.props.piid)) throw new Error('Invalid piid')
                        if (!['number', 'boolean', 'string'].includes(e.props.dtype))
                            throw new Error('Invalid dtype')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                propertyRPC: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid)) throw new Error('Invalid siid')
                        if (!Number.isInteger(e.props.piid)) throw new Error('Invalid piid')
                        if (!('trigger' in e.inputs)) throw new Error('No trigger')
                        if (!('value' in e.inputs)) throw new Error('No value')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                actionRPC: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid)) throw new Error('Invalid siid')
                        if (!Number.isInteger(e.props.aiid)) throw new Error('Invalid aiid')
                        if (!('trigger' in e.inputs)) throw new Error('No trigger')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                logicAnd: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('output' in e.outputs)))
                            throw new Error('No output')
                    }
                },
                logicOr: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('output' in e.outputs)))
                            throw new Error('No output')
                    }
                },
                condition: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('trigger' in e.inputs)))
                            throw new Error('No trigger')
                        if (!('condition' in e.inputs)) throw new Error('No condition')
                        if (!('met' in e.outputs)) throw new Error('No met')
                        if (!('unmet' in e.outputs)) throw new Error('No unmet')
                    }
                },
                compare: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!['>', '<', '>=', '<=', '=', '!='].includes(e.props.operator))
                            throw new Error('Invalid operator')
                        if (!('A' in e.inputs)) throw new Error('No A')
                        if (!('B' in e.inputs)) throw new Error('No B')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                between: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!('min' in e.props)) throw new Error('No min')
                        if (!('max' in e.props)) throw new Error('No max')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                include: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!('list' in e.props)) throw new Error('No list')
                        for (const t of e.props.list)
                            if (!Number.isInteger(t)) throw new Error('Invalid list')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                alarmClock: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!Number.isInteger(e.props.m) || e.props.m > 59 || e.props.m < 0)
                            throw new Error('No m')
                        if (!Number.isInteger(e.props.h) || e.props.h > 23 || e.props.h < 0)
                            throw new Error('No h')
                        if (!Number.isInteger(e.props.s) || e.props.s > 59 || e.props.s < 0)
                            throw new Error('No s')
                        if (!Array.isArray(e.props.w)) throw new Error('Invalid w')
                        let t = new Set([0, 1, 2, 3, 4, 5, 6])
                        for (const r of e.props.w)
                            if (!t.has(r)) throw new Error('Invalid w')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                inTimeRange: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!('start' in e.props)) throw new Error('No start')
                        if (
                            !Number.isInteger(e.props.start.h) ||
                            e.props.start.h < 0 ||
                            e.props.start.h > 23
                        )
                            throw new Error('Invalid start.h')
                        if (
                            !Number.isInteger(e.props.start.m) ||
                            e.props.start.m < 0 ||
                            e.props.start.m > 59
                        )
                            throw new Error('Invalid start.m')
                        if (
                            !Number.isInteger(e.props.start.s) ||
                            e.props.start.s < 0 ||
                            e.props.start.s > 59
                        )
                            throw new Error('Invalid start.s')
                        if (!('end' in e.props)) throw new Error('No end')
                        if (
                            !Number.isInteger(e.props.end.h) ||
                            e.props.end.h < 0 ||
                            e.props.end.h > 23
                        )
                            throw new Error('Invalid end.h')
                        if (
                            !Number.isInteger(e.props.end.m) ||
                            e.props.end.m < 0 ||
                            e.props.end.m > 59
                        )
                            throw new Error('Invalid end.m')
                        if (
                            !Number.isInteger(e.props.end.s) ||
                            e.props.end.s < 0 ||
                            e.props.end.s > 59
                        )
                            throw new Error('Invalid end.s')
                        if (!Array.isArray(e.props.w)) throw new Error('Invalid w')
                        let t = new Set([0, 1, 2, 3, 4, 5, 6])
                        for (const r of e.props.w)
                            if (!t.has(r)) throw new Error('Invalid w')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                delay: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!Number.isInteger(e.props.time) || e.props.time <= 0)
                            throw new Error('Invalid time')
                        if (!('trigger' in e.inputs)) throw new Error('No trigger')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                },
                modeSwitch: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('input' in e.inputs)))
                            throw new Error('input')
                        if (0 === Object.keys(e.outputs).length)
                            throw new Error('No output')
                        for (let t = 0, r = Object.keys(e.outputs).length; t < r; t++)
                            if (!(`output${t}` in e.outputs))
                                throw new Error(`No output${t} found`)
                    }
                },
                onlyNTimes: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('input' in e.inputs)))
                            throw new Error('No inputs.input')
                        if (!('zero' in e.inputs)) throw new Error('No inputs.zero')
                        if (!('props' in e)) throw new Error('No props')
                        if (!('n' in e.props)) throw new Error('No props.n')
                        if (!Number.isInteger(e.props.n) || e.props.n < 1)
                            throw new Error('Invalid n')
                        if (!('default' in e.props)) throw new Error('No props.default')
                        if (!Number.isInteger(e.props.default) || e.props.default < 0)
                            throw new Error('Invalid default')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                eventSequence: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('input1' in e.inputs)))
                            throw new Error('No inputs.input1')
                        if (!('input2' in e.inputs)) throw new Error('No inputs.input2')
                        if (!('props' in e)) throw new Error('No props')
                        if (!('timeout' in e.props)) throw new Error('No props.timeout')
                        if (!Number.isInteger(e.props.timeout) || e.props.timeout <= 0)
                            throw new Error('Invalid timeout')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                loop: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('start' in e.inputs)))
                            throw new Error('No inputs.start')
                        if (!('stop' in e.inputs)) throw new Error('No inputs.stop')
                        if (!('props' in e)) throw new Error('No props')
                        if (!('interval' in e.props)) throw new Error('No props.interval')
                        if (!Number.isInteger(e.props.interval) || e.props.interval <= 0)
                            throw new Error('Invalid interval')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                statusLast: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('input' in e.inputs)))
                            throw new Error('No inputs.input')
                        if (!('props' in e)) throw new Error('No props')
                        if (!('timeout' in e.props)) throw new Error('No props.timeout')
                        if (!Number.isInteger(e.props.timeout) || e.props.timeout <= 0)
                            throw new Error('Invalid interval')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                register: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('setTrue' in e.inputs)))
                            throw new Error('No inputs.setTrue')
                        if (!('setFalse' in e.inputs)) throw new Error('No inputs.setFalse')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                counter: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!('default' in e.props)) throw new Error('No props.default')
                        if (!Number.isInteger(e.props.default))
                            throw new Error('Invalid default')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if (!('zero' in e.inputs)) throw new Error('No inputs.zero')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                sum: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), 0 === Object.keys(e.inputs).length))
                            throw new Error('No input')
                        for (const t in e.inputs)
                            if (
                                'number' != typeof e.inputs[t] &&
                                'boolean' != typeof e.inputs[t] &&
                                null !== e.inputs[t]
                            )
                                throw new Error(`Invalid ${t}`)
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                onLoad: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('output' in e.outputs)))
                            throw new Error('No outputs.output')
                    }
                },
                logicNot: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('output' in e.outputs)))
                            throw new Error('No outputs.output')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if ('boolean' != typeof e.inputs.input && null !== e.inputs.input)
                            throw new Error('Invalid inputs.input')
                    }
                },
                nop: class extends xr {
                    static checkNode(e) {
                        super.checkNode(e)
                    }
                },
                setVar: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('inputs' in e)))
                            throw new Error('No Inputs')
                        if (
                            !['number', 'string'].includes(typeof e.inputs.input) &&
                            null !== e.inputs.input
                        )
                            throw new Error('Invalid inputs.input')
                        if (!('props' in e)) throw new Error('No props')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid props.scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid props.id')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                getVar: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('inputs' in e)))
                            throw new Error('No inputs')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if (!('props' in e)) throw new Error('No props')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid props.scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid props.id')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                varChange: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid props.scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid props.id')
                        if (
                            void 0 !== e.props.loadDelay &&
                            ('number' != typeof e.props.loadDelay ||
                                Number.isNaN(e.props.loadDelay))
                        )
                            throw new Error('Invalid props.loadDelay')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                calculator: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('inputs' in e)))
                            throw new Error('No inputs')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if (!('props' in e)) throw new Error('No props')
                        if (!Array.isArray(e.props.elements))
                            throw new Error('Invalid props.elements')
                        for (const t of e.props.elements)
                            if ('const' === t.type) {
                                if ('string' != typeof t.value)
                                    throw new Error('Invalid element.value')
                            } else {
                                if ('var' !== t.type) throw new Error('Invalid element type')
                                if ('string' != typeof t.scope)
                                    throw new Error('Invalid element.scope')
                                if ('string' != typeof t.id)
                                    throw new Error('Invalid element.id')
                            }
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                strConcat: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('inputs' in e)))
                            throw new Error('No inputs')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if (!('props' in e)) throw new Error('No props')
                        if (!Array.isArray(e.props.elements))
                            throw new Error('Invalid props.elements')
                        for (const t of e.props.elements)
                            if ('const' === t.type) {
                                if ('string' != typeof t.value)
                                    throw new Error('Invalid element.value')
                            } else {
                                if ('var' !== t.type) throw new Error('Invalid element type')
                                if ('string' != typeof t.scope)
                                    throw new Error('Invalid element.scope')
                                if ('string' != typeof t.id)
                                    throw new Error('Invalid element.id')
                            }
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
                typeCast: class extends xr {
                    static checkNode(e) {
                        if ((super.checkNode(e), !('props' in e)))
                            throw new Error('No props')
                        if (!['boolean', 'number', 'string'].includes(e.props.type))
                            throw new Error('Invalid props.type')
                        if ('max' in e.props) {
                            if ('number' != typeof e.props.max || Number.isNaN(e.props.max))
                                throw new Error('Invalid props.max')
                            if ('number' != typeof e.props.min || Number.isNaN(e.props.min))
                                throw new Error('Invalid props.min')
                            if ('number' != typeof e.props.step || Number.isNaN(e.props.step))
                                throw new Error('Invalid props.step')
                        }
                        if (!('inputs' in e)) throw new Error('No inputs')
                        if (
                            !['boolean', 'number', 'string'].includes(
                                typeof e.inputs.input
                            ) &&
                            null !== e.inputs.input
                        )
                            throw new Error('Invalid inputs.input')
                        if (!('output' in e.outputs)) throw new Error('No outputs.output')
                    }
                },
            }
            class Pr {
                static checkWebNode(e) {
                    if (!('id' in e) || 'string' != typeof e.id)
                        throw new Error('Invliad id')
                    if (null !== e.id.match(/[^0-9|a-z|A-Z]/))
                        throw new Error('Invalid charactor in id')
                    if ('string' != typeof e.type) throw new Error('Invalid type')
                    if (!(e.type in Ur)) throw new Error(`Unsupported type: ${e.type}`)
                    if ('object' != typeof e.props || null === e.props)
                        throw new Error('Invalid props')
                    if ('object' != typeof e.inputs || null === e.inputs)
                        throw new Error('Invalid inputs')
                    if ('object' != typeof e.outputs || null === e.outputs)
                        throw new Error('Invalid outputs')
                    for (const t in e.outputs) {
                        if (!Array.isArray(e.outputs[t]))
                            throw new Error(`Invalid outputs: ${t}`)
                        for (const r of e.outputs[t])
                            if ('string' != typeof r || 2 !== r.split('.').length)
                                throw new Error(`Invalid connection: ${t}->${r}`)
                    }
                    if ('object' != typeof e.cfg || null === e.cfg)
                        throw new Error('Invalid cfg')
                    if (!Number.isInteger(e.cfg.version))
                        throw new Error('Invalid cfg.version')
                }
                static convertConnectionName(e, t) {
                    throw new Error(`convertConnectionName not implemented for ${e.type}`)
                }
                static splitNodes(e) {
                    throw new Error(`soplitNodes not implemented for ${e.type}`)
                }
                static groupAsmNodes(e) {
                    let t = new Map()
                    for (const r of e) {
                        let e = r.cfg.oriId,
                            i = t.get(e)
                        void 0 === i && ((i = []), t.set(e, i)), i.push(r)
                    }
                    return Array.from(t.values())
                }
                static checkAsmNodes(e) {
                    for (const r of e) {
                        if ('string' != typeof r.type) throw new Error('Invalid type')
                        if (void 0 === Dr[r.type]) throw new Error(`Unknown type ${r.type}`)
                        if (
                            (Dr[r.type].checkNode(r),
                                'object' != typeof r.cfg || null === r.cfg)
                        )
                            throw new Error('Invalid cfg')
                        if ('string' != typeof r.cfg.oriId) throw new Error('Invalid oriId')
                        if (r.cfg.oriId.match(/[^0-9|a-z|A-Z]/))
                            throw new Error('Invalid oriId')
                        if (!Number.isInteger(r.cfg.subId)) throw new Error('Invalid subId')
                        if ('string' != typeof r.cfg.oriType)
                            throw new Error('Invalid oriType')
                        if (!(r.cfg.oriType in Ur))
                            throw new Error(`Unsupported oriType: ${r.cfg.oriType}`)
                    }
                    let t = e.find((e) => 0 === e.cfg?.subId)
                    if (void 0 === t) throw new Error('No sub node 0')
                    if ('object' != typeof t.cfg.oriCfg || null === t.cfg.oriCfg)
                        throw new Error('Missing oriCfg')
                    if (!Number.isInteger(t.cfg.oriCfg.version))
                        throw new Error('Missing oriCfg.version')
                }
                static mergeNodes(e) {
                    throw new Error('mergeNodes not implemented')
                }
                static recoverConnectionName(e, t) {
                    throw new Error(`recoverConnectionName not implemented for ${e.type}`)
                }
                static replaceLink(e, t, r) {
                    e.forEach((e) => {
                        for (const i in e.outputs) {
                            let n = -1
                            for (; (n = e.outputs[i].findIndex((e) => e === t)) >= 0;)
                                e.outputs[i][n] = r
                        }
                    })
                }
            }
            const Ur = {
                deviceInput: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'deviceInput' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid))
                            throw new Error('Invalid siid')
                        if ('piid' in e.props) {
                            if (!Number.isInteger(e.props.piid))
                                throw new Error('Invalid piid')
                            if (
                                !['int', 'float', 'boolean', 'string'].includes(e.props.dtype)
                            )
                                throw new Error('Invalid dtype')
                            if (!('operator' in e.props))
                                throw new Error('Inavlid operator')
                            if (!('v1' in e.props)) throw new Error('Invalid v1')
                            if ('between' === e.props.operator && !('v2' in e.props))
                                throw new Error('Invalid v2')
                            if ('int' === e.props.dtype) {
                                if (
                                    ![
                                        '>=',
                                        '<=',
                                        '=',
                                        '!=',
                                        '>',
                                        '<',
                                        'between',
                                        'include',
                                    ].includes(e.props.operator)
                                )
                                    throw new Error('Invalid operator')
                                if ('include' === e.props.operator) {
                                    if (!Array.isArray(e.props.v1))
                                        throw new Error('Invalid v1')
                                    for (const t of e.props.v1)
                                        if (!Number.isInteger(t))
                                            throw new Error('Invalid v1 element')
                                } else if (!Number.isInteger(e.props.v1))
                                    throw new Error('Invalid v1')
                                if ('v2' in e.props && !Number.isInteger(e.props.v2))
                                    throw new Error('Invalid v2')
                            } else if ('float' === e.props.dtype) {
                                if (!['>', '<', 'between'].includes(e.props.operator))
                                    throw new Error('Invalid operator')
                                if ('number' != typeof e.props.v1)
                                    throw new Error('Invalid v1')
                                if ('v2' in e.props && 'number' != typeof e.props.v2)
                                    throw new Error('Invalid v2')
                            } else if ('boolean' === e.props.dtype) {
                                if (!['='].includes(e.props.operator))
                                    throw new Error('Invalid operator')
                                if ('boolean' != typeof e.props.v1)
                                    throw new Error('Invalid v1')
                            } else if ('string' === e.props.dtype) {
                                if (!['='].includes(e.props.operator))
                                    throw new Error('Invalid operator')
                                if ('string' != typeof e.props.v1)
                                    throw new Error('Invalid v1')
                            }
                        } else {
                            if (!('eiid' in e.props))
                                throw new Error('Not property nor event')
                            if (!Number.isInteger(e.props.eiid))
                                throw new Error('Invalid eiid')
                            if ('arguments' in e.props) {
                                if (!Array.isArray(e.props.arguments))
                                    throw new Error('Invalid arguments')
                                for (const t of e.props.arguments) {
                                    if (!Number.isInteger(t.piid))
                                        throw new Error('Invalid arg piid')
                                    if (
                                        !['int', 'float', 'string', 'boolean'].includes(t.dtype)
                                    )
                                        throw new Error('Invalid arg dtype')
                                    if ('operator' in t) {
                                        if (!('v1' in t)) throw new Error('Invalid arg v1')
                                        if ('between' === t.operator && !('v2' in t))
                                            throw new Error('Invalid arg v2')
                                        if ('int' === t.dtype) {
                                            if (
                                                ![
                                                    '>=',
                                                    '<=',
                                                    '=',
                                                    '!=',
                                                    '>',
                                                    '<',
                                                    'between',
                                                    'include',
                                                ].includes(t.operator)
                                            )
                                                throw new Error('Invalid arg operator')
                                            if ('include' === t.operator) {
                                                if (!Array.isArray(t.v1))
                                                    throw new Error('Invalid arg v1')
                                                for (const e of t.v1)
                                                    if (!Number.isInteger(e))
                                                        throw new Error('Invalid arg v1 element')
                                            } else if (!Number.isInteger(t.v1))
                                                throw new Error('Invalid arg v1')
                                            if ('v2' in t && !Number.isInteger(t.v2))
                                                throw new Error('Invalid arg v2')
                                        } else if ('float' === t.dtype) {
                                            if (!['>', '<', 'between'].includes(t.operator))
                                                throw new Error('Invalid arg operator')
                                            if ('number' != typeof t.v1)
                                                throw new Error('Invalid arg v1')
                                            if ('v2' in t && 'number' != typeof t.v2)
                                                throw new Error('Invalid arg v2')
                                        } else if ('boolean' === t.dtype) {
                                            if (!['='].includes(t.operator))
                                                throw new Error('Invalid arg operator')
                                            if ('boolean' != typeof t.v1)
                                                throw new Error('Invalid arg v1')
                                        } else if ('string' === t.dtype) {
                                            if (!['='].includes(t.operator))
                                                throw new Error('Invalid operator')
                                            if ('string' != typeof t.v1)
                                                throw new Error('Invalid v1')
                                        }
                                    }
                                }
                            }
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('deviceInput' !== e.type) throw new Error('Wrong type')
                        let t = []
                        if ('piid' in e.props) {
                            let r
                            r =
                                'int' === e.props.dtype || 'float' === e.props.dtype
                                    ? 'number'
                                    : e.props.dtype
                            let i = {
                                type: 'property',
                                id: `${e.id}-0`,
                                props: {
                                    did: e.props.did,
                                    siid: e.props.siid,
                                    piid: e.props.piid,
                                    dtype: r,
                                    loadDelay: e.props.preload ? 0 : void 0,
                                },
                                inputs: {},
                                outputs: { output: [] },
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    userData: { oriProps: e.props },
                                },
                            }
                            if ((t.push(i), 'between' === e.props.operator)) {
                                i.outputs.output.push(`${e.id}-3.input`)
                                let r = {
                                    type: 'between',
                                    id: `${e.id}-3`,
                                    props: { min: e.props.v1, max: e.props.v2 },
                                    inputs: { input: NaN },
                                    outputs: { output: e.outputs.output },
                                    cfg: { oriId: e.id, subId: 3, oriType: e.type },
                                }
                                t.push(r)
                            } else if ('include' === e.props.operator) {
                                i.outputs.output.push(`${e.id}-1.input`)
                                let r = {
                                    type: 'include',
                                    id: `${e.id}-1`,
                                    props: { list: e.props.v1 },
                                    inputs: { input: NaN },
                                    outputs: { output: e.outputs.output },
                                    cfg: { oriId: e.id, subId: 1, oriType: e.type },
                                }
                                t.push(r)
                            } else {
                                i.outputs.output.push(`${e.id}-1.A`)
                                let r = {
                                    type: 'compare',
                                    id: `${e.id}-1`,
                                    props: { operator: e.props.operator },
                                    inputs: { A: NaN, B: e.props.v1 },
                                    outputs: { output: e.outputs.output },
                                    cfg: { oriId: e.id, subId: 1, oriType: e.type },
                                }
                                t.push(r)
                            }
                        } else {
                            let r,
                                i = {}
                            'arguments' in e.props &&
                                e.props.arguments.forEach((e) => {
                                    'int' === e.dtype || 'float' === e.dtype
                                        ? (i[e.piid] = 'number')
                                        : (i[e.piid] = e.dtype)
                                }),
                                (r =
                                    'arguments' in e.props &&
                                        e.props.arguments.find((e) => 'operator' in e)
                                        ? { event: [] }
                                        : { event: e.outputs.output }),
                                e.props.arguments.forEach((e) => {
                                    r[`arg${e.piid}`] = []
                                })
                            let n = {
                                type: 'event',
                                id: `${e.id}-0`,
                                props: {
                                    did: e.props.did,
                                    siid: e.props.siid,
                                    eiid: e.props.eiid,
                                    dtype: i,
                                },
                                inputs: {},
                                outputs: r,
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    userData: { oriProps: e.props },
                                },
                            }
                            if (
                                (t.push(n),
                                    'arguments' in e.props &&
                                    e.props.arguments.find((e) => 'operator' in e))
                            ) {
                                let r = {
                                    type: 'logicAnd',
                                    id: `${e.id}-1`,
                                    props: {},
                                    inputs: {},
                                    outputs: { output: e.outputs.output },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                                }
                                t.push(r)
                                let i = 0
                                e.props.arguments.forEach((s) => {
                                    if ('operator' in s)
                                        if ('between' === s.operator) {
                                            let o = `${e.id}-${i + 2}`
                                            n.outputs[`arg${s.piid}`].push(`${o}.input`),
                                                (r.inputs[`input${i}`] = !1)
                                            let a = {
                                                type: 'between',
                                                id: o,
                                                props: { min: s.v1, max: s.v2 },
                                                inputs: { input: NaN },
                                                outputs: { output: [`${e.id}-1.input${i}`] },
                                                cfg: { oriId: e.id, subId: i + 2, oriType: e.type },
                                            }
                                            t.push(a), i++
                                        } else if ('include' === s.operator) {
                                            let o = `${e.id}-${i + 2}`
                                            n.outputs[`arg${s.piid}`].push(`${o}.input`),
                                                (r.inputs[`input${i}`] = !1)
                                            let a = {
                                                type: 'include',
                                                id: o,
                                                props: { list: s.v1 },
                                                inputs: { input: NaN },
                                                outputs: { output: [`${e.id}-1.input${i}`] },
                                                cfg: { oriId: e.id, subId: i + 2, oriType: e.type },
                                            }
                                            t.push(a), i++
                                        } else {
                                            let o = `${e.id}-${i + 2}`
                                            n.outputs[`arg${s.piid}`].push(`${o}.A`),
                                                (r.inputs[`input${i}`] = !1)
                                            let a = {
                                                type: 'compare',
                                                id: o,
                                                props: { operator: s.operator },
                                                inputs: { A: NaN, B: s.v1 },
                                                outputs: { output: [`${e.id}-1.input${i}`] },
                                                cfg: { oriId: e.id, subId: i + 2, oriType: e.type },
                                            }
                                            t.push(a), i++
                                        }
                                })
                            }
                        }
                        return t
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('property' !== t?.type && 'event' !== t?.type)
                            throw new Error('Invalid node 0')
                        let r,
                            i = t.cfg.oriCfg,
                            n = t.cfg.userData?.oriProps
                        if ('object' != typeof n || null === n)
                            throw new Error('Invalid oriProps')
                        if ('piid' in n) {
                            if ('between' !== n.operator) {
                                if (
                                    ((r = e.find((e) => 1 === e.cfg.subId)),
                                        'compare' !== r?.type && 'include' !== r?.type)
                                )
                                    throw new Error('Invalid tail node')
                            } else if (
                                ((r = e.find((e) => 3 === e.cfg.subId)),
                                    'logicAnd' !== r?.type && 'between' !== r?.type)
                            )
                                throw new Error('Invalid tail node')
                        } else if (
                            'arguments' in n &&
                            n.arguments.find((e) => 'operator' in e)
                        ) {
                            if (
                                ((r = e.find((e) => 1 === e.cfg.subId)),
                                    'logicAnd' !== r?.type)
                            )
                                throw new Error('Invalid tail node')
                        } else if (((r = t), 'event' !== r.type))
                            throw new Error('Invalid tail node')
                        const s = 'event' === r.type ? r.outputs.event : r.outputs.output
                        return {
                            type: 'deviceInput',
                            id: t.cfg.oriId,
                            cfg: i,
                            props: n,
                            inputs: {},
                            outputs: { output: s },
                        }
                    }
                },
                deviceOutput: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'deviceOutput' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid))
                            throw new Error('Invalid siid')
                        if ('piid' in e.props) {
                            if (!Number.isInteger(e.props.piid))
                                throw new Error('Invalid piid')
                            if ('value' in e.props);
                            else {
                                if (!('scope' in e.props))
                                    throw new Error('No value nor scope')
                                if ('string' != typeof e.props.scope)
                                    throw new Error('Invalid scope')
                                if ('string' != typeof e.props.id)
                                    throw new Error('Invalid id')
                                if (!['number', 'boolean', 'string'].includes(e.props.dtype))
                                    throw new Error('Invalid dtype')
                                if ('number' === e.props.dtype) {
                                    if (
                                        'number' != typeof e.props.max ||
                                        Number.isNaN(e.props.max)
                                    )
                                        throw new Error('Invalid max')
                                    if (
                                        'number' != typeof e.props.min ||
                                        Number.isNaN(e.props.min)
                                    )
                                        throw new Error('Invalid min')
                                    if (
                                        'number' != typeof e.props.step ||
                                        Number.isNaN(e.props.step)
                                    )
                                        throw new Error('Invalid step')
                                }
                            }
                        } else {
                            if (!('aiid' in e.props)) throw new Error('No piid or aiid')
                            if (!Number.isInteger(e.props.aiid))
                                throw new Error('Invalid aiid')
                            if ('ins' in e.props) {
                                if (!Array.isArray(e.props.ins))
                                    throw new Error('Invalid ins')
                                for (const t of e.props.ins) {
                                    if (!('piid' in t) || !Number.isInteger(t.piid))
                                        throw new Error('Invalid in.piid')
                                    if ('value' in t);
                                    else {
                                        if (!('scope' in t))
                                            throw new Error('No in.value nor in.scope')
                                        if ('string' != typeof t.scope)
                                            throw new Error('Invalid in.scope')
                                        if ('string' != typeof t.id)
                                            throw new Error('Invalid in.id')
                                        if (!['number', 'boolean', 'string'].includes(t.dtype))
                                            throw new Error('Invalid in.dtype')
                                        if ('number' === t.dtype) {
                                            if ('number' != typeof t.max || Number.isNaN(t.max))
                                                throw new Error('Invalid i.max')
                                            if ('number' != typeof t.min || Number.isNaN(t.min))
                                                throw new Error('Invalid i.min')
                                            if ('number' != typeof t.step || Number.isNaN(t.step))
                                                throw new Error('Invalid i.step')
                                        }
                                    }
                                }
                            }
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        if ('deviceOutput' !== e.type) throw new Error('Wrong type')
                            ; ('piid' in e.props && 'scope' in e.props) ||
                                ('aiid' in e.props &&
                                    void 0 !== e.props.ins.find((e) => 'scope' in e))
                                ? this.replaceLink(t, `${e.id}.trigger`, `${e.id}-0.input0`)
                                : this.replaceLink(t, `${e.id}.trigger`, `${e.id}-0.trigger`)
                    }
                    static recoverConnectionName(e, t) {
                        if ('deviceOutput' !== e.type) throw new Error('Wrong type')
                            ; ('piid' in e.props && 'scope' in e.props) ||
                                ('aiid' in e.props &&
                                    void 0 !== e.props.ins.find((e) => 'scope' in e))
                                ? this.replaceLink(t, `${e.id}-0.input0`, `${e.id}.trigger`)
                                : this.replaceLink(t, `${e.id}-0.trigger`, `${e.id}.trigger`)
                    }
                    static splitNodes(e) {
                        if ('deviceOutput' !== e.type) throw new Error('Wrong type')
                        if ('piid' in e.props) {
                            let t = []
                            return (
                                'scope' in e.props
                                    ? (t.push({
                                        id: `${e.id}-0`,
                                        type: 'logicOr',
                                        props: {},
                                        inputs: { input0: !1 },
                                        outputs: {
                                            output: [`${e.id}-2.input`, `${e.id}-1.trigger`],
                                        },
                                        cfg: {
                                            oriId: e.id,
                                            oriType: e.type,
                                            subId: 0,
                                            oriCfg: e.cfg,
                                        },
                                    }),
                                        t.push({
                                            id: `${e.id}-1`,
                                            type: 'propertyRPC',
                                            props: {
                                                did: e.props.did,
                                                siid: e.props.siid,
                                                piid: e.props.piid,
                                            },
                                            inputs: { trigger: null, value: NaN },
                                            outputs: { output: e.outputs.output },
                                            cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                                        }),
                                        t.push({
                                            id: `${e.id}-2`,
                                            type: 'getVar',
                                            props: { scope: e.props.scope, id: e.props.id },
                                            inputs: { input: null },
                                            outputs: { output: [`${e.id}-3.input`] },
                                            cfg: { oriId: e.id, oriType: e.type, subId: 2 },
                                        }),
                                        t.push({
                                            id: `${e.id}-3`,
                                            type: 'typeCast',
                                            props:
                                                'number' === e.props.dtype
                                                    ? {
                                                        type: 'number',
                                                        min: e.props.min,
                                                        max: e.props.max,
                                                        step: e.props.step,
                                                    }
                                                    : { type: e.props.dtype },
                                            inputs: { input: null },
                                            outputs: { output: [`${e.id}-1.value`] },
                                            cfg: { oriId: e.id, oriType: e.type, subId: 3 },
                                        }))
                                    : t.push({
                                        id: `${e.id}-0`,
                                        type: 'propertyRPC',
                                        props: {
                                            did: e.props.did,
                                            siid: e.props.siid,
                                            piid: e.props.piid,
                                        },
                                        inputs: {
                                            trigger: null,
                                            value: 'value' in e.props ? e.props.value : NaN,
                                        },
                                        outputs: { output: e.outputs.output },
                                        cfg: {
                                            oriId: e.id,
                                            oriType: e.type,
                                            subId: 0,
                                            oriCfg: e.cfg,
                                        },
                                    }),
                                t
                            )
                        }
                        {
                            let t = [],
                                r = !1
                            for (const i of e.props.ins)
                                if ('scope' in i) {
                                    r = !0
                                    break
                                }
                            if (r) {
                                const r = {
                                    id: `${e.id}-0`,
                                    type: 'logicOr',
                                    props: {},
                                    inputs: { input0: !1 },
                                    outputs: { output: [] },
                                    cfg: {
                                        oriId: e.id,
                                        oriType: e.type,
                                        subId: 0,
                                        oriCfg: e.cfg,
                                    },
                                }
                                t.push(r)
                                const i = {
                                    id: `${e.id}-1`,
                                    type: 'actionRPC',
                                    props: {
                                        did: e.props.did,
                                        siid: e.props.siid,
                                        aiid: e.props.aiid,
                                    },
                                    inputs: { trigger: null },
                                    outputs: { output: e.outputs.output },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                                }
                                t.push(i)
                                let n = 1
                                for (const s of e.props.ins)
                                    'value' in s
                                        ? (i.inputs[`in${s.piid}`] = s.value)
                                        : ((i.inputs[`in${s.piid}`] = NaN),
                                            n++,
                                            t.push({
                                                id: `${e.id}-${n}`,
                                                type: 'getVar',
                                                props: { scope: s.scope, id: s.id },
                                                inputs: { input: null },
                                                outputs: { output: [`${e.id}-${n + 1}.input`] },
                                                cfg: { oriId: e.id, oriType: e.type, subId: n },
                                            }),
                                            r.outputs.output.push(`${e.id}-${n}.input`),
                                            n++,
                                            t.push({
                                                id: `${e.id}-${n}`,
                                                type: 'typeCast',
                                                props:
                                                    'number' === s.dtype
                                                        ? {
                                                            type: s.dtype,
                                                            min: s.min,
                                                            max: s.max,
                                                            step: s.step,
                                                        }
                                                        : { type: s.dtype },
                                                inputs: { input: null },
                                                outputs: { output: [`${e.id}-1.in${s.piid}`] },
                                                cfg: { oriId: e.id, oriType: e.type, subId: n },
                                            }))
                                r.outputs.output.push(`${e.id}-1.trigger`)
                            } else {
                                let r = {
                                    id: `${e.id}-0`,
                                    type: 'actionRPC',
                                    props: {
                                        did: e.props.did,
                                        siid: e.props.siid,
                                        aiid: e.props.aiid,
                                    },
                                    inputs: { trigger: null },
                                    outputs: { output: e.outputs.output },
                                    cfg: {
                                        oriId: e.id,
                                        oriType: e.type,
                                        subId: 0,
                                        oriCfg: e.cfg,
                                    },
                                }
                                t.push(r)
                                for (const t of e.props.ins)
                                    'value' in t && (r.inputs[`in${t.piid}`] = t.value)
                            }
                            return t
                        }
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if (void 0 === t) throw new Error('No sub node 0')
                        if ('propertyRPC' === t.type) {
                            return {
                                id: t.cfg.oriId,
                                type: 'deviceOutput',
                                props: {
                                    did: t.props.did,
                                    siid: t.props.siid,
                                    piid: t.props.piid,
                                    value: t.inputs.value,
                                },
                                inputs: { trigger: null },
                                outputs: { output: t.outputs.output },
                                cfg: t.cfg.oriCfg,
                            }
                        }
                        if ('actionRPC' === t.type) {
                            let e = {
                                id: t.cfg.oriId,
                                type: 'deviceOutput',
                                props: {
                                    did: t.props.did,
                                    siid: t.props.siid,
                                    aiid: t.props.aiid,
                                    ins: [],
                                },
                                inputs: { trigger: null },
                                outputs: { output: t.outputs.output },
                                cfg: t.cfg.oriCfg,
                            }
                            if (!('ins' in e.props)) throw new Error('WTF?')
                            for (const r in t.inputs)
                                if (r.startsWith('in')) {
                                    let i = Number(r.substring(2))
                                    e.props.ins.push({ piid: i, value: t.inputs[r] })
                                }
                            return e
                        }
                        if ('logicOr' === t.type) {
                            const r = e.find((e) => 1 === e.cfg.subId)
                            if (void 0 === r) throw new Error('Invalid sub node 1')
                            if ('propertyRPC' === r.type) {
                                const i = e.find((e) => 2 === e.cfg.subId)
                                if ('getVar' !== i?.type)
                                    throw new Error('Invalid sub node 2')
                                const n = e.find((e) => 3 === e.cfg.subId)
                                if ('typeCast' !== n?.type)
                                    throw new Error('Invalid sub node 3')
                                if ('number' === n?.props.type && !('max' in n.props))
                                    throw new Error('Invalid sub node 3')
                                return {
                                    id: t.cfg.oriId,
                                    type: 'deviceOutput',
                                    props:
                                        'number' === n.props.type
                                            ? {
                                                did: r.props.did,
                                                siid: r.props.siid,
                                                piid: r.props.piid,
                                                scope: i.props.scope,
                                                id: i.props.id,
                                                dtype: n.props.type,
                                                min: n.props.min,
                                                max: n.props.max,
                                                step: n.props.step,
                                            }
                                            : {
                                                did: r.props.did,
                                                siid: r.props.siid,
                                                piid: r.props.piid,
                                                scope: i.props.scope,
                                                id: i.props.id,
                                                dtype: n.props.type,
                                            },
                                    inputs: { trigger: null },
                                    outputs: { output: r.outputs.output },
                                    cfg: t.cfg.oriCfg,
                                }
                            }
                            if ('actionRPC' === r.type) {
                                const r = e.find((e) => 1 === e.cfg.subId)
                                if ('actionRPC' !== r?.type)
                                    throw new Error('Invalid sub node 1')
                                let i = {
                                    id: t.cfg.oriId,
                                    type: 'deviceOutput',
                                    props: {
                                        did: r.props.did,
                                        siid: r.props.siid,
                                        aiid: r.props.aiid,
                                        ins: [],
                                    },
                                    inputs: { trigger: null },
                                    outputs: { output: r.outputs.output },
                                    cfg: t.cfg.oriCfg,
                                }
                                if (!('ins' in i.props)) throw new Error('WTF?')
                                for (const e in r.inputs)
                                    if (e.startsWith('in')) {
                                        let t = Number(e.substring(2))
                                        i.props.ins.push({ piid: t, value: r.inputs[e] })
                                    }
                                for (let t = 2; t < e.length; t++) {
                                    let r = e.find((e) => e.cfg.subId === t)
                                    if (void 0 === r) throw new Error(`No sub node ${t}`)
                                    if ('getVar' !== r.type) continue
                                    let n = e.find((e) => e.cfg.subId === t + 1)
                                    if ('typeCast' !== n?.type)
                                        throw new Error('Invalid sub node')
                                    const s = Number(
                                        n.outputs.output[0].split('.')[1].substring(2)
                                    ),
                                        o = i.props.ins.findIndex((e) => e.piid === s)
                                    if (o < 0) throw new Error('Invalid piid')
                                    if ('number' === n.props.type) {
                                        if (!('max' in n.props))
                                            throw new Error('Invalid sub node')
                                        i.props.ins[o] = {
                                            piid: s,
                                            scope: r.props.scope,
                                            id: r.props.id,
                                            dtype: n.props.type,
                                            max: n.props.max,
                                            min: n.props.min,
                                            step: n.props.step,
                                        }
                                    } else
                                        i.props.ins[o] = {
                                            piid: s,
                                            scope: r.props.scope,
                                            id: r.props.id,
                                            dtype: n.props.type,
                                        }
                                }
                                return i
                            }
                            throw new Error('Invalid sub node 1 type')
                        }
                        throw new Error('Invalid sub node 0 type')
                    }
                },
                deviceGet: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'deviceGet' !== e.type))
                            throw new Error('Wrong type')
                        if (!('did' in e.props) || 'string' != typeof e.props.did)
                            throw new Error('Invalid did')
                        if (!('siid' in e.props) || !Number.isInteger(e.props.siid))
                            throw new Error('Invalid siid')
                        if (!('piid' in e.props)) throw new Error('Not a property')
                        if (!Number.isInteger(e.props.piid))
                            throw new Error('Invalid piid')
                        if (
                            !('dtype' in e.props) ||
                            !['int', 'float', 'boolean', 'string'].includes(e.props.dtype)
                        )
                            throw new Error('Invalid dtype')
                        if (!('operator' in e.props)) throw new Error('Inavlid operator')
                        if (!('v1' in e.props)) throw new Error('Invalid v1')
                        if ('between' === e.props.operator && !('v2' in e.props))
                            throw new Error('Invalid v2')
                        if ('int' === e.props.dtype) {
                            if (
                                ![
                                    '>=',
                                    '<=',
                                    '=',
                                    '!=',
                                    '>',
                                    '<',
                                    'between',
                                    'include',
                                ].includes(e.props.operator)
                            )
                                throw new Error('Invalid operator')
                            if ('include' === e.props.operator) {
                                if (!Array.isArray(e.props.v1)) throw new Error('Invalid v1')
                                for (const t of e.props.v1)
                                    if (!Number.isInteger(t)) throw new Error('Invalid v1')
                            } else if (!Number.isInteger(e.props.v1))
                                throw new Error('Invalid v1')
                            if ('v2' in e.props && !Number.isInteger(e.props.v2))
                                throw new Error('Invalid v2')
                        } else if ('float' === e.props.dtype) {
                            if (!['>', '<', 'between'].includes(e.props.operator))
                                throw new Error('Invalid operator')
                            if ('number' != typeof e.props.v1) throw new Error('Invalid v1')
                            if ('v2' in e.props && 'number' != typeof e.props.v2)
                                throw new Error('Invalid v2')
                        } else if ('boolean' === e.props.dtype) {
                            if (!['='].includes(e.props.operator))
                                throw new Error('Invalid operator')
                            if ('boolean' != typeof e.props.v1)
                                throw new Error('Invalid v1')
                        } else if ('string' === e.props.dtype) {
                            if (!['='].includes(e.props.operator))
                                throw new Error('Invalid operator')
                            if ('string' != typeof e.props.v1) throw new Error('Invalid v1')
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                        if (!('output2' in e.outputs)) throw new Error('No output2')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('deviceGet' !== e.type) throw new Error('Wrong type')
                        let t,
                            r = []
                        t =
                            'int' === e.props.dtype || 'float' === e.props.dtype
                                ? 'number'
                                : e.props.dtype
                        let i = {
                            type: 'propertyGet',
                            id: `${e.id}-0`,
                            props: {
                                did: e.props.did,
                                siid: e.props.siid,
                                piid: e.props.piid,
                                dtype: t,
                            },
                            inputs: { trigger: null },
                            outputs: { output: [] },
                            cfg: {
                                oriId: e.id,
                                subId: 0,
                                oriType: e.type,
                                oriCfg: e.cfg,
                                userData: { oriProps: e.props },
                            },
                        }
                        r.push(i)
                        let n = {
                            type: 'logicNot',
                            id: `${e.id}-1`,
                            inputs: { input: null },
                            outputs: { output: e.outputs.output2 },
                            cfg: { oriId: e.id, subId: 1, oriType: e.type },
                        }
                        if ((r.push(n), 'between' === e.props.operator)) {
                            i.outputs.output.push(`${e.id}-4.input`)
                            let t = {
                                type: 'between',
                                id: `${e.id}-4`,
                                props: { min: e.props.v1, max: e.props.v2 },
                                inputs: { input: NaN },
                                outputs: { output: [`${e.id}-1.input`, ...e.outputs.output] },
                                cfg: { oriId: e.id, subId: 4, oriType: e.type },
                            }
                            r.push(t)
                        } else if ('include' === e.props.operator) {
                            i.outputs.output.push(`${e.id}-2.input`)
                            let t = {
                                type: 'include',
                                id: `${e.id}-2`,
                                props: { list: e.props.v1 },
                                inputs: { input: NaN },
                                outputs: { output: [`${e.id}-1.input`, ...e.outputs.output] },
                                cfg: { oriId: e.id, subId: 2, oriType: e.type },
                            }
                            r.push(t)
                        } else {
                            i.outputs.output.push(`${e.id}-2.A`)
                            let t = {
                                type: 'compare',
                                id: `${e.id}-2`,
                                props: { operator: e.props.operator },
                                inputs: { A: NaN, B: e.props.v1 },
                                outputs: { output: [`${e.id}-1.input`, ...e.outputs.output] },
                                cfg: { oriId: e.id, subId: 2, oriType: e.type },
                            }
                            r.push(t)
                        }
                        return r
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('propertyGet' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        const r = t.cfg.userData.oriProps
                        if ('object' != typeof r || null === r)
                            throw new Error('Invalid oriProps')
                        let i,
                            n = e.find((e) => 1 === e.cfg.subId)
                        if ('logicNot' !== n?.type) throw new Error('Invalid sub node 1')
                        if ('between' !== r.operator) {
                            if (
                                ((i = e.find((e) => 2 === e.cfg.subId)),
                                    'compare' !== i?.type && 'include' !== i?.type)
                            )
                                throw new Error('Invalid sub node 2')
                        } else if (
                            ((i = e.find((e) => 4 === e.cfg.subId)),
                                'logicAnd' !== i?.type && 'between' !== i?.type)
                        )
                            throw new Error('Invalid sub node 4')
                        return {
                            type: 'deviceGet',
                            id: t.cfg.oriId,
                            cfg: t.cfg.oriCfg,
                            props: r,
                            inputs: { input: null },
                            outputs: {
                                output: i.outputs.output.slice(1),
                                output2: n.outputs.output,
                            },
                        }
                    }
                },
                alarmClock: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'alarmClock' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.type)
                            throw new Error('Invalid props.type')
                        if ('periodicAlarm' === e.props.type) {
                            if (!Number.isInteger(e.props.hour))
                                throw new Error('Invalid hour')
                            if (e.props.hour < 0 || e.props.hour > 23)
                                throw new Error('Hour out of range')
                            if (!Number.isInteger(e.props.minute))
                                throw new Error('Invalid minute')
                            if (e.props.minute < 0 || e.props.minute > 59)
                                throw new Error('Minute out of range')
                            if (!Number.isInteger(e.props.second))
                                throw new Error('Invalid second')
                            if (e.props.second < 0 || e.props.second > 59)
                                throw new Error('Second out of range')
                            if (
                                'object' != typeof e.props.filter ||
                                null === e.props.filter
                            )
                                throw new Error('Invalid filter')
                            if ('day' in e.props.filter) {
                                if ('inHoliday' in e.props.filter)
                                    throw new Error('Double filter')
                                if (!Array.isArray(e.props.filter.day))
                                    throw new Error('Invalid filter.day')
                                for (const t of e.props.filter.day)
                                    if (t < 0 || t > 6 || !Number.isInteger(t))
                                        throw new Error(`Invalid day:${t}`)
                            }
                            if ('inHoliday' in e.props.filter) {
                                if ('day' in e.props.filter) throw new Error('Double filter')
                                if ('boolean' != typeof e.props.filter.inHoliday)
                                    throw new Error('Invliad filter.inHoliday')
                            }
                        } else {
                            if ('sunset' !== e.props.type)
                                throw new Error('Invalid props.type')
                            if (
                                !('latitude' in e.props) ||
                                'number' != typeof e.props.latitude
                            )
                                throw new Error('Invalid latitude')
                            if (e.props.latitude < -90 || e.props.latitude > 90)
                                throw new Error('Latitude out of range')
                            if (
                                !('longitude' in e.props) ||
                                'number' != typeof e.props.longitude
                            )
                                throw new Error('Invalid longitude')
                            if (e.props.longitude < -180 || e.props.longitude > 180)
                                throw new Error('Longitude out of range')
                            if ('boolean' != typeof e.props.isSunset)
                                throw new Error('Invalid isSunset')
                            if (!Number.isInteger(e.props.offset))
                                throw new Error('Invalid offset')
                            if (
                                'object' != typeof e.props.filter ||
                                null === e.props.filter
                            )
                                throw new Error('Invalid filter')
                            if ('day' in e.props.filter) {
                                if ('inHoliday' in e.props.filter)
                                    throw new Error('Double filter')
                                if (!Array.isArray(e.props.filter.day))
                                    throw new Error('Invalid filter.day')
                                for (const t of e.props.filter.day)
                                    if (t < 0 || t > 6 || !Number.isInteger(t))
                                        throw new Error(`Invalid day:${t}`)
                            }
                            if ('inHoliday' in e.props.filter) {
                                if ('day' in e.props.filter) throw new Error('Double filter')
                                if ('boolean' != typeof e.props.filter.inHoliday)
                                    throw new Error('Invliad filter.inHoliday')
                            }
                        }
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('alarmClock' !== e.type) throw new Error('Wrong type')
                        if ('periodicAlarm' === e.props.type) {
                            let t = [],
                                r = {
                                    id: `${e.id}-0`,
                                    type: 'alarmClock',
                                    props: {
                                        h: e.props.hour,
                                        m: e.props.minute,
                                        s: e.props.second,
                                        w: [0, 1, 2, 3, 4, 5, 6],
                                    },
                                    inputs: {},
                                    outputs: { output: [] },
                                    cfg: {
                                        oriId: e.id,
                                        subId: 0,
                                        oriType: e.type,
                                        oriCfg: e.cfg,
                                        userData: { oriFilter: e.props.filter },
                                    },
                                }
                            if ((t.push(r), 'day' in e.props.filter))
                                (r.outputs.output = e.outputs.output),
                                    (r.props.w = e.props.filter.day)
                            else if ('inHoliday' in e.props.filter) {
                                r.outputs.output.push(`${e.id}-2.trigger`)
                                let i = {
                                    id: `${e.id}-1`,
                                    type: 'holiday',
                                    props: { inHoliday: e.props.filter.inHoliday },
                                    inputs: {},
                                    outputs: { output: [`${e.id}-2.condition`] },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                                }
                                t.push(i)
                                let n = {
                                    id: `${e.id}-2`,
                                    type: 'condition',
                                    props: {},
                                    inputs: { trigger: null, condition: null },
                                    outputs: { met: e.outputs.output, unmet: [] },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 2 },
                                }
                                t.push(n)
                            } else r.outputs.output = e.outputs.output
                            return t
                        }
                        {
                            let t = [],
                                r = {
                                    id: `${e.id}-0`,
                                    type: 'sunset',
                                    props: {
                                        latitude: e.props.latitude,
                                        longitude: e.props.longitude,
                                        isSunset: e.props.isSunset,
                                        offset: 6e4 * e.props.offset,
                                    },
                                    inputs: {},
                                    outputs: { output: [] },
                                    cfg: {
                                        oriId: e.id,
                                        oriType: e.type,
                                        subId: 0,
                                        oriCfg: e.cfg,
                                        userData: { oriFilter: e.props.filter },
                                    },
                                }
                            if ((t.push(r), 'day' in e.props.filter))
                                (r.outputs.output = e.outputs.output),
                                    (r.props.w = e.props.filter.day)
                            else if ('inHoliday' in e.props.filter) {
                                r.outputs.output.push(`${e.id}-2.trigger`)
                                let i = {
                                    id: `${e.id}-1`,
                                    type: 'holiday',
                                    props: { inHoliday: e.props.filter.inHoliday },
                                    inputs: {},
                                    outputs: { output: [`${e.id}-2.condition`] },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                                }
                                t.push(i)
                                let n = {
                                    id: `${e.id}-2`,
                                    type: 'condition',
                                    props: {},
                                    inputs: { trigger: null, condition: null },
                                    outputs: { met: e.outputs.output, unmet: [] },
                                    cfg: { oriId: e.id, oriType: e.type, subId: 2 },
                                }
                                t.push(n)
                            } else r.outputs.output = e.outputs.output
                            return t
                        }
                    }
                    static mergeNodes(e) {
                        let t,
                            r = e.find((e) => 0 === e.cfg.subId)
                        if (void 0 === r) throw new Error('No sub node 0')
                        if ('alarmClock' === r.type)
                            t = {
                                id: r.cfg.oriId,
                                type: 'alarmClock',
                                props: {
                                    type: 'periodicAlarm',
                                    hour: r.props.h,
                                    minute: r.props.m,
                                    second: r.props.s,
                                    filter: r.cfg.userData.oriFilter,
                                },
                                inputs: {},
                                outputs: { output: [] },
                                cfg: r.cfg.oriCfg,
                            }
                        else {
                            if ('sunset' !== r.type) throw new Error('Invalid node0')
                            t = {
                                id: r.cfg.oriId,
                                type: 'alarmClock',
                                props: {
                                    type: 'sunset',
                                    longitude: r.props.longitude,
                                    latitude: r.props.latitude,
                                    offset: (r.props.offset / 6e4) >> 0,
                                    filter: r.cfg.userData.oriFilter,
                                    isSunset: r.props.isSunset,
                                },
                                inputs: {},
                                outputs: { output: [] },
                                cfg: r.cfg.oriCfg,
                            }
                        }
                        let i = e.find((e) => 2 === e.cfg.subId)
                        if (void 0 !== i && 'condition' !== i.type)
                            throw new Error('Invalid sub node 2')
                        return (
                            (t.outputs.output =
                                void 0 !== i ? i.outputs.met : r.outputs.output),
                            t
                        )
                    }
                },
                timeRange: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'timeRange' !== e.type))
                            throw new Error('Wrong type')
                        if ('object' != typeof e.props.start || null === e.props.start)
                            throw new Error('Invalid start')
                        if (!Number.isInteger(e.props.start.hour))
                            throw new Error('Invalid start.hour')
                        if (e.props.start.hour < 0 || e.props.start.hour > 23)
                            throw new Error('Start.hour out of range')
                        if (!Number.isInteger(e.props.start.minute))
                            throw new Error('Invalid start.minute')
                        if (e.props.start.minute < 0 || e.props.start.minute > 59)
                            throw new Error('Start.minute out of range')
                        if (!Number.isInteger(e.props.start.second))
                            throw new Error('Invalid start.second')
                        if (e.props.start.second < 0 || e.props.start.second > 59)
                            throw new Error('Start.second out of range')
                        if ('object' != typeof e.props.end || null === e.props.end)
                            throw new Error('Invalid end')
                        if (!Number.isInteger(e.props.end.hour))
                            throw new Error('Invalid end.hour')
                        if (e.props.end.hour < 0 || e.props.end.hour > 23)
                            throw new Error('end.hour out of range')
                        if (!Number.isInteger(e.props.end.minute))
                            throw new Error('Invalid end.minute')
                        if (e.props.end.minute < 0 || e.props.end.minute > 59)
                            throw new Error('end.minute out of range')
                        if (!Number.isInteger(e.props.end.second))
                            throw new Error('Invalid end.second')
                        if (e.props.end.second < 0 || e.props.end.second > 59)
                            throw new Error('end.second out of range')
                        if ('object' != typeof e.props.filter || null === e.props.filter)
                            throw new Error('Invalid filter')
                        if ('day' in e.props.filter) {
                            if ('inHoliday' in e.props.filter)
                                throw new Error('Double filter')
                            if (!Array.isArray(e.props.filter.day))
                                throw new Error('Invalid day filter')
                            for (const t of e.props.filter.day)
                                if (!Number.isInteger(t) || t < 0 || t > 6)
                                    throw new Error('Invalid day filter')
                        }
                        if ('inHoliday' in e.props.filter) {
                            if ('day' in e.props.filter) throw new Error('Double filter')
                            if ('boolean' != typeof e.props.filter.inHoliday)
                                throw new Error('Invalid holiday filter')
                        }
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('timeRange' !== e.type) throw new Error('Wrong type')
                        let t = [],
                            r = {
                                id: `${e.id}-0`,
                                type: 'inTimeRange',
                                props: {
                                    start: {
                                        h: e.props.start.hour,
                                        m: e.props.start.minute,
                                        s: e.props.start.second,
                                    },
                                    end: {
                                        h: e.props.end.hour,
                                        m: e.props.end.minute,
                                        s: e.props.end.second,
                                    },
                                    w: [0, 1, 2, 3, 4, 5, 6],
                                },
                                inputs: {},
                                outputs: { output: [] },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    subId: 0,
                                    oriCfg: e.cfg,
                                    userData: { oriFilter: e.props.filter },
                                },
                            }
                        if ((t.push(r), 'day' in e.props.filter))
                            (r.outputs.output = e.outputs.output),
                                (r.props.w = e.props.filter.day)
                        else if ('inHoliday' in e.props.filter) {
                            r.outputs.output.push(`${e.id}-2.input0`)
                            let i = {
                                id: `${e.id}-1`,
                                type: 'holiday',
                                props: { inHoliday: e.props.filter.inHoliday },
                                inputs: {},
                                outputs: { output: [`${e.id}-2.input1`] },
                                cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                            }
                            t.push(i)
                            let n = {
                                id: `${e.id}-2`,
                                type: 'logicAnd',
                                props: {},
                                inputs: { input0: null, input1: null },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, oriType: e.type, subId: 2 },
                            }
                            t.push(n)
                        } else r.outputs.output = e.outputs.output
                        return t
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('inTimeRange' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        let r = {
                            id: t.cfg.oriId,
                            type: 'timeRange',
                            cfg: t.cfg.oriCfg,
                            props: {
                                start: {
                                    hour: t.props.start.h,
                                    minute: t.props.start.m,
                                    second: t.props.start.s,
                                },
                                end: {
                                    hour: t.props.end.h,
                                    minute: t.props.end.m,
                                    second: t.props.end.s,
                                },
                                filter: t.cfg.userData.oriFilter,
                            },
                            inputs: {},
                            outputs: { output: [] },
                        },
                            i = e.find((e) => 2 === e.cfg.subId)
                        if (void 0 !== i && 'logicAnd' !== i.type)
                            throw new Error('Invalid sub node 2')
                        return (
                            (r.outputs.output =
                                void 0 === i ? t.outputs.output : i.outputs.output),
                            r
                        )
                    }
                },
                delay: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'delay' !== e.type))
                            throw new Error('Wrong type')
                        if (!Number.isInteger(e.props.timeout))
                            throw new Error('Invalid timeout')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.trigger`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.trigger`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('delay' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'delay',
                                props: { time: e.props.timeout },
                                inputs: { trigger: null },
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('delay' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'delay',
                            cfg: t.cfg.oriCfg,
                            props: { timeout: t.props.time },
                            inputs: { input: null },
                            outputs: { output: t.outputs.output },
                        }
                    }
                },
                signalOr: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'signalOr' !== e.type))
                            throw new Error('Wrong type')
                        for (const t in e.inputs) {
                            if (!t.startsWith('input'))
                                throw new Error('Invalid input name')
                            if (!Number.isInteger(Number(t.substring(5))))
                                throw new Error('Invalid input name')
                            if (null !== e.inputs[t]) throw new Error(`Invalid input ${t}`)
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}.${r}`, `${e.id}-0.${r}`)
                    }
                    static recoverConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}-0.${r}`, `${e.id}.${r}`)
                    }
                    static splitNodes(e) {
                        if ('signalOr' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'logicOr',
                                props: {},
                                inputs: e.inputs,
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    subId: 0,
                                    oriCfg: e.cfg,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('logicOr' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'signalOr',
                            props: {},
                            inputs: t.inputs,
                            outputs: { output: t.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                logicOr: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'logicOr' !== e.type))
                            throw new Error('Wrong type')
                        for (const t in e.inputs) {
                            if (!t.startsWith('input'))
                                throw new Error('Invalid input name')
                            if (!Number.isInteger(Number(t.substring(5))))
                                throw new Error('Invalid input name')
                            if ('boolean' != typeof e.inputs[t] && null !== e.inputs[t])
                                throw new Error(`Invalid input ${t}`)
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}.${r}`, `${e.id}-0.${r}`)
                    }
                    static recoverConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}-0.${r}`, `${e.id}.${r}`)
                    }
                    static splitNodes(e) {
                        if ('logicOr' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'logicOr',
                                props: {},
                                inputs: e.inputs,
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    subId: 0,
                                    oriCfg: e.cfg,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('logicOr' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'logicOr',
                            props: {},
                            inputs: t.inputs,
                            outputs: { output: t.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                logicAnd: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'logicAnd' !== e.type))
                            throw new Error('Wrong type')
                        for (const t in e.inputs) {
                            if (!t.startsWith('input'))
                                throw new Error('Invalid input name')
                            if (!Number.isInteger(Number(t.substring(5))))
                                throw new Error('Invalid input name')
                            if ('boolean' != typeof e.inputs[t] && null !== e.inputs[t])
                                throw new Error(`Invalid input ${t}`)
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}.${r}`, `${e.id}-0.${r}`)
                    }
                    static recoverConnectionName(e, t) {
                        for (const r in e.inputs)
                            this.replaceLink(t, `${e.id}-0.${r}`, `${e.id}.${r}`)
                    }
                    static splitNodes(e) {
                        if ('logicAnd' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'logicAnd',
                                props: {},
                                inputs: e.inputs,
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    subId: 0,
                                    oriCfg: e.cfg,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('logicAnd' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'logicAnd',
                            props: {},
                            inputs: t.inputs,
                            outputs: { output: t.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                logicNot: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'logicNot' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if ('boolean' != typeof e.inputs.input && null !== e.inputs.input)
                            throw new Error('Invalid input')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('logicNot' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'logicNot',
                                inputs: e.inputs,
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    subId: 0,
                                    oriCfg: e.cfg,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('logicNot' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'logicNot',
                            props: {},
                            inputs: t.inputs,
                            outputs: { output: t.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                condition: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'condition' !== e.type))
                            throw new Error('Wrong type')
                        if (!('trigger' in e.inputs)) throw new Error('No trigger')
                        if (null !== e.inputs.trigger) throw new Error('Invlaid trigger')
                        if (!('condition' in e.inputs)) throw new Error('No condition')
                        if (
                            'boolean' != typeof e.inputs.condition &&
                            null !== e.inputs.condition
                        )
                            throw new Error('Invalid condition')
                        if (!('met' in e.outputs)) throw new Error('No met')
                        if (!('unmet' in e.outputs)) throw new Error('No unmet')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.trigger`, `${e.id}-0.trigger`),
                            this.replaceLink(t, `${e.id}.condition`, `${e.id}-0.condition`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.trigger`, `${e.id}.trigger`),
                            this.replaceLink(t, `${e.id}-0.condition`, `${e.id}.condition`)
                    }
                    static splitNodes(e) {
                        if ('condition' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'condition',
                                props: {},
                                inputs: { trigger: null, condition: null },
                                outputs: { met: e.outputs.met, unmet: e.outputs.unmet },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('condition' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'condition',
                            cfg: t.cfg.oriCfg,
                            props: {},
                            inputs: t.inputs,
                            outputs: t.outputs,
                        }
                    }
                },
                loop: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'loop' !== e.type))
                            throw new Error('Wrong type')
                        if (!Number.isInteger(e.props.interval))
                            throw new Error('Invalid interval')
                        if (!('start' in e.inputs)) throw new Error('No start')
                        if (!('stop' in e.inputs)) throw new Error('No stop')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.start`, `${e.id}-0.start`),
                            this.replaceLink(t, `${e.id}.stop`, `${e.id}-0.stop`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.start`, `${e.id}.start`),
                            this.replaceLink(t, `${e.id}-0.stop`, `${e.id}.stop`)
                    }
                    static splitNodes(e) {
                        if ('loop' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'loop',
                                props: { interval: e.props.interval },
                                inputs: { start: null, stop: null },
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('loop' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'loop',
                            cfg: t.cfg.oriCfg,
                            props: { interval: t.props.interval },
                            inputs: t.inputs,
                            outputs: t.outputs,
                        }
                    }
                },
                onlyNTimes: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'onlyNTimes' !== e.type))
                            throw new Error('Wrong type')
                        if (!Number.isInteger(e.props.n) || e.props.n < 1)
                            throw new Error('Invalid n')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if (!('zero' in e.inputs)) throw new Error('No zero')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`),
                            this.replaceLink(t, `${e.id}.zero`, `${e.id}-0.zero`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`),
                            this.replaceLink(t, `${e.id}-0.zero`, `${e.id}.zero`)
                    }
                    static splitNodes(e) {
                        if ('onlyNTimes' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'onlyNTimes',
                                props: { n: e.props.n, default: 0 },
                                inputs: { input: null, zero: null },
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e[0]
                        if ('onlyNTimes' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'onlyNTimes',
                            props: { n: t.props.n },
                            inputs: t.inputs,
                            outputs: t.outputs,
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                counter: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'counter' !== e.type))
                            throw new Error('Wrong type')
                        if (!Number.isInteger(e.props.n) || e.props.n < 1)
                            throw new Error('Invalid n')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if (!('zero' in e.inputs)) throw new Error('No zero')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`),
                            this.replaceLink(t, `${e.id}.zero`, `${e.id}-0.zero`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`),
                            this.replaceLink(t, `${e.id}-0.zero`, `${e.id}.zero`)
                    }
                    static splitNodes(e) {
                        if ('counter' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'counter',
                                props: { default: 0 },
                                inputs: { input: null, zero: null },
                                outputs: { output: [`${e.id}-1.A`] },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                            {
                                id: `${e.id}-1`,
                                type: 'compare',
                                props: { operator: '>=' },
                                inputs: { A: null, B: e.props.n },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, oriType: e.type, subId: 1 },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('counter' !== t?.type) throw new Error('Invalid sub node 0')
                        let r = e.find((e) => 1 === e.cfg.subId)
                        if ('compare' !== r?.type) throw new Error('Invalid sub node 1')
                        if (
                            'number' != typeof r.inputs.B ||
                            !Number.isInteger(r.inputs.B) ||
                            r.inputs.B < 1
                        )
                            throw new Error('Invalid B')
                        return {
                            id: t.cfg.oriId,
                            type: 'counter',
                            cfg: t.cfg.oriCfg,
                            props: { n: r.inputs.B },
                            inputs: { input: null, zero: null },
                            outputs: { output: r.outputs.output },
                        }
                    }
                },
                modeSwitch: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'modeSwitch' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        let t = Object.keys(e.outputs).length
                        for (let r = 0; r < t; r++)
                            if (!(`output${r}` in e.outputs))
                                throw new Error(`output${r} missing`)
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('modeSwitch' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'modeSwitch',
                                props: {},
                                inputs: { input: null },
                                outputs: e.outputs,
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('modeSwitch' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        return {
                            type: 'modeSwitch',
                            id: t.cfg.oriId,
                            cfg: t.cfg.oriCfg,
                            props: {},
                            inputs: { input: null },
                            outputs: t.outputs,
                        }
                    }
                },
                register: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'register' !== e.type))
                            throw new Error('Wrong type')
                        if (!('setTrue' in e.inputs)) throw new Error('No setTrue')
                        if (!('setFalse' in e.inputs)) throw new Error('No setFalse')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.setTrue`, `${e.id}-0.setTrue`),
                            this.replaceLink(t, `${e.id}.setFalse`, `${e.id}-0.setFalse`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.setTrue`, `${e.id}.setTrue`),
                            this.replaceLink(t, `${e.id}-0.setFalse`, `${e.id}.setFalse`)
                    }
                    static splitNodes(e) {
                        if ('register' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'register',
                                inputs: { setTrue: null, setFalse: null },
                                outputs: e.outputs,
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('register' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'register',
                            props: {},
                            inputs: { setTrue: null, setFalse: null },
                            outputs: t.outputs,
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                eventSequence: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'eventSequence' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input1' in e.inputs)) throw new Error('No input1')
                        if (!('input2' in e.inputs)) throw new Error('No input2')
                        if (!('timeout' in e.props)) throw new Error('No timeout')
                        if (!Number.isInteger(e.props.timeout) || e.props.timeout <= 0)
                            throw new Error('Invalid timeout')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input1`, `${e.id}-0.input1`),
                            this.replaceLink(t, `${e.id}.input2`, `${e.id}-0.input2`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input1`, `${e.id}.input1`),
                            this.replaceLink(t, `${e.id}-0.input2`, `${e.id}.input2`)
                    }
                    static splitNodes(e) {
                        if ('eventSequence' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'eventSequence',
                                props: { timeout: e.props.timeout },
                                inputs: { input1: null, input2: null },
                                outputs: e.outputs,
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('eventSequence' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'eventSequence',
                            props: { timeout: t.props.timeout },
                            inputs: { input1: null, input2: null },
                            outputs: t.outputs,
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                statusLast: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'statusLast' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if (!('output' in e.outputs)) throw new Error('No output')
                        if (!('timeout' in e.props)) throw new Error('No timeout')
                        if (!Number.isInteger(e.props.timeout) || e.props.timeout <= 0)
                            throw new Error('Invalid timeout')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('statusLast' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                type: 'statusLast',
                                id: `${e.id}-0`,
                                props: { timeout: e.props.timeout },
                                inputs: { input: null },
                                outputs: e.outputs,
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('statusLast' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: 'statusLast',
                            props: { timeout: t.props.timeout },
                            inputs: { input: null },
                            outputs: t.outputs,
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                onLoad: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'onLoad' !== e.type))
                            throw new Error('Wrong type')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('onLoad' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'onLoad',
                                inputs: {},
                                outputs: { output: e.outputs.output },
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if ('onLoad' !== t?.type) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: t.cfg.oriType,
                            cfg: t.cfg.oriCfg,
                            props: {},
                            inputs: {},
                            outputs: { output: t.outputs.output },
                        }
                    }
                },
                nop: class extends Pr {
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('nop' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                id: `${e.id}-0`,
                                type: 'nop',
                                props: {},
                                inputs: {},
                                outputs: {},
                                cfg: {
                                    oriId: e.id,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    subId: 0,
                                },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        let t = e.find((e) => 0 === e.cfg.subId)
                        if (void 0 === t) throw new Error('Invalid sub node 0')
                        return {
                            id: t.cfg.oriId,
                            type: t.cfg.oriType,
                            cfg: t.cfg.oriCfg,
                            props: {},
                            inputs: {},
                            outputs: {},
                        }
                    }
                },
                deviceInputSetVar: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'deviceInputSetVar' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid))
                            throw new Error('Invalid siid')
                        if ('piid' in e.props) {
                            if (!Number.isInteger(e.props.piid))
                                throw new Error('Invalid piid')
                            if (!['number', 'boolean', 'string'].includes(e.props.dtype))
                                throw new Error('Invalid dtype')
                            if ('string' != typeof e.props.scope)
                                throw new Error('Invalid scope')
                            if ('string' != typeof e.props.id)
                                throw new Error('Invalid var id')
                            if ('preload' in e.props && 'boolean' != typeof e.props.preload)
                                throw new Error('Invalid preload')
                        } else {
                            if (!('eiid' in e.props))
                                throw new Error('Not property nor event')
                            if (!Number.isInteger(e.props.eiid))
                                throw new Error('Invalid eiid')
                            if (!Array.isArray(e.props.arguments))
                                throw new Error('Invalid arguments')
                            for (const t of e.props.arguments) {
                                if (!Number.isInteger(t.piid))
                                    throw new Error('Invalid arg piid')
                                if (!['number', 'boolean', 'string'].includes(t.dtype))
                                    throw new Error('Invalid dtype')
                                if ('scope' in t) {
                                    if ('string' != typeof t.scope)
                                        throw new Error('Invalid scope')
                                    if ('string' != typeof t.id)
                                        throw new Error('Invalid var id')
                                }
                            }
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('deviceInputSetVar' !== e.type) throw new Error('Wrong type')
                        let t = []
                        if ('piid' in e.props) {
                            let r = {
                                type: 'property',
                                id: `${e.id}-0`,
                                props: {
                                    did: e.props.did,
                                    siid: e.props.siid,
                                    piid: e.props.piid,
                                    dtype: e.props.dtype,
                                    loadDelay: e.props.preload ? 0 : void 0,
                                },
                                inputs: {},
                                outputs: { output: [`${e.id}-1.input`] },
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    userData: { oriProps: e.props },
                                },
                            }
                            t.push(r)
                            let i = {
                                type: 'typeCast',
                                id: `${e.id}-1`,
                                props:
                                    'string' === e.props.dtype
                                        ? { type: 'string' }
                                        : { type: 'number' },
                                inputs: { input: null },
                                outputs: { output: [`${e.id}-2.input`] },
                                cfg: { oriId: e.id, subId: 1, oriType: e.type },
                            }
                            t.push(i)
                            let n = {
                                type: 'setVar',
                                id: `${e.id}-2`,
                                props: { scope: e.props.scope, id: e.props.id },
                                inputs: { input: null },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, subId: 2, oriType: e.type },
                            }
                            t.push(n)
                        } else {
                            let r = {}
                            for (const t of e.props.arguments) r[t.piid] = t.dtype
                            let i = { event: e.outputs.output }
                            for (const t of e.props.arguments) i[`arg${t.piid}`] = []
                            let n = {
                                type: 'event',
                                id: `${e.id}-0`,
                                props: {
                                    did: e.props.did,
                                    siid: e.props.siid,
                                    eiid: e.props.eiid,
                                    dtype: r,
                                },
                                inputs: {},
                                outputs: i,
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                    userData: { oriProps: e.props },
                                },
                            }
                            t.push(n)
                            let s = 0
                            for (const o of e.props.arguments) {
                                if (!('scope' in o)) continue
                                s++, n.outputs[`arg${o.piid}`].push(`${e.id}-${s}.input`)
                                let r = {
                                    type: 'typeCast',
                                    id: `${e.id}-${s}`,
                                    props:
                                        'string' === o.dtype
                                            ? { type: 'string' }
                                            : { type: 'number' },
                                    inputs: { input: null },
                                    outputs: { output: [`${e.id}-${s + 1}.input`] },
                                    cfg: { oriId: e.id, subId: s, oriType: e.type },
                                }
                                t.push(r), s++
                                let i = {
                                    type: 'setVar',
                                    id: `${e.id}-${s}`,
                                    props: { scope: o.scope, id: o.id },
                                    inputs: { input: null },
                                    outputs: { output: [] },
                                    cfg: { oriId: e.id, subId: s, oriType: e.type },
                                }
                                t.push(i)
                            }
                        }
                        return t
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('property' !== t?.type && 'event' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        const r = t.cfg.userData?.oriProps
                        if ('object' != typeof r || null === r)
                            throw new Error('Invalid oriProps')
                        let i, n
                        if ('piid' in r) {
                            if (
                                ((i = e.find((e) => 2 === e.cfg.subId)), 'setVar' !== i?.type)
                            )
                                throw new Error('Invalid tail node')
                        } else if (((i = t), 'event' !== i.type))
                            throw new Error('Invalid tail node')
                        return (
                            (n = 'event' === i.type ? i.outputs.event : i.outputs.output),
                            {
                                type: 'deviceInputSetVar',
                                id: t.cfg.oriId,
                                cfg: t.cfg.oriCfg,
                                props: r,
                                inputs: {},
                                outputs: { output: n },
                            }
                        )
                    }
                },
                deviceGetSetVar: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'deviceGetSetVar' !== e.type))
                            throw new Error('Wrong type')
                        if (!('props' in e)) throw new Error('No props')
                        if ('string' != typeof e.props.did) throw new Error('Invalid did')
                        if (!Number.isInteger(e.props.siid))
                            throw new Error('Invalid siid')
                        if (!('piid' in e.props)) throw new Error('Not a property')
                        if (!Number.isInteger(e.props.piid))
                            throw new Error('Invalid piid')
                        if (!['number', 'boolean', 'string'].includes(e.props.dtype))
                            throw new Error('Invalid dtype')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid var id')
                        if (!('inputs' in e)) throw new Error('No inputs')
                        if (!('input' in e.inputs)) throw new Error('No inputs.input')
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('deviceGetSetVar' !== e.type) throw new Error('Wrong type')
                        let t = []
                        const r = {
                            type: 'propertyGet',
                            id: `${e.id}-0`,
                            props: {
                                did: e.props.did,
                                siid: e.props.siid,
                                piid: e.props.piid,
                                dtype: e.props.dtype,
                            },
                            inputs: { trigger: null },
                            outputs: { output: [`${e.id}-1.input`] },
                            cfg: {
                                oriId: e.id,
                                subId: 0,
                                oriType: e.type,
                                oriCfg: e.cfg,
                                userData: { oriProps: e.props },
                            },
                        }
                        t.push(r)
                        const i = {
                            type: 'typeCast',
                            id: `${e.id}-1`,
                            props:
                                'string' === e.props.dtype
                                    ? { type: 'string' }
                                    : { type: 'number' },
                            inputs: { input: null },
                            outputs: { output: [`${e.id}-2.input`] },
                            cfg: { oriId: e.id, subId: 1, oriType: e.type },
                        }
                        t.push(i)
                        const n = {
                            type: 'setVar',
                            id: `${e.id}-2`,
                            props: { scope: e.props.scope, id: e.props.id },
                            inputs: { input: null },
                            outputs: { output: e.outputs.output },
                            cfg: { oriId: e.id, subId: 2, oriType: e.type },
                        }
                        return t.push(n), t
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('propertyGet' !== t?.type)
                            throw new Error('Invalid sub node 0')
                        const r = t.cfg.userData?.oriProps
                        if ('object' != typeof r || null === r)
                            throw new Error('Invalid oriProps')
                        const i = e.find((e) => 2 === e.cfg.subId)
                        if ('setVar' !== i?.type) throw new Error('Invalid sub node 2')
                        return {
                            type: 'deviceGetSetVar',
                            id: t.cfg.oriId,
                            cfg: t.cfg.oriCfg,
                            props: r,
                            inputs: { input: null },
                            outputs: { output: i.outputs.output },
                        }
                    }
                },
                varChange: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'varChange' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid var id')
                        if (!['number', 'string'].includes(e.props.varType))
                            throw new Error('Invalid var type')
                        if ('boolean' != typeof e.props.preload)
                            throw new Error('Invalid preload')
                        if ('string' === e.props.varType) {
                            if ('=' !== e.props.operator)
                                throw new Error('Invalid operator')
                            if ('string' != typeof e.props.v1) throw new Error('Invalid v1')
                        } else {
                            if (
                                !['>=', '<=', '=', '!=', '>', '<', 'between'].includes(
                                    e.props.operator
                                )
                            )
                                throw new Error('Invalid operator')
                            if ('number' != typeof e.props.v1 || Number.isNaN(e.props.v1))
                                throw new Error('Invalid v1')
                            if (
                                'between' === e.props.operator &&
                                ('number' != typeof e.props.v2 || Number.isNaN(e.props.v2))
                            )
                                throw new Error('Invalid v2')
                        }
                        if (!('output' in e.outputs)) throw new Error('No output')
                    }
                    static convertConnectionName(e, t) { }
                    static recoverConnectionName(e, t) { }
                    static splitNodes(e) {
                        if ('varChange' !== e.type) throw new Error('Wrong type')
                        let t = []
                        const r = {
                            type: 'varChange',
                            id: `${e.id}-0`,
                            props: {
                                scope: e.props.scope,
                                id: e.props.id,
                                loadDelay: e.props.preload ? 0 : void 0,
                            },
                            inputs: {},
                            outputs: { output: [] },
                            cfg: {
                                oriId: e.id,
                                subId: 0,
                                oriType: e.type,
                                oriCfg: e.cfg,
                                userData: { oriProps: e.props },
                            },
                        }
                        if ((t.push(r), 'between' === e.props.operator)) {
                            r.outputs.output.push(`${e.id}-3.input`)
                            let i = {
                                type: 'between',
                                id: `${e.id}-3`,
                                props: { min: e.props.v1, max: e.props.v2 },
                                inputs: { input: NaN },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, subId: 3, oriType: e.type },
                            }
                            t.push(i)
                        } else {
                            r.outputs.output.push(`${e.id}-1.A`)
                            let i = {
                                type: 'compare',
                                id: `${e.id}-1`,
                                props: { operator: e.props.operator },
                                inputs: { A: NaN, B: e.props.v1 },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, subId: 1, oriType: e.type },
                            }
                            t.push(i)
                        }
                        return t
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('varChange' !== t?.type) throw new Error('Invalid sub node 0')
                        const r = t.cfg.userData?.oriProps
                        if ('object' != typeof r || null === r)
                            throw new Error('Invalid oriProps')
                        let i
                        if ('between' !== r.operator) {
                            if (
                                ((i = e.find((e) => 1 === e.cfg.subId)),
                                    'compare' !== i?.type)
                            )
                                throw new Error('Invalid tail node')
                        } else if (
                            ((i = e.find((e) => 3 === e.cfg.subId)),
                                'logicAnd' !== i?.type && 'between' !== i?.type)
                        )
                            throw new Error('Invalid tail node')
                        return {
                            type: 'varChange',
                            id: t.cfg.oriId,
                            cfg: t.cfg.oriCfg,
                            props: r,
                            inputs: {},
                            outputs: { output: i.outputs.output },
                        }
                    }
                },
                varGet: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'varGet' !== e.type))
                            throw new Error('Wrong type')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid var id')
                        if (!['number', 'string'].includes(e.props.varType))
                            throw new Error('Invalid var type')
                        if ('string' === e.props.varType) {
                            if ('=' !== e.props.operator)
                                throw new Error('Invalid operator')
                            if ('string' != typeof e.props.v1) throw new Error('Invalid v1')
                        } else {
                            if (
                                !['>=', '<=', '=', '!=', '>', '<', 'between'].includes(
                                    e.props.operator
                                )
                            )
                                throw new Error('Invalid operator')
                            if ('number' != typeof e.props.v1 || Number.isNaN(e.props.v1))
                                throw new Error('Invalid v1')
                            if (
                                'between' === e.props.operator &&
                                ('number' != typeof e.props.v2 || Number.isNaN(e.props.v2))
                            )
                                throw new Error('Invalid v2')
                        }
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if (!('output' in e.outputs)) throw new Error('No output')
                        if (!('output2' in e.outputs)) throw new Error('No output2')
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('varGet' !== e.type) throw new Error('Wrong type')
                        let t = []
                        const r = {
                            type: 'getVar',
                            id: `${e.id}-0`,
                            props: { scope: e.props.scope, id: e.props.id },
                            inputs: { input: null },
                            outputs: { output: [] },
                            cfg: {
                                oriId: e.id,
                                subId: 0,
                                oriType: e.type,
                                oriCfg: e.cfg,
                                userData: { oriProps: e.props },
                            },
                        }
                        t.push(r)
                        const i = {
                            type: 'logicNot',
                            id: `${e.id}-1`,
                            inputs: { input: null },
                            outputs: { output: e.outputs.output2 },
                            cfg: { oriId: e.id, subId: 1, oriType: e.type },
                        }
                        if ((t.push(i), 'between' === e.props.operator)) {
                            r.outputs.output.push(`${e.id}-4.input`)
                            const i = {
                                type: 'between',
                                id: `${e.id}-4`,
                                props: { min: e.props.v1, max: e.props.v2 },
                                inputs: { input: NaN },
                                outputs: { output: [`${e.id}-1.input`, ...e.outputs.output] },
                                cfg: { oriId: e.id, subId: 4, oriType: e.type },
                            }
                            t.push(i)
                        } else {
                            r.outputs.output.push(`${e.id}-2.A`)
                            const i = {
                                type: 'compare',
                                id: `${e.id}-2`,
                                props: { operator: e.props.operator },
                                inputs: { A: NaN, B: e.props.v1 },
                                outputs: { output: [`${e.id}-1.input`, ...e.outputs.output] },
                                cfg: { oriId: e.id, subId: 2, oriType: e.type },
                            }
                            t.push(i)
                        }
                        return t
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('getVar' !== t?.type) throw new Error('Invalid sub node 0')
                        const r = t.cfg.userData?.oriProps
                        if ('object' != typeof r || null === r)
                            throw new Error('Invalid oriProps')
                        const i = e.find((e) => 1 === e.cfg.subId)
                        if ('logicNot' !== i?.type) throw new Error('Invalid sub node 1')
                        let n
                        if ('between' !== r.operator) {
                            if (
                                ((n = e.find((e) => 2 === e.cfg.subId)),
                                    'compare' !== n?.type)
                            )
                                throw new Error('Invalid tail node')
                        } else if (
                            ((n = e.find((e) => 4 === e.cfg.subId)),
                                'logicAnd' !== n?.type && 'between' !== n?.type)
                        )
                            throw new Error('Invalid tail node')
                        return {
                            type: 'varGet',
                            id: t.cfg.oriId,
                            cfg: t.cfg.oriCfg,
                            props: r,
                            inputs: { input: null },
                            outputs: {
                                output: n.outputs.output.slice(1),
                                output2: i.outputs.output,
                            },
                        }
                    }
                },
                varSetNumber: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'varSetNumber' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid var id')
                        if (!Array.isArray(e.props.elements))
                            throw new Error('Invalid elements')
                        for (const r of e.props.elements)
                            if ('const' === r.type) {
                                if ('string' != typeof r.value)
                                    throw new Error('Invalid element value')
                            } else {
                                if ('var' !== r.type) throw new Error('Invalid element type')
                                if ('string' != typeof r.scope)
                                    throw new Error('Invalid element scope')
                                if ('string' != typeof r.id)
                                    throw new Error('Invalid element var id')
                            }
                        let t = e.props.elements
                            .map((e) => ('const' === e.type ? e.value : '$'))
                            .join('')
                        Mr.check(t)
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('varSetNumber' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                type: 'calculator',
                                id: `${e.id}-0`,
                                props: { elements: e.props.elements },
                                inputs: { input: null },
                                outputs: { output: [`${e.id}-1.input`] },
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                },
                            },
                            {
                                type: 'setVar',
                                id: `${e.id}-1`,
                                props: { scope: e.props.scope, id: e.props.id },
                                inputs: { input: null },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, subId: 1, oriType: e.type },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('calculator' !== t?.type) throw new Error('Invalid node0')
                        const r = e.find((e) => 1 === e.cfg.subId)
                        if ('setVar' !== r?.type) throw new Error('Invalid node1')
                        return {
                            type: 'varSetNumber',
                            id: t.cfg.oriId,
                            props: {
                                elements: t.props.elements,
                                scope: r.props.scope,
                                id: r.props.id,
                            },
                            inputs: { input: null },
                            outputs: { output: r.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
                varSetString: class extends Pr {
                    static checkWebNode(e) {
                        if ((super.checkWebNode(e), 'varSetString' !== e.type))
                            throw new Error('Wrong type')
                        if (!('input' in e.inputs)) throw new Error('No input')
                        if ('string' != typeof e.props.scope)
                            throw new Error('Invalid scope')
                        if ('string' != typeof e.props.id)
                            throw new Error('Invalid var id')
                        if (!Array.isArray(e.props.elements))
                            throw new Error('Invalid elements')
                        for (const t of e.props.elements)
                            if ('const' === t.type) {
                                if ('string' != typeof t.value)
                                    throw new Error('Invalid element value')
                            } else {
                                if ('var' !== t.type) throw new Error('Invalid element type')
                                if ('string' != typeof t.scope)
                                    throw new Error('Invalid element scope')
                                if ('string' != typeof t.id)
                                    throw new Error('Invalid element var id')
                            }
                    }
                    static convertConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}.input`, `${e.id}-0.input`)
                    }
                    static recoverConnectionName(e, t) {
                        this.replaceLink(t, `${e.id}-0.input`, `${e.id}.input`)
                    }
                    static splitNodes(e) {
                        if ('varSetString' !== e.type) throw new Error('Wrong type')
                        return [
                            {
                                type: 'strConcat',
                                id: `${e.id}-0`,
                                props: { elements: e.props.elements },
                                inputs: { input: null },
                                outputs: { output: [`${e.id}-1.input`] },
                                cfg: {
                                    oriId: e.id,
                                    subId: 0,
                                    oriType: e.type,
                                    oriCfg: e.cfg,
                                },
                            },
                            {
                                type: 'setVar',
                                id: `${e.id}-1`,
                                props: { scope: e.props.scope, id: e.props.id },
                                inputs: { input: null },
                                outputs: { output: e.outputs.output },
                                cfg: { oriId: e.id, subId: 1, oriType: e.type },
                            },
                        ]
                    }
                    static mergeNodes(e) {
                        const t = e.find((e) => 0 === e.cfg.subId)
                        if ('strConcat' !== t?.type) throw new Error('Invalid node0')
                        const r = e.find((e) => 1 === e.cfg.subId)
                        if ('setVar' !== r?.type) throw new Error('Invalid node1')
                        return {
                            type: 'varSetString',
                            id: t.cfg.oriId,
                            props: {
                                elements: t.props.elements,
                                scope: r.props.scope,
                                id: r.props.id,
                            },
                            inputs: { input: null },
                            outputs: { output: r.outputs.output },
                            cfg: t.cfg.oriCfg,
                        }
                    }
                },
            },
                Or = {
                    webRuleToAsmRule(e) {
                        if (!('id' in e) || 'string' != typeof e.id)
                            throw new Error('Invlaid rule id')
                        if (!('id' in e)) throw new Error('Inavlid cfg')
                        if (e.cfg.id !== e.id) throw new Error('cfg.id and id not matching')
                        if ('boolean' != typeof e.cfg.enable)
                            throw new Error('Invlaid cfg.enable')
                        if (!('nodes' in e) || !Array.isArray(e.nodes))
                            throw new Error('Invalid nodes')
                        let t = JSON.parse(JSON.stringify(e.nodes))
                        for (const n of t) Ur[n.type].checkWebNode(n)
                        for (let n of t) Ur[n.type].convertConnectionName(n, t)
                        let r = []
                        for (let n of t) r.push(...Ur[n.type].splitNodes(n))
                        let i = { id: e.id, cfg: e.cfg, nodes: r }
                        return JSON.parse(JSON.stringify(i))
                    },
                    asmRuleToWebRule(e) {
                        if (!('id' in e) || 'string' != typeof e.id)
                            throw new Error('Invlaid rule id')
                        if (!('id' in e)) throw new Error('Inavlid cfg')
                        if (e.cfg.id !== e.id) throw new Error('cfg.id and id not matching')
                        if ('boolean' != typeof e.cfg.enable)
                            throw new Error('Invlaid cfg.enable')
                        if (!('nodes' in e) || !Array.isArray(e.nodes))
                            throw new Error('Invalid nodes')
                        for (const s of e.nodes) {
                            if (!('cfg' in s)) throw new Error('Invalid node cfg')
                            if (!('oriId' in s.cfg) || 'string' != typeof s.cfg.oriId)
                                throw new Error('Invalid node cfg.oriId')
                            if (!('subId' in s.cfg) || !Number.isInteger(s.cfg.subId))
                                throw new Error('Invalid node cfg.subId')
                            if (!('oriType' in s.cfg) || 'string' != typeof s.cfg.oriType)
                                throw new Error('Invalid node cfg.oriType')
                        }
                        let t = JSON.parse(JSON.stringify(e.nodes)),
                            r = Pr.groupAsmNodes(t)
                        for (const s of r) {
                            let e = s[0].cfg.oriType
                            if (!(e in Ur))
                                throw new Error(`Unsupported node type: ${{ oriType: e }}`)
                            Ur[e].checkAsmNodes(s)
                        }
                        let i = []
                        for (const s of r) {
                            let e = s[0].cfg.oriType
                            i.push(Ur[e].mergeNodes(s))
                        }
                        for (const s of i) Ur[s.type].recoverConnectionName(s, i)
                        for (const s of i) Ur[s.type].checkWebNode(s)
                        let n = { id: e.id, cfg: e.cfg, nodes: i }
                        return JSON.parse(JSON.stringify(n))
                    },
                    checkWebRule(e) {
                        if (!('id' in e) || 'string' != typeof e.id)
                            throw new Error('Invlaid rule id')
                        if (!('id' in e)) throw new Error('Inavlid cfg')
                        if (e.cfg.id !== e.id) throw new Error('cfg.id and id not matching')
                        if ('boolean' != typeof e.cfg.enable)
                            throw new Error('Invlaid cfg.enable')
                        if (!('nodes' in e) || !Array.isArray(e.nodes))
                            throw new Error('Invalid nodes')
                        for (const t of e.nodes) Ur[t.type].checkWebNode(t)
                    },
                }
            async function Vr(e, t, r) {
                let i = [],
                    n = new Map()
                for (const u of t.nodes) n.set(u.id, new Fr[u.type](u, r))
                let s = new zr(),
                    o = []
                for (const u of e)
                    try {
                        let e = Kr(u)
                        e.graphId === t.id && o.push(e)
                    } catch (a) { }
                for (const u of o)
                    try {
                        if ('l' === u.type) {
                            let e = n.get(u.srcNodeId) ?? s
                            if (!e.isTailNode(u.srcNodeSubId)) continue
                            let t = n.get(u.dstNodeId) ?? s
                            if (!t.isHeadNode(u.dstNodeSubId)) continue
                            let r = { true: '真', false: '伪', null: '事件' }[u.value],
                                o = e.translateOutputName(u.srcName, u.srcNodeSubId),
                                a = t.translateInputName(u.dstName, u.dstNodeSubId)
                            if (
                                !(e.outputTypes[o]?.includes(u.value) ?? 1) ||
                                !(t.inputTypes[a]?.includes(u.value) ?? 1)
                            )
                                continue
                            i.push({
                                timestamp: u.timestamp,
                                type: 'link',
                                srcNodeId: u.srcNodeId,
                                srcName: o,
                                dstNodeId: u.dstNodeId,
                                dstName: a,
                                value: r,
                            })
                        } else if ('r' === u.type) {
                            let e = JSON.parse(u.info)
                            if ('object' != typeof e || null === e) continue
                            if ('boolean' != typeof e.enable) continue
                            i.push({
                                timestamp: u.timestamp,
                                type: 'rule',
                                value: e.enable ? '规则启用' : '规则停用',
                            })
                        } else {
                            let e = n.get(u.nodeId) ?? s
                            if ('i' === u.type) {
                                const t = await e.getInfo(u)
                                void 0 !== t &&
                                    i.push({
                                        timestamp: u.timestamp,
                                        type: 'info',
                                        nodeId: u.nodeId,
                                        value: t,
                                    })
                            } else {
                                const e = `错误码: ${u.errorCode ?? -1}, 错误信息: ${u.errorMessage ?? '未知错误'
                                    }`
                                i.push({
                                    timestamp: u.timestamp,
                                    type: 'error',
                                    nodeId: u.nodeId,
                                    value: e,
                                })
                            }
                        }
                    } catch (a) { }
                return i
            }
            function Kr(e) {
                let t = e.split('|')
                const r = t[0]
                if ('2' !== r) throw new Error(`Unsupported log version ${r}`)
                const i = Number(t[1])
                if (Number.isNaN(i)) throw new Error('Invalid timestamp')
                const n = t[2],
                    s = t[3]
                if (void 0 === s) throw new Error('Invalid graph id')
                if ('l' === n) {
                    if (7 !== t.length) throw new Error('Invalid link log length')
                    const e = t[4],
                        [o, a, u] = e.split(/[\.\-]/)
                    if (void 0 === o || void 0 === a || void 0 === u)
                        throw new Error('Invalid src')
                    const c = Number(a)
                    if (Number.isNaN(c)) throw new Error('Invalid src')
                    const d = t[5],
                        [p, f, l] = d.split(/[\.\-]/)
                    if (void 0 === p || void 0 === f || void 0 === l)
                        throw new Error('Invalid dst')
                    const h = Number(f)
                    if (Number.isNaN(h)) throw new Error('Invalid dst')
                    return {
                        version: r,
                        type: n,
                        timestamp: i,
                        graphId: s,
                        srcNodeId: o,
                        srcNodeSubId: c,
                        srcName: u,
                        dstNodeId: p,
                        dstNodeSubId: h,
                        dstName: l,
                        value: t[6],
                    }
                }
                if ('i' === n) {
                    if (6 !== t.length) throw new Error('Invalid info length')
                    const [e, o] = t[4].split('-')
                    if (void 0 === e || void 0 === o) throw new Error('Invalid node id')
                    const a = Number(o)
                    if (Number.isNaN(a)) throw new Error('Invalid node id')
                    return {
                        version: r,
                        type: n,
                        timestamp: i,
                        graphId: s,
                        nodeId: e,
                        nodeSubId: a,
                        info: t[5],
                    }
                }
                if ('e' === n) {
                    if (7 !== t.length) throw new Error('Invalid error length')
                    const [e, o] = t[4].split('-')
                    if (void 0 === e || void 0 === o) throw new Error('Invalid node id')
                    const a = Number(o)
                    if (Number.isNaN(a)) throw new Error('Invalid node id')
                    const u = Number(t[5])
                    if (Number.isNaN(u)) throw new Error('Invalid error code')
                    return {
                        version: r,
                        type: n,
                        timestamp: i,
                        graphId: s,
                        nodeId: e,
                        nodeSubId: a,
                        errorCode: u,
                        errorMessage: t[6],
                    }
                }
                if ('r' === n) {
                    if (5 !== t.length) throw new Error('Invalid rule log length')
                    return { version: r, type: n, timestamp: i, graphId: s, info: t[4] }
                }
                throw new Error(`Unsupported log type ${n}`)
            }
            class zr {
                constructor(e, t) {
                    ; (this.tailNodeSubIds = [0]),
                        (this.headNodeSubIds = [0]),
                        (this.inputNameDict = {}),
                        (this.outputNameDict = {}),
                        (this.inputTypes = {}),
                        (this.outputTypes = {})
                }
                isTailNode(e) {
                    return this.tailNodeSubIds?.includes(e) ?? !1
                }
                isHeadNode(e) {
                    return this.headNodeSubIds?.includes(e) ?? !1
                }
                translateInputName(e, t) {
                    return this.inputNameDict[`${t}.${e}`] ?? e
                }
                translateOutputName(e, t) {
                    return this.outputNameDict[`${t}.${e}`] ?? e
                }
                async getInfo(e) {
                    return '未知信息'
                }
            }
            const Fr = {
                deviceInput: class extends zr {
                    constructor(e) {
                        super(),
                            (this.outputTypes = { output: ['true', 'false', 'null'] }),
                            (this.outputNameDict = { '0.event': 'output' }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('piid' in this.params.props
                                ? 'between' !== this.params.props.operator
                                    ? (this.tailNodeSubIds = [1])
                                    : (this.tailNodeSubIds = [3])
                                : 'arguments' in this.params.props &&
                                    this.params.props.arguments.find((e) => 'operator' in e)
                                    ? (this.tailNodeSubIds = [1])
                                    : (this.tailNodeSubIds = [0])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                },
                deviceOutput: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputNameDict = {
                                '0.trigger': 'trigger',
                                '0.input0': 'trigger',
                            }),
                            (this.inputTypes = { trigger: ['null'] }),
                            (this.outputTypes = { output: ['null'] }),
                            (this.params = e)
                    }
                    async getInfo(e) {
                        return 'success' === e.info
                            ? '执行成功'
                            : `命令发送，参数为：${JSON.parse(e.info).join(',')}`
                    }
                },
                deviceGet: class extends zr {
                    constructor(e, t) {
                        super(),
                            (this.inputNameDict = { '0.trigger': 'input' }),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'], output2: ['null'] }),
                            (this.outputNameDict = {
                                '1.output': 'output2',
                                '2.output': 'output',
                                '4.output': 'output',
                            }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0),
                            (this.valueList = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('between' !== this.params.props.operator
                                ? (this.tailNodeSubIds = [1, 2])
                                : (this.tailNodeSubIds = [1, 4])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                    async initValueList() {
                        if (void 0 !== this.valueList) return
                        this.valueList = {}
                        let e = (await a.parse(this.params.cfg.urn)).propertyNotify.find(
                            (e) =>
                                e.siid === this.params.props.siid &&
                                e.piid === this.params.props.piid
                        )
                        if (void 0 !== e && 'valueList' in e)
                            for (const t of e.valueList)
                                this.valueList[`${t.value}`] = t.description
                    }
                    async getInfo(e) {
                        return (
                            await this.initValueList(),
                            `查询成功, 值为${this.valueList[e.info] ?? e.info}`
                        )
                    }
                },
                alarmClock: class extends zr {
                    constructor(e) {
                        super(),
                            (this.outputNameDict = { '2.met': 'output' }),
                            (this.outputTypes = { output: ['null'] }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('inHoliday' in this.params.props.filter
                                ? (this.tailNodeSubIds = [2])
                                : (this.tailNodeSubIds = [0])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                },
                timeRange: class extends zr {
                    constructor(e) {
                        super(),
                            (this.outputNameDict = { '2.output': 'output' }),
                            (this.outputTypes = { output: ['true', 'false', 'null'] }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('inHoliday' in this.params.props.filter
                                ? (this.tailNodeSubIds = [2])
                                : (this.tailNodeSubIds = [0])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                },
                delay: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputNameDict = { '0.trigger': 'input' }),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'] })
                    }
                },
                signalOr: class extends zr {
                    constructor(e) {
                        super(), (this.inputTypes = { output: ['null'] })
                        let t = Object.keys(e.inputs).map((e) =>
                            Number(e.replace('input', ''))
                        )
                        t.sort((e, t) => e - t)
                        for (const r in t) this.inputTypes[`input${t[r]}`] = ['null']
                    }
                },
                logicOr: class extends zr {
                    constructor(e) {
                        super(), (this.outputTypes = { output: ['true', 'false', 'null'] })
                        let t = Object.keys(e.inputs).map((e) =>
                            Number(e.replace('input', ''))
                        )
                        t.sort((e, t) => e - t)
                        for (const r in t)
                            this.inputTypes[`input${t[r]}`] = ['true', 'false']
                    }
                },
                logicAnd: class extends zr {
                    constructor(e) {
                        super(), (this.outputTypes = { output: ['true', 'false', 'null'] })
                        let t = Object.keys(e.inputs).map((e) =>
                            Number(e.replace('input', ''))
                        )
                        t.sort((e, t) => e - t)
                        for (const r in t)
                            this.inputTypes[`input${t[r]}`] = ['true', 'false']
                    }
                },
                logicNot: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['true', 'false'] }),
                            (this.outputTypes = { output: ['true', 'false', 'null'] })
                    }
                },
                condition: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = {
                                trigger: ['null'],
                                condition: ['true', 'false'],
                            }),
                            (this.outputTypes = { met: ['null'], unmet: ['null'] })
                    }
                },
                loop: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { start: ['null'], stop: ['null'] }),
                            (this.outputTypes = { output: ['null'] })
                    }
                },
                onlyNTimes: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'], zero: ['null'] }),
                            (this.outputTypes = { output: ['null'] })
                    }
                    async getInfo(e) {
                        let t = JSON.parse(e.info)
                        return 'n' in t
                            ? `当前计数为${t.n}`
                            : 'max' in t
                                ? '已达到上限'
                                : super.getInfo(e)
                    }
                },
                counter: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'], zero: ['null'] }),
                            (this.outputTypes = { output: ['true', 'false', 'null'] }),
                            (this.tailNodeSubIds = [1])
                    }
                    async getInfo(e) {
                        let t = JSON.parse(e.info)
                        return 'n' in t ? `当前计数为${t.n}` : super.getInfo(e)
                    }
                },
                modeSwitch: class extends zr {
                    constructor(e) {
                        super(), (this.inputTypes = { input: ['null'] })
                        let t = Object.keys(e.outputs).map((e) =>
                            Number(e.replace('output', ''))
                        )
                        t.sort((e, t) => e - t)
                        for (const r in t) this.outputTypes[`output${t[r]}`] = ['null']
                    }
                },
                register: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { setTrue: ['null'], setFalse: ['null'] }),
                            (this.outputTypes = { output: ['true', 'false', 'null'] })
                    }
                },
                eventSequence: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input1: ['null'], input2: ['null'] }),
                            (this.outputTypes = { output: ['null'] })
                    }
                },
                statusLast: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['true', 'false'] }),
                            (this.outputTypes = { output: ['true', 'false', 'null'] })
                    }
                },
                onLoad: class extends zr {
                    constructor(e) {
                        super(), (this.outputTypes = { output: ['null'] })
                    }
                },
                nop: class extends zr {
                    constructor(e) {
                        super()
                    }
                },
                deviceInputSetVar: class extends zr {
                    constructor(e) {
                        super(),
                            (this.outputTypes = { output: ['null'] }),
                            (this.outputNameDict = {
                                '0.event': 'output',
                                '2.output': 'output',
                            }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('piid' in this.params.props
                                ? (this.tailNodeSubIds = [2])
                                : (this.tailNodeSubIds = [0])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                    async getInfo(e) {
                        return 'piid' in this.params.props
                            ? `变量被设置为：${e.info}`
                            : `变量${(e.nodeSubId / 2) >>> 1}被设置为：${e.info}`
                    }
                },
                deviceGetSetVar: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'] }),
                            (this.tailNodeSubIds = [2]),
                            (this.params = e)
                    }
                    async getInfo(e) {
                        if (2 === e.nodeSubId) return `变量被设置为：${e.info}`
                    }
                },
                varChange: class extends zr {
                    constructor(e) {
                        super(),
                            (this.outputTypes = { output: ['true', 'false', 'null'] }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('between' !== this.params.props.operator
                                ? (this.tailNodeSubIds = [1])
                                : (this.tailNodeSubIds = [3])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                },
                varGet: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'], output2: ['null'] }),
                            (this.outputNameDict = {
                                '1.output': 'output2',
                                '2.output': 'output',
                                '4.output': 'output',
                            }),
                            (this.params = e),
                            (this.tailNodeSubIds = void 0)
                    }
                    isTailNode(e) {
                        return (
                            void 0 === this.tailNodeSubIds &&
                            ('between' !== this.params.props.operator
                                ? (this.tailNodeSubIds = [1, 2])
                                : (this.tailNodeSubIds = [1, 4])),
                            this.tailNodeSubIds.includes(e)
                        )
                    }
                    async getInfo(e) {
                        return `查询到的变量值为：${e.info}`
                    }
                },
                varSetNumber: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'] }),
                            (this.tailNodeSubIds = [1]),
                            (this.params = e)
                    }
                    async getInfo(e) {
                        return `变量被设置为：${e.info}`
                    }
                },
                varSetString: class extends zr {
                    constructor(e) {
                        super(),
                            (this.inputTypes = { input: ['null'] }),
                            (this.outputTypes = { output: ['null'] }),
                            (this.tailNodeSubIds = [1]),
                            (this.params = e)
                    }
                    async getInfo(e) {
                        return `变量被设置为：${e.info}`
                    }
                },
            }
            class qr {
                static getLogId(e) {
                    if ('nodeId' in e) return `node:${e.nodeId}`
                    if (void 0 === e.srcNodeId || void 0 === e.srcName)
                        throw new Error('Invalid params')
                    if ('dstNodeIdAndName' in e)
                        return `link:${e.srcNodeId}.${e.srcName}->${e.dstNodeIdAndName}`
                    if (void 0 === e.dstName || void 0 === e.dstNodeId)
                        throw new Error('Invalid params')
                    return `link:${e.srcNodeId}.${e.srcName}->${e.dstNodeId}.${e.dstName}`
                }
                #me = []
                constructor(e) {
                    let t = e.rule.nodes,
                        r = new Set()
                    for (const s of t) {
                        r.add(qr.getLogId({ nodeId: s.id }))
                        for (const e in s.outputs) {
                            const t = s.outputs[e]
                            for (const i of t)
                                r.add(
                                    qr.getLogId({
                                        srcNodeId: s.id,
                                        srcName: e,
                                        dstNodeIdAndName: i,
                                    })
                                )
                        }
                    }
                    if (void 0 !== e.filter) {
                        let t = new Set(e.filter)
                        for (const e of r) t.has(e) || r.delete(e)
                    }
                    let i = {},
                        n = 0
                    for (const s of e.log) {
                        let e
                        if ('rule' === s.type) {
                            if ('规则启用' !== s.value) continue
                            i = {}
                        } else {
                            let t
                            if (
                                ((t =
                                    'link' === s.type
                                        ? qr.getLogId({
                                            srcNodeId: s.srcNodeId,
                                            srcName: s.srcName,
                                            dstNodeId: s.dstNodeId,
                                            dstName: s.dstName,
                                        })
                                        : qr.getLogId({ nodeId: s.nodeId })),
                                    !r.has(t))
                            )
                                continue
                                ; (i[t] = {
                                    order: n++,
                                    type: s.type,
                                    timestamp: s.timestamp,
                                    info: s.value,
                                }),
                                    (e = t)
                        }
                        this.#me.push({ timestamp: s.timestamp, new: e, status: { ...i } })
                    }
                }
                get totalSteps() {
                    return this.#me.length
                }
                getStepStatus(e) {
                    if (e < 0 || e >= this.#me.length) throw new Error('Out of range')
                    return this.#me[e]
                }
                #ve(e) {
                    let t = Math.ceil(this.#me.length / 2),
                        r = t,
                        i = -1
                    for (; ;) {
                        let n = this.#me[r].timestamp,
                            s = -1
                        if (((t = Math.ceil(t / 2)), n === e)) return r
                        if (
                            (n > e
                                ? ((s = r - t), s < 0 && (s = 0))
                                : ((s = r + t),
                                    s >= this.#me.length && (s = this.#me.length - 1)),
                                i === s)
                        )
                            return -1
                                ; (i = r), (r = s)
                    }
                }
                #be(e) {
                    let t = Math.ceil(this.#me.length / 2),
                        r = t,
                        i = -1
                    for (; ;) {
                        let n = this.#me[r].timestamp,
                            s = -1
                        if (
                            ((t = Math.ceil(t / 2)),
                                n > e
                                    ? ((s = r - t), s < 0 && (s = 0))
                                    : ((s = r + t),
                                        s >= this.#me.length && (s = this.#me.length - 1)),
                                i === s)
                        ) {
                            r = Math.min(i, r)
                            break
                        }
                        ; (i = r), (r = s)
                    }
                    return this.#me[r].timestamp > e ? -1 : r
                }
                #we(e) {
                    let t = Math.ceil(this.#me.length / 2),
                        r = t,
                        i = -1
                    for (; ;) {
                        let n = this.#me[r].timestamp,
                            s = -1
                        if (
                            ((t = Math.ceil(t / 2)),
                                n > e
                                    ? ((s = r - t), s < 0 && (s = 0))
                                    : ((s = r + t),
                                        s >= this.#me.length && (s = this.#me.length - 1)),
                                i === s)
                        ) {
                            r = Math.max(i, r)
                            break
                        }
                        ; (i = r), (r = s)
                    }
                    return this.#me[r].timestamp < e ? -1 : r
                }
                findFrameIndex(e) {
                    let t = this.#ve(e.timestamp)
                    if (t < 0) return 0
                    for (; this.#me[t - 1]?.timestamp === e.timestamp;) t--
                    for (; ;) {
                        let r = this.#me[t]
                        if (r.timestamp !== e.timestamp) return 0
                        if (r.new === e.new) {
                            if (void 0 !== r.new && void 0 !== e.new) {
                                const i = r.status[r.new],
                                    n = e.status[e.new]
                                if (i.type !== n.type) {
                                    t++
                                    continue
                                }
                                if (i.info !== n.info) {
                                    t++
                                    continue
                                }
                            }
                            return t
                        }
                        t++
                    }
                }
                getStepRangeFromTimeRange(e) {
                    if (e.end <= e.start) throw new Error('Invalid range')
                    let t = this.#we(e.start)
                    if (t < 0) throw new Error('Out of range')
                    let r = this.#be(e.end)
                    if (r < 0) throw new Error('Out of range')
                    if (r < t) throw new Error('Empty range')
                    return { start: t, end: r }
                }
                gotoNextWatchPoint(e) {
                    if ('number' != typeof e.from) throw new Error('Invalid params')
                    if (!Array.isArray(e.watchPoints)) throw new Error('Invalid params')
                    let t = new Set(e.watchPoints)
                    for (let r = e.from; r < this.#me.length; r++) {
                        let e = this.#me[r]
                        if (void 0 !== e.new && t.has(e.new))
                            return {
                                watchPoint: e.new,
                                step: r,
                                timestamp: e.timestamp,
                                status: { ...e.status },
                            }
                    }
                    throw new Error('Out of range')
                }
            }
            class $r {
                #Ee
                set session(e) {
                    this.#Ee = e
                }
                get SCOPE_GLOBAL() {
                    return 'global'
                }
                async listScope() {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    return (await this.#Ee.callAPI('getVarScopeList', {}, 5e3)).scopes
                }
                async listVar(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e) throw new Error('Invalid scope')
                    return await this.#Ee.callAPI('getVarList', { scope: e }, 5e3)
                }
                async createVar(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    if ('string' != typeof e.id) throw new Error('Invalid params.id')
                    if (!['number', 'string'].includes(e.type))
                        throw new Error('Invalid params.type')
                    if (
                        'number' === e.type &&
                        'number' != typeof e.value &&
                        void 0 !== e.value
                    )
                        throw new Error('Invalid params.value')
                    if (
                        'string' === e.type &&
                        'string' != typeof e.value &&
                        void 0 !== e.value
                    )
                        throw new Error('Invalid params.value')
                    await this.#Ee.callAPI(
                        'createVar',
                        {
                            scope: e.scope,
                            id: e.id,
                            type: e.type,
                            value: e.value,
                            userData: e.userData,
                        },
                        5e3
                    )
                }
                async deleteVar(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    let t
                    if ('id' in e) {
                        if ('string' != typeof e.id) throw new Error('Invalid params.id')
                        t = { scope: e.scope, id: e.id }
                    } else {
                        if (!('all' in e)) throw new Error('Invalid params')
                        if (!0 !== e.all) throw new Error('Invalid params.all')
                        t = { scope: e.scope, all: !0 }
                    }
                    await this.#Ee.callAPI('deleteVar', t, 5e3)
                }
                async getVarConfig(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    if ('string' != typeof e.id) throw new Error('Invalid params.id')
                    return await this.#Ee.callAPI(
                        'getVarConfig',
                        { scope: e.scope, id: e.id },
                        5e3
                    )
                }
                async setVarConfig(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    if ('string' != typeof e.id) throw new Error('Invalid params.id')
                    if (void 0 === e.userData) throw new Error('No change provided')
                    await this.#Ee.callAPI(
                        'setVarConfig',
                        { scope: e.scope, id: e.id, userData: e.userData },
                        5e3
                    )
                }
                async getVarValue(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    if ('string' != typeof e.id) throw new Error('Invalid params.id')
                    return await this.#Ee.callAPI(
                        'getVarValue',
                        { scope: e.scope, id: e.id },
                        5e3
                    )
                }
                async setVarValue(e) {
                    if (void 0 === this.#Ee) throw new Error('session not set')
                    if ('string' != typeof e.scope)
                        throw new Error('Invalid params.scope')
                    if ('string' != typeof e.id) throw new Error('Invalid params.id')
                    if (!['number', 'string'].includes(typeof e.value))
                        throw new Error('Invalid value type')
                    if ('number' == typeof e.value && Number.isNaN(e.value))
                        throw new Error('Invalid number')
                    await this.#Ee.callAPI(
                        'setVarValue',
                        { scope: e.scope, id: e.id, value: e.value },
                        5e3
                    )
                }
                async generateBackup() {
                    let e = {}
                    const t = await this.listScope()
                    for (const r of t) {
                        e[r] = {}
                        const t = await this.listVar(r)
                        for (const i in t) e[r][i] = t[i]
                    }
                    return e
                }
                async loadBackupDeleteAll() {
                    const e = await this.listScope()
                    for (const r of e)
                        try {
                            await this.deleteVar({ scope: r, all: !0 })
                        } catch (t) { }
                }
                async loadBackupload(e) {
                    for (const r in e)
                        for (const i in e[r]) {
                            const n = e[r][i]
                            try {
                                await this.createVar({ ...n, scope: r, id: i }),
                                    void 0 !== n.value &&
                                    (await this.setVarValue({
                                        scope: r,
                                        id: i,
                                        value: n.value,
                                    }))
                            } catch (t) { }
                        }
                }
            }
            const jr = new (class {
                #Ee = void 0
                #Ie = void 0
                #Ce = new Map()
                #Se = void 0
                #Ae = void 0
                #Te = []
                #Ne = { ruleId: void 0, cache: new Map() }
                #_e = new $r()
                async init(e) {
                    if (void 0 !== this.#Ee)
                        throw new Error('Reinit detected, deinit first')
                        ; (this.#Ee = e), (this.#_e.session = e)
                }
                async deinit() {
                    ; (this.#Ee = void 0), (this.#_e.session = void 0)
                }
                checkRule(e, t) {
                    Or.checkWebRule({ id: t.id, nodes: e, cfg: t })
                }
                async saveRule(e, t) {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    let r = { id: t.id, nodes: e, cfg: t },
                        i = Or.webRuleToAsmRule(r)
                    await this.#Ee.callAPI('setGraph', i, 5e3),
                        this.#Ce.set(t.id, r),
                        this.#Ne.ruleId === t.id &&
                        ((this.#Ne.ruleId = void 0), this.#Ne.cache.clear())
                }
                async deleteRule(e) {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    await this.#Ee.callAPI('deleteGraph', { id: e.id }, 5e3),
                        this.#Ce.delete(e.id),
                        this.#Ne.ruleId === e.id &&
                        ((this.#Ne.ruleId = void 0), this.#Ne.cache.clear())
                }
                async changeRuleConfig(e) {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    await this.#Ee.callAPI('changeGraphConfig', e, 5e3)
                    let t = this.#Ce.get(e.id)
                    t && (t.cfg = e)
                }
                async getRuleConfigList() {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    return await this.#Ee.callAPI('getGraphList', {}, 5e3)
                }
                async getRuleContent(e) {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    let t = {
                        id: e.id,
                        nodes: (await this.#Ee.callAPI('getGraph', { id: e.id }, 5e3))
                            .nodes,
                        cfg: e,
                    },
                        r = Or.asmRuleToWebRule(t)
                    return this.#Ce.set(e.id, r), r.nodes
                }
                #Be(e) {
                    let t = u.md.sha256.create()
                    for (let n = 0; n < e.byteLength; n += 2e3)
                        t.update(
                            String.fromCharCode(...new Uint8Array(e.slice(n, n + 2e3)))
                        )
                    let r = t.digest().bytes(32),
                        i = new Uint8Array(32)
                    for (let n = 0; n < r.length; n++) i[n] = r.charCodeAt(n)
                    return i
                }
                async generateBackup() {
                    let e = await this.getRuleConfigList(),
                        t = []
                    for (const o of e)
                        t.push({ id: o.id, cfg: o, nodes: await this.getRuleContent(o) })
                    const r = {
                        version: 2,
                        rules: t,
                        variables: await this.#_e.generateBackup(),
                    },
                        i = Br.compress(new TextEncoder().encode(JSON.stringify(r))),
                        n = this.#Be(i)
                    let s = new Uint8Array(i.byteLength + n.buffer.byteLength)
                    return s.set(new Uint8Array(i), 0), s.set(n, i.byteLength), s.buffer
                }
                async checkBackup(e) {
                    if (e.byteLength < 32) throw new Error('Invalid data')
                    let t = new Uint8Array(e.slice(e.byteLength - 32)),
                        r = e.slice(0, e.byteLength - 32),
                        i = this.#Be(r)
                    for (let n = 0; n < 32; n++)
                        if (i[n] !== t[n]) throw new Error('Invalid data')
                }
                async loadBackup(e) {
                    if (e.byteLength < 32) throw new Error('Invalid data')
                    let t = new Uint8Array(e.slice(e.byteLength - 32)),
                        r = e.slice(0, e.byteLength - 32),
                        i = this.#Be(r)
                    for (let u = 0; u < 32; u++)
                        if (i[u] !== t[u]) throw new Error('Invalid data')
                    let n = JSON.parse(new TextDecoder().decode(Br.decompress(r))),
                        s = Array.isArray(n) ? n : n.rules,
                        o = Array.isArray(n) ? void 0 : n.variables,
                        a = await this.getRuleConfigList()
                    for (const u of a) await this.deleteRule(u)
                    await this.#_e.loadBackupDeleteAll(),
                        void 0 !== o && (await this.#_e.loadBackupload(o))
                    for (const u of s) await this.saveRule(u.nodes, u.cfg)
                }
                #ke(e) {
                    return (
                        'object' == typeof e &&
                        null !== e &&
                        'boolean' == typeof e.online &&
                        'boolean' == typeof e.pushAvailable &&
                        'boolean' == typeof e.specV2Access &&
                        'string' == typeof e.model &&
                        'string' == typeof e.modelName &&
                        'string' == typeof e.urn &&
                        'string' == typeof e.roomId &&
                        'string' == typeof e.roomName &&
                        'string' == typeof e.name
                    )
                }
                async getDevList() {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    this.#Ie = (await this.#Ee.callAPI('getDevList', {}, 1e4)).devList
                    for (const e in this.#Ie)
                        this.#ke(this.#Ie[e]) || delete this.#Ie[e]
                    return this.#Ie
                }
                async #Re() {
                    return (
                        void 0 !== this.#Se ||
                        (this.#Se = (async () => {
                            try {
                                if (void 0 === this.#Ee) throw new Error('Not initialized')
                                let t = []
                                for (let r = 0; ; r++) {
                                    let i = ''
                                    try {
                                        i = await this.#Ee.callAPI('getLog', { num: r }, 5e3)
                                    } catch (e) { }
                                    if ('' === i) {
                                        this.#Te = []
                                        break
                                    }
                                    let n = i.trimEnd().split('\n')
                                    if (
                                        (t.push(n),
                                            void 0 !== this.#Te[0]?.[0] && this.#Te[0][0] === n[0])
                                    )
                                        break
                                }
                                this.#Te.shift()
                                for (let e = t.length - 1; e >= 0; e--) {
                                    const r = t[e]
                                    this.#Te.unshift(r)
                                }
                                this.#Se = void 0
                            } catch (e) {
                                throw ((this.#Se = void 0), e)
                            }
                        })()),
                        this.#Se
                    )
                }
                async parseLog(e) {
                    if (void 0 === this.#Ee) throw new Error('Not initialized')
                    for (await this.#Re(); void 0 !== this.#Ae;)
                        try {
                            await this.#Ae
                        } catch (r) { }
                    let t = []
                    return (
                        (this.#Ae = (async () => {
                            try {
                                await new Promise((e) => {
                                    setTimeout(() => {
                                        e(void 0)
                                    }, 0)
                                })
                                let r = this.#Ce.get(e.id)
                                if (
                                    (void 0 === r && (await this.getRuleContent(e)),
                                        (r = this.#Ce.get(e.id)),
                                        void 0 === r)
                                )
                                    return void (this.#Ae = void 0)
                                if (
                                    (void 0 === this.#Ie && (await this.getDevList()),
                                        void 0 === this.#Ie)
                                )
                                    throw new Error('Can not get device list')
                                e.id !== this.#Ne.ruleId &&
                                    ((this.#Ne.ruleId = e.id), this.#Ne.cache.clear())
                                let i = new Set()
                                for (const e of this.#Te) i.add(e[0])
                                this.#Ne.cache.forEach((e, t) => {
                                    i.has(t) || this.#Ne.cache.delete(t)
                                })
                                for (let e = this.#Te.length - 1; e >= 0; e--) {
                                    const i = this.#Ne.cache.get(this.#Te[e][0])
                                    if (void 0 !== i && i.blockLength === this.#Te[e].length)
                                        t = t.concat(i.log)
                                    else {
                                        const i = await Vr(this.#Te[e], r, this.#Ie)
                                            ; (t = t.concat(i)),
                                                this.#Ne.cache.set(this.#Te[e][0], {
                                                    blockLength: this.#Te[e].length,
                                                    log: i,
                                                })
                                    }
                                }
                                this.#Ae = void 0
                            } catch (r) {
                                throw ((this.#Ae = void 0), r)
                            }
                        })()),
                        await this.#Ae,
                        t
                    )
                }
                async getLogAnimationCalculator(e) {
                    let t = this.#Ce.get(e.ruleCfg.id)
                    if (
                        (void 0 === t && (await this.getRuleContent(e.ruleCfg)),
                            (t = this.#Ce.get(e.ruleCfg.id)),
                            void 0 === t)
                    )
                        throw new Error('Rule not found')
                    return new qr({ rule: t, log: e.log, filter: e.filter })
                }
                getLogAnimationCalculatorLogId(e) {
                    return qr.getLogId(e)
                }
                get varManager() {
                    return this.#_e
                }
            })(),
                Hr = a,
                Gr = Rr,
                Wr = jr,
                Qr = Mr
        },
        18597: (e) => {
            'use strict'
            e.exports = { i8: '6.5.4' }
        },
    },
])
